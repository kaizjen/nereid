/* Bookmark.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_flush_callback,
	add_location,
	append_dev,
	append_styles,
	attr_dev,
	bind,
	binding_callbacks,
	create_component,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element,
	globals,
	init,
	insert_dev,
	is_function,
	mount_component,
	noop,
	safe_not_equal,
	set_data_dev,
	space,
	src_url_equal,
	text,
	transition_in,
	transition_out,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

const { console: console_1 } = globals;

import {
	ContextMenu,
	TextBlock,
	IconButton,
	MenuFlyoutItem,
	MenuFlyoutDivider
} from "../modules/fluent-svelte/index.js";

import { createEventDispatcher } from "nereid://.svelte/index.mjs";
import * as Icons from "../icons.js";
import EditBookmark from "./EditBookmark.svelte.js";
const file = "Bookmark.svelte";

function add_css(target) {
	append_styles(target, "svelte-227xcv", ".item.svelte-227xcv{display:flex}.b-link.svelte-227xcv{border-radius:8px;padding:10px;padding-inline:20px;flex-grow:1;color:inherit;text-decoration:none;display:flex;flex-direction:column;overflow:hidden}.b-link.svelte-227xcv:hover{background:var(--fds-subtle-fill-secondary)}.b-link.svelte-227xcv:active{background:var(--fds-control-fill-secondary);transition:.15s}.title.svelte-227xcv{display:flex;align-items:center}.url.svelte-227xcv{color:var(--default-gray)}.icon.svelte-227xcv{width:16px;height:16px;margin-right:8px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQm9va21hcmsuc3ZlbHRlIiwic291cmNlcyI6WyJCb29rbWFyay5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHN0eWxlPlxyXG4gIC5pdGVtIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgfVxyXG4gIC5iLWxpbmsge1xyXG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIHBhZGRpbmctaW5saW5lOiAyMHB4O1xyXG4gICAgZmxleC1ncm93OiAxO1xyXG4gICAgY29sb3I6IGluaGVyaXQ7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgfVxyXG4gIC5iLWxpbms6aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZDogdmFyKC0tZmRzLXN1YnRsZS1maWxsLXNlY29uZGFyeSk7XHJcbiAgfVxyXG4gIC5iLWxpbms6YWN0aXZlIHtcclxuICAgIGJhY2tncm91bmQ6IHZhcigtLWZkcy1jb250cm9sLWZpbGwtc2Vjb25kYXJ5KTtcclxuICAgIHRyYW5zaXRpb246IC4xNXM7XHJcbiAgfVxyXG4gIC50aXRsZSB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICB9XHJcbiAgLnVybCB7XHJcbiAgICBjb2xvcjogdmFyKC0tZGVmYXVsdC1ncmF5KTtcclxuICB9XHJcbiAgLmljb24ge1xyXG4gICAgd2lkdGg6IDE2cHg7XHJcbiAgICBoZWlnaHQ6IDE2cHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDhweDtcclxuICB9XHJcbjwvc3R5bGU+XHJcbjxzY3JpcHQ+XHJcbiAgaW1wb3J0IHsgQ29udGV4dE1lbnUsIFRleHRCbG9jaywgSWNvbkJ1dHRvbiwgTWVudUZseW91dEl0ZW0sIE1lbnVGbHlvdXREaXZpZGVyIH0gZnJvbSBcImZsdWVudC1zdmVsdGVcIjtcclxuICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XHJcbiAgaW1wb3J0ICogYXMgSWNvbnMgZnJvbSBcIi4uL2ljb25zLmpzXCJcclxuICBpbXBvcnQgRWRpdEJvb2ttYXJrIGZyb20gXCIuL0VkaXRCb29rbWFyay5zdmVsdGVcIjtcclxuXHJcbiAgZXhwb3J0IGxldCBib29rbWFyaztcclxuICBjb25zdCB7IHQgfSA9IHdpbmRvdy5uZXJlaWQuaTE4blxyXG4gIGV4cG9ydCBsZXQgdHQ7XHJcbiAgZXhwb3J0IGxldCBkZWw7XHJcbiAgZXhwb3J0IGxldCBpbmRleDtcclxuXHJcbiAgbGV0IGFjdGlvblRleHQgPSB3aW5kb3cuYWN0aW9uLnNwbGl0KCcvJylbMV07XHJcbiAgbGV0IGVkaXRJbmRleCA9IGFjdGlvblRleHQ/LnN0YXJ0c1dpdGgoJ2VkaXQ6JykgPyBhY3Rpb25UZXh0LnJlcGxhY2UoJ2VkaXQ6JywgJycpIDogJyc7XHJcbiAgbGV0IGVkaXREaWFsb2cgPSBlZGl0SW5kZXggJiYgTnVtYmVyKGVkaXRJbmRleCkgPT0gaW5kZXggJiYgd2luZG93LmlzRmlyc3RUaW1lO1xyXG4gIGNvbnNvbGUubG9nKCdlZGl0JywgYWN0aW9uVGV4dCwgZWRpdEluZGV4LCBpbmRleCk7XHJcblxyXG4gIGlmIChhY3Rpb25UZXh0ICYmICFlZGl0SW5kZXgpIHtcclxuICAgIGxldCBudW0gPSBOdW1iZXIoYWN0aW9uVGV4dCk7XHJcbiAgICBpZiAobnVtID09IGluZGV4KSB7XHJcbiAgICAgIC8vIFRPRE86IHNjcm9sbFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKVxyXG5cclxuICBmdW5jdGlvbiByZWNpZXZlRWRpdCh7IGRldGFpbCB9KSB7XHJcbiAgICBkaXNwYXRjaCgnZWRpdCcsIGRldGFpbClcclxuICAgIGVkaXREaWFsb2cgPSBmYWxzZTtcclxuICB9XHJcbiAgd2luZG93LmlzRmlyc3RUaW1lID0gZmFsc2U7XHJcbjwvc2NyaXB0PlxyXG5cclxuPEVkaXRCb29rbWFya1xyXG4gIGJpbmQ6b3Blbj17ZWRpdERpYWxvZ31cclxuICB7dHR9XHJcbiAgYnV0dG9uVGV4dD17dCgnY29tbW9uLmRvbmUnKX1cclxuICBvbjpjbGljaz17cmVjaWV2ZUVkaXR9XHJcbiAgbmFtZT17Ym9va21hcmsubmFtZX1cclxuICB1cmw9e2Jvb2ttYXJrLnVybH1cclxuLz5cclxuXHJcbjxDb250ZXh0TWVudSBzdHlsZT1cIndoaXRlLXNwYWNlOiBub3dyYXA7XCI+XHJcbiAgPGRpdiBjbGFzcz1cIml0ZW1cIj5cclxuICAgIDxhIGNsYXNzPVwiYi1saW5rXCIgaHJlZj17Ym9va21hcmsudXJsfT5cclxuICAgICAgPGRpdiBjbGFzcz1cInRpdGxlXCI+XHJcbiAgICAgICAgeyNpZiBib29rbWFyay5pY29uVVJMfVxyXG4gICAgICAgICAgPGltZyBjbGFzcz1cImljb25cIiBzcmM9eydnZXQ6JyArIGJvb2ttYXJrLmljb25VUkx9IGFsdD17dHQoJ2Zhdmljb24nKX0+XHJcbiAgICAgICAgey9pZn1cclxuICAgICAgICA8VGV4dEJsb2NrPlxyXG4gICAgICAgICAge2Jvb2ttYXJrLm5hbWV9XHJcbiAgICAgICAgPC9UZXh0QmxvY2s+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8c3BhbiBjbGFzcz1cInVybFwiPlxyXG4gICAgICAgIDxUZXh0QmxvY2sgdmFyaWFudD1cImNhcHRpb25cIj5cclxuICAgICAgICAgIHtib29rbWFyay51cmx9XHJcbiAgICAgICAgPC9UZXh0QmxvY2s+XHJcbiAgICAgIDwvc3Bhbj5cclxuICAgIDwvYT5cclxuICAgIDxJY29uQnV0dG9uIG9uOmNsaWNrPXtkZWx9PlxyXG4gICAgICA8SWNvbnMuRGVsZXRlIHRpdGxlPXt0dCgnYm9va21hcmsuZGVsZXRlJyl9PjwvSWNvbnMuRGVsZXRlPlxyXG4gICAgPC9JY29uQnV0dG9uPlxyXG4gIDwvZGl2PlxyXG5cclxuICA8c3ZlbHRlOmZyYWdtZW50IHNsb3Q9XCJmbHlvdXRcIj5cclxuICAgIDxNZW51Rmx5b3V0SXRlbSBvbjpjbGljaz17KCkgPT4gd2luZG93Lm5lcmVpZC50YWIuY3JlYXRlKGJvb2ttYXJrLnVybCl9PlxyXG4gICAgICB7dCgnbWVudS5jb250ZXh0TWVudS5vcGVuLm5ld1RhYicpfVxyXG4gICAgPC9NZW51Rmx5b3V0SXRlbT5cclxuICAgIDxNZW51Rmx5b3V0SXRlbSBvbjpjbGljaz17KCkgPT4gd2luZG93Lm5lcmVpZC50YWIuZ28oYm9va21hcmsudXJsKX0+XHJcbiAgICAgIHt0KCdtZW51LmNvbnRleHRNZW51Lm9wZW4udGhpc1RhYicpfVxyXG4gICAgPC9NZW51Rmx5b3V0SXRlbT5cclxuICAgIDxNZW51Rmx5b3V0RGl2aWRlciAvPlxyXG4gICAgPE1lbnVGbHlvdXRJdGVtIG9uOmNsaWNrPXsoKSA9PiBlZGl0RGlhbG9nID0gdHJ1ZX0+XHJcbiAgICAgIHt0dCgnYm9va21hcmsuYnV0dG9uLWVkaXQnKX1cclxuICAgIDwvTWVudUZseW91dEl0ZW0+XHJcbiAgICA8TWVudUZseW91dEl0ZW0gb246Y2xpY2s9e2RlbH0+XHJcbiAgICAgIHt0dCgnYm9va21hcmsuYnV0dG9uLWRlbGV0ZScpfVxyXG4gICAgPC9NZW51Rmx5b3V0SXRlbT5cclxuICA8L3N2ZWx0ZTpmcmFnbWVudD5cclxuPC9Db250ZXh0TWVudT4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0UsS0FBSyxjQUFDLENBQUMsQUFDTCxPQUFPLENBQUUsSUFBSSxBQUNmLENBQUMsQUFDRCxPQUFPLGNBQUMsQ0FBQyxBQUNQLGFBQWEsQ0FBRSxHQUFHLENBQ2xCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsY0FBYyxDQUFFLElBQUksQ0FDcEIsU0FBUyxDQUFFLENBQUMsQ0FDWixLQUFLLENBQUUsT0FBTyxDQUNkLGVBQWUsQ0FBRSxJQUFJLENBQ3JCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsY0FBYyxDQUFFLE1BQU0sQ0FDdEIsUUFBUSxDQUFFLE1BQU0sQUFDbEIsQ0FBQyxBQUNELHFCQUFPLE1BQU0sQUFBQyxDQUFDLEFBQ2IsVUFBVSxDQUFFLElBQUksMkJBQTJCLENBQUMsQUFDOUMsQ0FBQyxBQUNELHFCQUFPLE9BQU8sQUFBQyxDQUFDLEFBQ2QsVUFBVSxDQUFFLElBQUksNEJBQTRCLENBQUMsQ0FDN0MsVUFBVSxDQUFFLElBQUksQUFDbEIsQ0FBQyxBQUNELE1BQU0sY0FBQyxDQUFDLEFBQ04sT0FBTyxDQUFFLElBQUksQ0FDYixXQUFXLENBQUUsTUFBTSxBQUNyQixDQUFDLEFBQ0QsSUFBSSxjQUFDLENBQUMsQUFDSixLQUFLLENBQUUsSUFBSSxjQUFjLENBQUMsQUFDNUIsQ0FBQyxBQUNELEtBQUssY0FBQyxDQUFDLEFBQ0wsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLFlBQVksQ0FBRSxHQUFHLEFBQ25CLENBQUMifQ== */");
}

// (82:8) {#if bookmark.iconURL}
function create_if_block(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "class", "icon svelte-227xcv");
			if (!src_url_equal(img.src, img_src_value = 'get:' + /*bookmark*/ ctx[0].iconURL)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*tt*/ ctx[1]('favicon'));
			add_location(img, file, 82, 10, 1968);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*bookmark*/ 1 && !src_url_equal(img.src, img_src_value = 'get:' + /*bookmark*/ ctx[0].iconURL)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*tt*/ 2 && img_alt_value !== (img_alt_value = /*tt*/ ctx[1]('favicon'))) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(82:8) {#if bookmark.iconURL}",
		ctx
	});

	return block;
}

// (85:8) <TextBlock>
function create_default_slot_7(ctx) {
	let t_1_value = /*bookmark*/ ctx[0].name + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*bookmark*/ 1 && t_1_value !== (t_1_value = /*bookmark*/ ctx[0].name + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(85:8) <TextBlock>",
		ctx
	});

	return block;
}

// (90:8) <TextBlock variant="caption">
function create_default_slot_6(ctx) {
	let t_1_value = /*bookmark*/ ctx[0].url + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*bookmark*/ 1 && t_1_value !== (t_1_value = /*bookmark*/ ctx[0].url + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(90:8) <TextBlock variant=\\\"caption\\\">",
		ctx
	});

	return block;
}

// (95:4) <IconButton on:click={del}>
function create_default_slot_5(ctx) {
	let icons_delete;
	let current;

	icons_delete = new Icons.Delete({
			props: { title: /*tt*/ ctx[1]('bookmark.delete') },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icons_delete.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(icons_delete, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icons_delete_changes = {};
			if (dirty & /*tt*/ 2) icons_delete_changes.title = /*tt*/ ctx[1]('bookmark.delete');
			icons_delete.$set(icons_delete_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icons_delete.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icons_delete.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icons_delete, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(95:4) <IconButton on:click={del}>",
		ctx
	});

	return block;
}

// (78:0) <ContextMenu style="white-space: nowrap;">
function create_default_slot_4(ctx) {
	let div1;
	let a;
	let div0;
	let t0;
	let textblock0;
	let t1;
	let span;
	let textblock1;
	let a_href_value;
	let t2;
	let iconbutton;
	let current;
	let if_block = /*bookmark*/ ctx[0].iconURL && create_if_block(ctx);

	textblock0 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	textblock1 = new TextBlock({
			props: {
				variant: "caption",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton = new IconButton({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton.$on("click", function () {
		if (is_function(/*del*/ ctx[2])) /*del*/ ctx[2].apply(this, arguments);
	});

	const block = {
		c: function create() {
			div1 = element("div");
			a = element("a");
			div0 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			create_component(textblock0.$$.fragment);
			t1 = space();
			span = element("span");
			create_component(textblock1.$$.fragment);
			t2 = space();
			create_component(iconbutton.$$.fragment);
			attr_dev(div0, "class", "title svelte-227xcv");
			add_location(div0, file, 80, 6, 1905);
			attr_dev(span, "class", "url svelte-227xcv");
			add_location(span, file, 88, 6, 2145);
			attr_dev(a, "class", "b-link svelte-227xcv");
			attr_dev(a, "href", a_href_value = /*bookmark*/ ctx[0].url);
			add_location(a, file, 79, 4, 1859);
			attr_dev(div1, "class", "item svelte-227xcv");
			add_location(div1, file, 78, 2, 1835);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, a);
			append_dev(a, div0);
			if (if_block) if_block.m(div0, null);
			append_dev(div0, t0);
			mount_component(textblock0, div0, null);
			append_dev(a, t1);
			append_dev(a, span);
			mount_component(textblock1, span, null);
			append_dev(div1, t2);
			mount_component(iconbutton, div1, null);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (/*bookmark*/ ctx[0].iconURL) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div0, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			const textblock0_changes = {};

			if (dirty & /*$$scope, bookmark*/ 16385) {
				textblock0_changes.$$scope = { dirty, ctx };
			}

			textblock0.$set(textblock0_changes);
			const textblock1_changes = {};

			if (dirty & /*$$scope, bookmark*/ 16385) {
				textblock1_changes.$$scope = { dirty, ctx };
			}

			textblock1.$set(textblock1_changes);

			if (!current || dirty & /*bookmark*/ 1 && a_href_value !== (a_href_value = /*bookmark*/ ctx[0].url)) {
				attr_dev(a, "href", a_href_value);
			}

			const iconbutton_changes = {};

			if (dirty & /*$$scope, tt*/ 16386) {
				iconbutton_changes.$$scope = { dirty, ctx };
			}

			iconbutton.$set(iconbutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock0.$$.fragment, local);
			transition_in(textblock1.$$.fragment, local);
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock0.$$.fragment, local);
			transition_out(textblock1.$$.fragment, local);
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block) if_block.d();
			destroy_component(textblock0);
			destroy_component(textblock1);
			destroy_component(iconbutton);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(78:0) <ContextMenu style=\\\"white-space: nowrap;\\\">",
		ctx
	});

	return block;
}

// (101:4) <MenuFlyoutItem on:click={() => window.nereid.tab.create(bookmark.url)}>
function create_default_slot_3(ctx) {
	let t_1_value = /*t*/ ctx[4]('menu.contextMenu.open.newTab') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(101:4) <MenuFlyoutItem on:click={() => window.nereid.tab.create(bookmark.url)}>",
		ctx
	});

	return block;
}

// (104:4) <MenuFlyoutItem on:click={() => window.nereid.tab.go(bookmark.url)}>
function create_default_slot_2(ctx) {
	let t_1_value = /*t*/ ctx[4]('menu.contextMenu.open.thisTab') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(104:4) <MenuFlyoutItem on:click={() => window.nereid.tab.go(bookmark.url)}>",
		ctx
	});

	return block;
}

// (108:4) <MenuFlyoutItem on:click={() => editDialog = true}>
function create_default_slot_1(ctx) {
	let t_1_value = /*tt*/ ctx[1]('bookmark.button-edit') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tt*/ 2 && t_1_value !== (t_1_value = /*tt*/ ctx[1]('bookmark.button-edit') + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(108:4) <MenuFlyoutItem on:click={() => editDialog = true}>",
		ctx
	});

	return block;
}

// (111:4) <MenuFlyoutItem on:click={del}>
function create_default_slot(ctx) {
	let t_1_value = /*tt*/ ctx[1]('bookmark.button-delete') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tt*/ 2 && t_1_value !== (t_1_value = /*tt*/ ctx[1]('bookmark.button-delete') + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(111:4) <MenuFlyoutItem on:click={del}>",
		ctx
	});

	return block;
}

// (100:2) <svelte:fragment slot="flyout">
function create_flyout_slot(ctx) {
	let menuflyoutitem0;
	let t0;
	let menuflyoutitem1;
	let t1;
	let menuflyoutdivider;
	let t2;
	let menuflyoutitem2;
	let t3;
	let menuflyoutitem3;
	let current;

	menuflyoutitem0 = new MenuFlyoutItem({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	menuflyoutitem0.$on("click", /*click_handler*/ ctx[8]);

	menuflyoutitem1 = new MenuFlyoutItem({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	menuflyoutitem1.$on("click", /*click_handler_1*/ ctx[9]);
	menuflyoutdivider = new MenuFlyoutDivider({ $$inline: true });

	menuflyoutitem2 = new MenuFlyoutItem({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	menuflyoutitem2.$on("click", /*click_handler_2*/ ctx[10]);

	menuflyoutitem3 = new MenuFlyoutItem({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	menuflyoutitem3.$on("click", function () {
		if (is_function(/*del*/ ctx[2])) /*del*/ ctx[2].apply(this, arguments);
	});

	const block = {
		c: function create() {
			create_component(menuflyoutitem0.$$.fragment);
			t0 = space();
			create_component(menuflyoutitem1.$$.fragment);
			t1 = space();
			create_component(menuflyoutdivider.$$.fragment);
			t2 = space();
			create_component(menuflyoutitem2.$$.fragment);
			t3 = space();
			create_component(menuflyoutitem3.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(menuflyoutitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(menuflyoutitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(menuflyoutdivider, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(menuflyoutitem2, target, anchor);
			insert_dev(target, t3, anchor);
			mount_component(menuflyoutitem3, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const menuflyoutitem0_changes = {};

			if (dirty & /*$$scope*/ 16384) {
				menuflyoutitem0_changes.$$scope = { dirty, ctx };
			}

			menuflyoutitem0.$set(menuflyoutitem0_changes);
			const menuflyoutitem1_changes = {};

			if (dirty & /*$$scope*/ 16384) {
				menuflyoutitem1_changes.$$scope = { dirty, ctx };
			}

			menuflyoutitem1.$set(menuflyoutitem1_changes);
			const menuflyoutitem2_changes = {};

			if (dirty & /*$$scope, tt*/ 16386) {
				menuflyoutitem2_changes.$$scope = { dirty, ctx };
			}

			menuflyoutitem2.$set(menuflyoutitem2_changes);
			const menuflyoutitem3_changes = {};

			if (dirty & /*$$scope, tt*/ 16386) {
				menuflyoutitem3_changes.$$scope = { dirty, ctx };
			}

			menuflyoutitem3.$set(menuflyoutitem3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(menuflyoutitem0.$$.fragment, local);
			transition_in(menuflyoutitem1.$$.fragment, local);
			transition_in(menuflyoutdivider.$$.fragment, local);
			transition_in(menuflyoutitem2.$$.fragment, local);
			transition_in(menuflyoutitem3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(menuflyoutitem0.$$.fragment, local);
			transition_out(menuflyoutitem1.$$.fragment, local);
			transition_out(menuflyoutdivider.$$.fragment, local);
			transition_out(menuflyoutitem2.$$.fragment, local);
			transition_out(menuflyoutitem3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(menuflyoutitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(menuflyoutitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(menuflyoutdivider, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(menuflyoutitem2, detaching);
			if (detaching) detach_dev(t3);
			destroy_component(menuflyoutitem3, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_flyout_slot.name,
		type: "slot",
		source: "(100:2) <svelte:fragment slot=\\\"flyout\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let editbookmark;
	let updating_open;
	let t_1;
	let contextmenu;
	let current;

	function editbookmark_open_binding(value) {
		/*editbookmark_open_binding*/ ctx[7](value);
	}

	let editbookmark_props = {
		tt: /*tt*/ ctx[1],
		buttonText: /*t*/ ctx[4]('common.done'),
		name: /*bookmark*/ ctx[0].name,
		url: /*bookmark*/ ctx[0].url
	};

	if (/*editDialog*/ ctx[3] !== void 0) {
		editbookmark_props.open = /*editDialog*/ ctx[3];
	}

	editbookmark = new EditBookmark({
			props: editbookmark_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(editbookmark, 'open', editbookmark_open_binding));
	editbookmark.$on("click", /*recieveEdit*/ ctx[5]);

	contextmenu = new ContextMenu({
			props: {
				style: "white-space: nowrap;",
				$$slots: {
					flyout: [create_flyout_slot],
					default: [create_default_slot_4]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(editbookmark.$$.fragment);
			t_1 = space();
			create_component(contextmenu.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(editbookmark, target, anchor);
			insert_dev(target, t_1, anchor);
			mount_component(contextmenu, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const editbookmark_changes = {};
			if (dirty & /*tt*/ 2) editbookmark_changes.tt = /*tt*/ ctx[1];
			if (dirty & /*bookmark*/ 1) editbookmark_changes.name = /*bookmark*/ ctx[0].name;
			if (dirty & /*bookmark*/ 1) editbookmark_changes.url = /*bookmark*/ ctx[0].url;

			if (!updating_open && dirty & /*editDialog*/ 8) {
				updating_open = true;
				editbookmark_changes.open = /*editDialog*/ ctx[3];
				add_flush_callback(() => updating_open = false);
			}

			editbookmark.$set(editbookmark_changes);
			const contextmenu_changes = {};

			if (dirty & /*$$scope, del, tt, editDialog, bookmark*/ 16399) {
				contextmenu_changes.$$scope = { dirty, ctx };
			}

			contextmenu.$set(contextmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(editbookmark.$$.fragment, local);
			transition_in(contextmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(editbookmark.$$.fragment, local);
			transition_out(contextmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(editbookmark, detaching);
			if (detaching) detach_dev(t_1);
			destroy_component(contextmenu, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Bookmark', slots, []);
	let { bookmark } = $$props;
	const { t } = window.nereid.i18n;
	let { tt } = $$props;
	let { del } = $$props;
	let { index } = $$props;
	let actionText = window.action.split('/')[1];

	let editIndex = (actionText?.startsWith('edit:'))
	? actionText.replace('edit:', '')
	: '';

	let editDialog = editIndex && Number(editIndex) == index && window.isFirstTime;
	console.log('edit', actionText, editIndex, index);

	if (actionText && !editIndex) {
		let num = Number(actionText);

		if (num == index) {
			
		} // TODO: scroll
	}

	const dispatch = createEventDispatcher();

	function recieveEdit({ detail }) {
		dispatch('edit', detail);
		$$invalidate(3, editDialog = false);
	}

	window.isFirstTime = false;
	const writable_props = ['bookmark', 'tt', 'del', 'index'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Bookmark> was created with unknown prop '${key}'`);
	});

	function editbookmark_open_binding(value) {
		editDialog = value;
		$$invalidate(3, editDialog);
	}

	const click_handler = () => window.nereid.tab.create(bookmark.url);
	const click_handler_1 = () => window.nereid.tab.go(bookmark.url);
	const click_handler_2 = () => $$invalidate(3, editDialog = true);

	$$self.$$set = $$props => {
		if ('bookmark' in $$props) $$invalidate(0, bookmark = $$props.bookmark);
		if ('tt' in $$props) $$invalidate(1, tt = $$props.tt);
		if ('del' in $$props) $$invalidate(2, del = $$props.del);
		if ('index' in $$props) $$invalidate(6, index = $$props.index);
	};

	$$self.$capture_state = () => ({
		ContextMenu,
		TextBlock,
		IconButton,
		MenuFlyoutItem,
		MenuFlyoutDivider,
		createEventDispatcher,
		Icons,
		EditBookmark,
		bookmark,
		t,
		tt,
		del,
		index,
		actionText,
		editIndex,
		editDialog,
		dispatch,
		recieveEdit
	});

	$$self.$inject_state = $$props => {
		if ('bookmark' in $$props) $$invalidate(0, bookmark = $$props.bookmark);
		if ('tt' in $$props) $$invalidate(1, tt = $$props.tt);
		if ('del' in $$props) $$invalidate(2, del = $$props.del);
		if ('index' in $$props) $$invalidate(6, index = $$props.index);
		if ('actionText' in $$props) actionText = $$props.actionText;
		if ('editIndex' in $$props) editIndex = $$props.editIndex;
		if ('editDialog' in $$props) $$invalidate(3, editDialog = $$props.editDialog);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		bookmark,
		tt,
		del,
		editDialog,
		t,
		recieveEdit,
		index,
		editbookmark_open_binding,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class Bookmark extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { bookmark: 0, tt: 1, del: 2, index: 6 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Bookmark",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*bookmark*/ ctx[0] === undefined && !('bookmark' in props)) {
			console_1.warn("<Bookmark> was created without expected prop 'bookmark'");
		}

		if (/*tt*/ ctx[1] === undefined && !('tt' in props)) {
			console_1.warn("<Bookmark> was created without expected prop 'tt'");
		}

		if (/*del*/ ctx[2] === undefined && !('del' in props)) {
			console_1.warn("<Bookmark> was created without expected prop 'del'");
		}

		if (/*index*/ ctx[6] === undefined && !('index' in props)) {
			console_1.warn("<Bookmark> was created without expected prop 'index'");
		}
	}

	get bookmark() {
		throw new Error("<Bookmark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set bookmark(value) {
		throw new Error("<Bookmark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tt() {
		throw new Error("<Bookmark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tt(value) {
		throw new Error("<Bookmark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get del() {
		throw new Error("<Bookmark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set del(value) {
		throw new Error("<Bookmark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get index() {
		throw new Error("<Bookmark>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set index(value) {
		throw new Error("<Bookmark>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Bookmark;