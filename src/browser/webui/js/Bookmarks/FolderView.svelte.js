/* FolderView.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_flush_callback,
	add_location,
	append_dev,
	append_styles,
	attr_dev,
	bind,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	empty,
	group_outros,
	handle_promise,
	init,
	insert_dev,
	mount_component,
	noop,
	safe_not_equal,
	set_data_dev,
	space,
	text,
	transition_in,
	transition_out,
	update_await_block_branch,
	validate_each_argument,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import {
	Button,
	Flyout,
	IconButton,
	ProgressRing,
	TextBlock,
	TextBox
} from "../modules/fluent-svelte/index.js";

import Bookmark from "./Bookmark.svelte.js";
import * as Icons from "../icons.js";
import EditBookmark from "./EditBookmark.svelte.js";
const file = "FolderView.svelte";

function add_css(target) {
	append_styles(target, "svelte-bma0bc", ".title.svelte-bma0bc{margin-bottom:20px;display:flex;justify-content:space-between;align-items:center}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9sZGVyVmlldy5zdmVsdGUiLCJzb3VyY2VzIjpbIkZvbGRlclZpZXcuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzdHlsZT5cclxuICAudGl0bGUge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIH1cclxuPC9zdHlsZT5cclxuPHNjcmlwdD5cclxuICBpbXBvcnQgeyBCdXR0b24sIEZseW91dCwgSWNvbkJ1dHRvbiwgUHJvZ3Jlc3NSaW5nLCBUZXh0QmxvY2ssIFRleHRCb3ggfSBmcm9tIFwiZmx1ZW50LXN2ZWx0ZVwiO1xyXG4gIGltcG9ydCBCb29rbWFyayBmcm9tIFwiLi9Cb29rbWFyay5zdmVsdGVcIjtcclxuICBpbXBvcnQgKiBhcyBJY29ucyBmcm9tIFwiLi4vaWNvbnMuanNcIlxyXG4gIGltcG9ydCBFZGl0Qm9va21hcmsgZnJvbSBcIi4vRWRpdEJvb2ttYXJrLnN2ZWx0ZVwiO1xyXG5cclxuICBleHBvcnQgbGV0IHNlbGVjdGVkRm9sZGVyID0gJyc7XHJcbiAgY29uc3QgeyB0IH0gPSB3aW5kb3cubmVyZWlkLmkxOG5cclxuICBleHBvcnQgbGV0IHR0O1xyXG4gIGV4cG9ydCBsZXQgbG9jYWxpemVkTmFtZTtcclxuICBleHBvcnQgbGV0IHVwZGF0ZTtcclxuICBleHBvcnQgbGV0IGlzSW5Gb2xkZXJzO1xyXG5cclxuICBsZXQgYm9va21hcmtzID0gW107XHJcblxyXG4gIGxldCBlZGl0Rmx5b3V0ID0gZmFsc2U7XHJcbiAgbGV0IGRlbGV0ZUZseW91dCA9IGZhbHNlO1xyXG4gIGxldCBhZGREaWFsb2cgPSBmYWxzZTtcclxuXHJcbiAgJDogcHJvbWlzZSA9IG5ldyBQcm9taXNlKGFzeW5jIHkgPT4ge1xyXG4gICAgYm9va21hcmtzID0gYXdhaXQgd2luZG93Lm5lcmVpZC51c2VyZGF0YS5ib29rbWFya3MuZ2V0Rm9sZGVyKHsgZm9sZGVyOiBzZWxlY3RlZEZvbGRlciB9KTtcclxuICAgIHkoKTtcclxuICB9KVxyXG5cclxuICBmdW5jdGlvbiBkZWxGKGkpIHtcclxuICAgIHJldHVybiBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGJvb2ttYXJrcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgIGF3YWl0IHdpbmRvdy5uZXJlaWQudXNlcmRhdGEuYm9va21hcmtzLnNldEZvbGRlcih7IGZvbGRlcjogc2VsZWN0ZWRGb2xkZXIsIHZhbHVlOiBib29rbWFya3MgfSk7XHJcbiAgICAgIGJvb2ttYXJrcyA9IGJvb2ttYXJrcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUZvbGRlcigpIHtcclxuICAgIGF3YWl0IHdpbmRvdy5uZXJlaWQudXNlcmRhdGEuYm9va21hcmtzLmRlbEZvbGRlcih7IGZvbGRlcjogc2VsZWN0ZWRGb2xkZXIgfSk7XHJcbiAgICB1cGRhdGUoKVxyXG4gIH1cclxuXHJcbiAgJDogbmV3Rm9sZGVyTmFtZSA9IHNlbGVjdGVkRm9sZGVyO1xyXG4gIGFzeW5jIGZ1bmN0aW9uIHJlbmFtZSgpIHtcclxuICAgIGlmIChuZXdGb2xkZXJOYW1lID09ICcnKSByZXR1cm4gYWxlcnQodHQoJ2FkZEZvbGRlci5lcnJvci1lbXB0eScpKTtcclxuICAgIGlmIChuZXdGb2xkZXJOYW1lLnN0YXJ0c1dpdGgoJ0AnKSkgcmV0dXJuIGFsZXJ0KHR0KCdhZGRGb2xkZXIuZXJyb3ItaWxsZWdhbE5hbWUnKSk7XHJcbiAgICBpZiAoaXNJbkZvbGRlcnMobmV3Rm9sZGVyTmFtZSkpIHJldHVybiBhbGVydCh0dCgnYWRkRm9sZGVyLmVycm9yLWFscmVhZHlFeGlzdHMnKSk7XHJcblxyXG4gICAgYXdhaXQgd2luZG93Lm5lcmVpZC51c2VyZGF0YS5ib29rbWFya3MucmVuRm9sZGVyKHsgZm9sZGVyOiBzZWxlY3RlZEZvbGRlciwgbmFtZTogbmV3Rm9sZGVyTmFtZSB9KTtcclxuICAgIGF3YWl0IHVwZGF0ZSgpXHJcbiAgICBzZWxlY3RlZEZvbGRlciA9IG5ld0ZvbGRlck5hbWU7XHJcbiAgfVxyXG5cclxuICBhc3luYyBmdW5jdGlvbiBhZGROZXcoeyBkZXRhaWw6IHsgbmFtZSwgdXJsIH0gfSkge1xyXG4gICAgYm9va21hcmtzLnVuc2hpZnQoeyBuYW1lLCB1cmwgfSk7XHJcbiAgICBhd2FpdCB3aW5kb3cubmVyZWlkLnVzZXJkYXRhLmJvb2ttYXJrcy5zZXRGb2xkZXIoeyBmb2xkZXI6IHNlbGVjdGVkRm9sZGVyLCB2YWx1ZTogYm9va21hcmtzIH0pO1xyXG4gICAgYm9va21hcmtzID0gYm9va21hcmtzO1xyXG4gICAgYWRkRGlhbG9nID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBlZGl0RihpKSB7XHJcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gKHsgZGV0YWlsOiB7IG5hbWUsIHVybCB9IH0pIHtcclxuICAgICAgYm9va21hcmtzW2ldLm5hbWUgPSBuYW1lO1xyXG4gICAgICBib29rbWFya3NbaV0udXJsID0gdXJsO1xyXG4gICAgICBhd2FpdCB3aW5kb3cubmVyZWlkLnVzZXJkYXRhLmJvb2ttYXJrcy5zZXRGb2xkZXIoeyBmb2xkZXI6IHNlbGVjdGVkRm9sZGVyLCB2YWx1ZTogYm9va21hcmtzIH0pO1xyXG4gICAgICBib29rbWFya3MgPSBib29rbWFya3M7XHJcbiAgICB9XHJcbiAgfVxyXG48L3NjcmlwdD5cclxuXHJcbnsjYXdhaXQgcHJvbWlzZX1cclxuICA8UHJvZ3Jlc3NSaW5nIC8+XHJcbns6dGhlbiBffVxyXG4gIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPlxyXG4gICAgPFRleHRCbG9jayB2YXJpYW50PVwidGl0bGVcIj57bG9jYWxpemVkTmFtZX08L1RleHRCbG9jaz5cclxuICAgIDxkaXYgY2xhc3M9XCJhY3Rpb25zXCI+XHJcbiAgICAgIHsjaWYgIXNlbGVjdGVkRm9sZGVyLnN0YXJ0c1dpdGgoJ0AnKX1cclxuICAgICAgICA8Rmx5b3V0IHBsYWNlbWVudD1cImJvdHRvbVwiIGJpbmQ6b3Blbj17ZWRpdEZseW91dH0+XHJcbiAgICAgICAgICA8SWNvbkJ1dHRvbj5cclxuICAgICAgICAgICAgPEljb25zLkVkaXQgdGl0bGU9e3R0KCdmb2xkZXIucmVuYW1lJyl9IC8+XHJcbiAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgICA8c3ZlbHRlOmZyYWdtZW50IHNsb3Q9XCJmbHlvdXRcIj5cclxuICAgICAgICAgICAgPFRleHRCb3ggYmluZDp2YWx1ZT17bmV3Rm9sZGVyTmFtZX0gLz5cclxuICAgICAgICAgICAgPGJyPlxyXG4gICAgICAgICAgICA8QnV0dG9uIG9uOmNsaWNrPXtyZW5hbWV9Pnt0KCdjb21tb24ub2snKX08L0J1dHRvbj5cclxuICAgICAgICAgIDwvc3ZlbHRlOmZyYWdtZW50PlxyXG4gICAgICAgIDwvRmx5b3V0PlxyXG4gICAgICAgIDxGbHlvdXQgcGxhY2VtZW50PVwiYm90dG9tXCIgYmluZDpvcGVuPXtkZWxldGVGbHlvdXR9PlxyXG4gICAgICAgICAgPEljb25CdXR0b24+XHJcbiAgICAgICAgICAgIDxJY29ucy5EZWxldGUgdGl0bGU9e3R0KCdmb2xkZXIuZGVsZXRlJyl9IC8+XHJcbiAgICAgICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgICAgICA8c3ZlbHRlOmZyYWdtZW50IHNsb3Q9XCJmbHlvdXRcIj5cclxuICAgICAgICAgICAgPFRleHRCbG9jayB2YXJpYW50PVwiYm9keVN0cm9uZ1wiPnt0dCgnZm9sZGVyLmNvbmZpcm1EZWxldGUnKX08L1RleHRCbG9jaz48YnI+PGJyPlxyXG4gICAgICAgICAgICA8QnV0dG9uIG9uOmNsaWNrPXsoKSA9PiBkZWxldGVGbHlvdXQgPSBmYWxzZX0+XHJcbiAgICAgICAgICAgICAge3QoJ2NvbW1vbi5jYW5jZWwnKX1cclxuICAgICAgICAgICAgPC9CdXR0b24+XHJcbiAgICAgICAgICAgIDxCdXR0b24gb246Y2xpY2s9e2RlbGV0ZUZvbGRlcn0gdmFyaWFudD1cImFjY2VudFwiPlxyXG4gICAgICAgICAgICAgIHt0dCgnZm9sZGVyLmJ1dHRvbi1jb25maXJtJyl9XHJcbiAgICAgICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICAgICAgPC9zdmVsdGU6ZnJhZ21lbnQ+XHJcbiAgICAgICAgPC9GbHlvdXQ+XHJcbiAgICAgIHsvaWZ9XHJcbiAgICAgIFxyXG4gICAgICA8SWNvbkJ1dHRvbiBvbjpjbGljaz17KCkgPT4gYWRkRGlhbG9nID0gdHJ1ZX0+XHJcbiAgICAgICAgPEljb25zLkFkZCB0aXRsZT17dHQoJ2J1dHRvbi1hZGRCb29rbWFyaycpfSAvPlxyXG4gICAgICA8L0ljb25CdXR0b24+XHJcbiAgICAgIDxFZGl0Qm9va21hcmsgYmluZDpvcGVuPXthZGREaWFsb2d9IG9uOmNsaWNrPXthZGROZXd9IHt0dH0gYnV0dG9uVGV4dD17dHQoJ2Jvb2ttYXJrLmJ1dHRvbi1jcmVhdGUnKX0gLz5cclxuICAgIDwvZGl2PlxyXG4gIDwvZGl2PlxyXG4gIHsjZWFjaCBib29rbWFya3MgYXMgYm9va21hcmssIGl9XHJcbiAgICA8Qm9va21hcmsge2Jvb2ttYXJrfSB7dHR9IGRlbD17ZGVsRihpKX0gb246ZWRpdD17ZWRpdEYoaSl9IGluZGV4PXtpfSAvPlxyXG4gIHsvZWFjaH1cclxuey9hd2FpdH0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0UsTUFBTSxjQUFDLENBQUMsQUFDTixhQUFhLENBQUUsSUFBSSxDQUNuQixPQUFPLENBQUUsSUFBSSxDQUNiLGVBQWUsQ0FBRSxhQUFhLENBQzlCLFdBQVcsQ0FBRSxNQUFNLEFBQ3JCLENBQUMifQ== */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[24] = list[i];
	child_ctx[26] = i;
	return child_ctx;
}

// (1:0) <style>    .title {      margin-bottom: 20px;      display: flex;      justify-content: space-between;      align-items: center;    }
function create_catch_block(ctx) {
	const block = {
		c: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(1:0) <style>    .title {      margin-bottom: 20px;      display: flex;      justify-content: space-between;      align-items: center;    }",
		ctx
	});

	return block;
}

// (76:0) {:then _}
function create_then_block(ctx) {
	let div1;
	let textblock;
	let t0;
	let div0;
	let show_if = !/*selectedFolder*/ ctx[0].startsWith('@');
	let t1;
	let iconbutton;
	let t2;
	let editbookmark;
	let updating_open;
	let t3;
	let each_1_anchor;
	let current;

	textblock = new TextBlock({
			props: {
				variant: "title",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let if_block = show_if && create_if_block(ctx);

	iconbutton = new IconButton({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton.$on("click", /*click_handler_1*/ ctx[21]);

	function editbookmark_open_binding(value) {
		/*editbookmark_open_binding*/ ctx[22](value);
	}

	let editbookmark_props = {
		tt: /*tt*/ ctx[1],
		buttonText: /*tt*/ ctx[1]('bookmark.button-create')
	};

	if (/*addDialog*/ ctx[6] !== void 0) {
		editbookmark_props.open = /*addDialog*/ ctx[6];
	}

	editbookmark = new EditBookmark({
			props: editbookmark_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(editbookmark, 'open', editbookmark_open_binding));
	editbookmark.$on("click", /*addNew*/ ctx[13]);
	let each_value = /*bookmarks*/ ctx[3];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div1 = element("div");
			create_component(textblock.$$.fragment);
			t0 = space();
			div0 = element("div");
			if (if_block) if_block.c();
			t1 = space();
			create_component(iconbutton.$$.fragment);
			t2 = space();
			create_component(editbookmark.$$.fragment);
			t3 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			attr_dev(div0, "class", "actions");
			add_location(div0, file, 78, 4, 2367);
			attr_dev(div1, "class", "title svelte-bma0bc");
			add_location(div1, file, 76, 2, 2282);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			mount_component(textblock, div1, null);
			append_dev(div1, t0);
			append_dev(div1, div0);
			if (if_block) if_block.m(div0, null);
			append_dev(div0, t1);
			mount_component(iconbutton, div0, null);
			append_dev(div0, t2);
			mount_component(editbookmark, div0, null);
			insert_dev(target, t3, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock_changes = {};

			if (dirty & /*$$scope, localizedName*/ 134217732) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
			if (dirty & /*selectedFolder*/ 1) show_if = !/*selectedFolder*/ ctx[0].startsWith('@');

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*selectedFolder*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div0, t1);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const iconbutton_changes = {};

			if (dirty & /*$$scope, tt*/ 134217730) {
				iconbutton_changes.$$scope = { dirty, ctx };
			}

			iconbutton.$set(iconbutton_changes);
			const editbookmark_changes = {};
			if (dirty & /*tt*/ 2) editbookmark_changes.tt = /*tt*/ ctx[1];
			if (dirty & /*tt*/ 2) editbookmark_changes.buttonText = /*tt*/ ctx[1]('bookmark.button-create');

			if (!updating_open && dirty & /*addDialog*/ 64) {
				updating_open = true;
				editbookmark_changes.open = /*addDialog*/ ctx[6];
				add_flush_callback(() => updating_open = false);
			}

			editbookmark.$set(editbookmark_changes);

			if (dirty & /*bookmarks, tt, delF, editF*/ 17418) {
				each_value = /*bookmarks*/ ctx[3];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			transition_in(if_block);
			transition_in(iconbutton.$$.fragment, local);
			transition_in(editbookmark.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			transition_out(if_block);
			transition_out(iconbutton.$$.fragment, local);
			transition_out(editbookmark.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(textblock);
			if (if_block) if_block.d();
			destroy_component(iconbutton);
			destroy_component(editbookmark);
			if (detaching) detach_dev(t3);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(76:0) {:then _}",
		ctx
	});

	return block;
}

// (78:4) <TextBlock variant="title">
function create_default_slot_9(ctx) {
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(/*localizedName*/ ctx[2]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*localizedName*/ 4) set_data_dev(t_1, /*localizedName*/ ctx[2]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(78:4) <TextBlock variant=\\\"title\\\">",
		ctx
	});

	return block;
}

// (80:6) {#if !selectedFolder.startsWith('@')}
function create_if_block(ctx) {
	let flyout0;
	let updating_open;
	let t_1;
	let flyout1;
	let updating_open_1;
	let current;

	function flyout0_open_binding(value) {
		/*flyout0_open_binding*/ ctx[18](value);
	}

	let flyout0_props = {
		placement: "bottom",
		$$slots: {
			flyout: [create_flyout_slot_1],
			default: [create_default_slot_7]
		},
		$$scope: { ctx }
	};

	if (/*editFlyout*/ ctx[4] !== void 0) {
		flyout0_props.open = /*editFlyout*/ ctx[4];
	}

	flyout0 = new Flyout({ props: flyout0_props, $$inline: true });
	binding_callbacks.push(() => bind(flyout0, 'open', flyout0_open_binding));

	function flyout1_open_binding(value) {
		/*flyout1_open_binding*/ ctx[20](value);
	}

	let flyout1_props = {
		placement: "bottom",
		$$slots: {
			flyout: [create_flyout_slot],
			default: [create_default_slot_4]
		},
		$$scope: { ctx }
	};

	if (/*deleteFlyout*/ ctx[5] !== void 0) {
		flyout1_props.open = /*deleteFlyout*/ ctx[5];
	}

	flyout1 = new Flyout({ props: flyout1_props, $$inline: true });
	binding_callbacks.push(() => bind(flyout1, 'open', flyout1_open_binding));

	const block = {
		c: function create() {
			create_component(flyout0.$$.fragment);
			t_1 = space();
			create_component(flyout1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(flyout0, target, anchor);
			insert_dev(target, t_1, anchor);
			mount_component(flyout1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const flyout0_changes = {};

			if (dirty & /*$$scope, newFolderName, tt*/ 134217858) {
				flyout0_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open && dirty & /*editFlyout*/ 16) {
				updating_open = true;
				flyout0_changes.open = /*editFlyout*/ ctx[4];
				add_flush_callback(() => updating_open = false);
			}

			flyout0.$set(flyout0_changes);
			const flyout1_changes = {};

			if (dirty & /*$$scope, tt, deleteFlyout*/ 134217762) {
				flyout1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open_1 && dirty & /*deleteFlyout*/ 32) {
				updating_open_1 = true;
				flyout1_changes.open = /*deleteFlyout*/ ctx[5];
				add_flush_callback(() => updating_open_1 = false);
			}

			flyout1.$set(flyout1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(flyout0.$$.fragment, local);
			transition_in(flyout1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(flyout0.$$.fragment, local);
			transition_out(flyout1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(flyout0, detaching);
			if (detaching) detach_dev(t_1);
			destroy_component(flyout1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(80:6) {#if !selectedFolder.startsWith('@')}",
		ctx
	});

	return block;
}

// (82:10) <IconButton>
function create_default_slot_8(ctx) {
	let icons_edit;
	let current;

	icons_edit = new Icons.Edit({
			props: { title: /*tt*/ ctx[1]('folder.rename') },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icons_edit.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(icons_edit, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icons_edit_changes = {};
			if (dirty & /*tt*/ 2) icons_edit_changes.title = /*tt*/ ctx[1]('folder.rename');
			icons_edit.$set(icons_edit_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icons_edit.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icons_edit.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icons_edit, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(82:10) <IconButton>",
		ctx
	});

	return block;
}

// (81:8) <Flyout placement="bottom" bind:open={editFlyout}>
function create_default_slot_7(ctx) {
	let iconbutton;
	let current;

	iconbutton = new IconButton({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(iconbutton.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton_changes = {};

			if (dirty & /*$$scope, tt*/ 134217730) {
				iconbutton_changes.$$scope = { dirty, ctx };
			}

			iconbutton.$set(iconbutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(81:8) <Flyout placement=\\\"bottom\\\" bind:open={editFlyout}>",
		ctx
	});

	return block;
}

// (88:12) <Button on:click={rename}>
function create_default_slot_6(ctx) {
	let t_1_value = /*t*/ ctx[9]('common.ok') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(88:12) <Button on:click={rename}>",
		ctx
	});

	return block;
}

// (85:10) <svelte:fragment slot="flyout">
function create_flyout_slot_1(ctx) {
	let textbox;
	let updating_value;
	let t0;
	let br;
	let t1;
	let button;
	let current;

	function textbox_value_binding(value) {
		/*textbox_value_binding*/ ctx[17](value);
	}

	let textbox_props = {};

	if (/*newFolderName*/ ctx[7] !== void 0) {
		textbox_props.value = /*newFolderName*/ ctx[7];
	}

	textbox = new TextBox({ props: textbox_props, $$inline: true });
	binding_callbacks.push(() => bind(textbox, 'value', textbox_value_binding));

	button = new Button({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*rename*/ ctx[12]);

	const block = {
		c: function create() {
			create_component(textbox.$$.fragment);
			t0 = space();
			br = element("br");
			t1 = space();
			create_component(button.$$.fragment);
			add_location(br, file, 86, 12, 2707);
		},
		m: function mount(target, anchor) {
			mount_component(textbox, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, br, anchor);
			insert_dev(target, t1, anchor);
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textbox_changes = {};

			if (!updating_value && dirty & /*newFolderName*/ 128) {
				updating_value = true;
				textbox_changes.value = /*newFolderName*/ ctx[7];
				add_flush_callback(() => updating_value = false);
			}

			textbox.$set(textbox_changes);
			const button_changes = {};

			if (dirty & /*$$scope*/ 134217728) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textbox.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textbox.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(textbox, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br);
			if (detaching) detach_dev(t1);
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_flyout_slot_1.name,
		type: "slot",
		source: "(85:10) <svelte:fragment slot=\\\"flyout\\\">",
		ctx
	});

	return block;
}

// (92:10) <IconButton>
function create_default_slot_5(ctx) {
	let icons_delete;
	let current;

	icons_delete = new Icons.Delete({
			props: { title: /*tt*/ ctx[1]('folder.delete') },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icons_delete.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(icons_delete, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icons_delete_changes = {};
			if (dirty & /*tt*/ 2) icons_delete_changes.title = /*tt*/ ctx[1]('folder.delete');
			icons_delete.$set(icons_delete_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icons_delete.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icons_delete.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icons_delete, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(92:10) <IconButton>",
		ctx
	});

	return block;
}

// (91:8) <Flyout placement="bottom" bind:open={deleteFlyout}>
function create_default_slot_4(ctx) {
	let iconbutton;
	let current;

	iconbutton = new IconButton({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(iconbutton.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton_changes = {};

			if (dirty & /*$$scope, tt*/ 134217730) {
				iconbutton_changes.$$scope = { dirty, ctx };
			}

			iconbutton.$set(iconbutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(91:8) <Flyout placement=\\\"bottom\\\" bind:open={deleteFlyout}>",
		ctx
	});

	return block;
}

// (96:12) <TextBlock variant="bodyStrong">
function create_default_slot_3(ctx) {
	let t_1_value = /*tt*/ ctx[1]('folder.confirmDelete') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tt*/ 2 && t_1_value !== (t_1_value = /*tt*/ ctx[1]('folder.confirmDelete') + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(96:12) <TextBlock variant=\\\"bodyStrong\\\">",
		ctx
	});

	return block;
}

// (97:12) <Button on:click={() => deleteFlyout = false}>
function create_default_slot_2(ctx) {
	let t_1_value = /*t*/ ctx[9]('common.cancel') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(97:12) <Button on:click={() => deleteFlyout = false}>",
		ctx
	});

	return block;
}

// (100:12) <Button on:click={deleteFolder} variant="accent">
function create_default_slot_1(ctx) {
	let t_1_value = /*tt*/ ctx[1]('folder.button-confirm') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tt*/ 2 && t_1_value !== (t_1_value = /*tt*/ ctx[1]('folder.button-confirm') + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(100:12) <Button on:click={deleteFolder} variant=\\\"accent\\\">",
		ctx
	});

	return block;
}

// (95:10) <svelte:fragment slot="flyout">
function create_flyout_slot(ctx) {
	let textblock;
	let br0;
	let br1;
	let t0;
	let button0;
	let t1;
	let button1;
	let current;

	textblock = new TextBlock({
			props: {
				variant: "bodyStrong",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0 = new Button({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0.$on("click", /*click_handler*/ ctx[19]);

	button1 = new Button({
			props: {
				variant: "accent",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1.$on("click", /*deleteFolder*/ ctx[11]);

	const block = {
		c: function create() {
			create_component(textblock.$$.fragment);
			br0 = element("br");
			br1 = element("br");
			t0 = space();
			create_component(button0.$$.fragment);
			t1 = space();
			create_component(button1.$$.fragment);
			add_location(br0, file, 95, 84, 3123);
			add_location(br1, file, 95, 88, 3127);
		},
		m: function mount(target, anchor) {
			mount_component(textblock, target, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t0, anchor);
			mount_component(button0, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(button1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock_changes = {};

			if (dirty & /*$$scope, tt*/ 134217730) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
			const button0_changes = {};

			if (dirty & /*$$scope*/ 134217728) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope, tt*/ 134217730) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(textblock, detaching);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t0);
			destroy_component(button0, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(button1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_flyout_slot.name,
		type: "slot",
		source: "(95:10) <svelte:fragment slot=\\\"flyout\\\">",
		ctx
	});

	return block;
}

// (107:6) <IconButton on:click={() => addDialog = true}>
function create_default_slot(ctx) {
	let icons_add;
	let current;

	icons_add = new Icons.Add({
			props: {
				title: /*tt*/ ctx[1]('button-addBookmark')
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icons_add.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(icons_add, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const icons_add_changes = {};
			if (dirty & /*tt*/ 2) icons_add_changes.title = /*tt*/ ctx[1]('button-addBookmark');
			icons_add.$set(icons_add_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icons_add.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icons_add.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icons_add, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(107:6) <IconButton on:click={() => addDialog = true}>",
		ctx
	});

	return block;
}

// (113:2) {#each bookmarks as bookmark, i}
function create_each_block(ctx) {
	let bookmark;
	let current;

	bookmark = new Bookmark({
			props: {
				bookmark: /*bookmark*/ ctx[24],
				tt: /*tt*/ ctx[1],
				del: /*delF*/ ctx[10](/*i*/ ctx[26]),
				index: /*i*/ ctx[26]
			},
			$$inline: true
		});

	bookmark.$on("edit", /*editF*/ ctx[14](/*i*/ ctx[26]));

	const block = {
		c: function create() {
			create_component(bookmark.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(bookmark, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const bookmark_changes = {};
			if (dirty & /*bookmarks*/ 8) bookmark_changes.bookmark = /*bookmark*/ ctx[24];
			if (dirty & /*tt*/ 2) bookmark_changes.tt = /*tt*/ ctx[1];
			bookmark.$set(bookmark_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(bookmark.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(bookmark.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(bookmark, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(113:2) {#each bookmarks as bookmark, i}",
		ctx
	});

	return block;
}

// (74:16)     <ProgressRing />  {:then _}
function create_pending_block(ctx) {
	let progressring;
	let current;
	progressring = new ProgressRing({ $$inline: true });

	const block = {
		c: function create() {
			create_component(progressring.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(progressring, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(progressring.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progressring.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(progressring, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(74:16)     <ProgressRing />  {:then _}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let await_block_anchor;
	let promise_1;
	let current;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: false,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 23,
		blocks: [,,,]
	};

	handle_promise(promise_1 = /*promise*/ ctx[8], info);

	const block = {
		c: function create() {
			await_block_anchor = empty();
			info.block.c();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, await_block_anchor, anchor);
			info.block.m(target, info.anchor = anchor);
			info.mount = () => await_block_anchor.parentNode;
			info.anchor = await_block_anchor;
			current = true;
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty & /*promise*/ 256 && promise_1 !== (promise_1 = /*promise*/ ctx[8]) && handle_promise(promise_1, info)) {
				
			} else {
				update_await_block_branch(info, ctx, dirty);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(info.block);
			current = true;
		},
		o: function outro(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(await_block_anchor);
			info.block.d(detaching);
			info.token = null;
			info = null;
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let promise;
	let newFolderName;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('FolderView', slots, []);
	let { selectedFolder = '' } = $$props;
	const { t } = window.nereid.i18n;
	let { tt } = $$props;
	let { localizedName } = $$props;
	let { update } = $$props;
	let { isInFolders } = $$props;
	let bookmarks = [];
	let editFlyout = false;
	let deleteFlyout = false;
	let addDialog = false;

	function delF(i) {
		return async () => {
			bookmarks.splice(i, 1);
			await window.nereid.userdata.bookmarks.setFolder({ folder: selectedFolder, value: bookmarks });
			($$invalidate(3, bookmarks), $$invalidate(0, selectedFolder));
		};
	}

	async function deleteFolder() {
		await window.nereid.userdata.bookmarks.delFolder({ folder: selectedFolder });
		update();
	}

	async function rename() {
		if (newFolderName == '') return alert(tt('addFolder.error-empty'));
		if (newFolderName.startsWith('@')) return alert(tt('addFolder.error-illegalName'));
		if (isInFolders(newFolderName)) return alert(tt('addFolder.error-alreadyExists'));

		await window.nereid.userdata.bookmarks.renFolder({
			folder: selectedFolder,
			name: newFolderName
		});

		await update();
		$$invalidate(0, selectedFolder = newFolderName);
	}

	async function addNew({ detail: { name, url } }) {
		bookmarks.unshift({ name, url });
		await window.nereid.userdata.bookmarks.setFolder({ folder: selectedFolder, value: bookmarks });
		($$invalidate(3, bookmarks), $$invalidate(0, selectedFolder));
		$$invalidate(6, addDialog = false);
	}

	function editF(i) {
		return async function ({ detail: { name, url } }) {
			$$invalidate(3, bookmarks[i].name = name, bookmarks);
			$$invalidate(3, bookmarks[i].url = url, bookmarks);
			await window.nereid.userdata.bookmarks.setFolder({ folder: selectedFolder, value: bookmarks });
			($$invalidate(3, bookmarks), $$invalidate(0, selectedFolder));
		};
	}

	const writable_props = ['selectedFolder', 'tt', 'localizedName', 'update', 'isInFolders'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<FolderView> was created with unknown prop '${key}'`);
	});

	function textbox_value_binding(value) {
		newFolderName = value;
		($$invalidate(7, newFolderName), $$invalidate(0, selectedFolder));
	}

	function flyout0_open_binding(value) {
		editFlyout = value;
		$$invalidate(4, editFlyout);
	}

	const click_handler = () => $$invalidate(5, deleteFlyout = false);

	function flyout1_open_binding(value) {
		deleteFlyout = value;
		$$invalidate(5, deleteFlyout);
	}

	const click_handler_1 = () => $$invalidate(6, addDialog = true);

	function editbookmark_open_binding(value) {
		addDialog = value;
		$$invalidate(6, addDialog);
	}

	$$self.$$set = $$props => {
		if ('selectedFolder' in $$props) $$invalidate(0, selectedFolder = $$props.selectedFolder);
		if ('tt' in $$props) $$invalidate(1, tt = $$props.tt);
		if ('localizedName' in $$props) $$invalidate(2, localizedName = $$props.localizedName);
		if ('update' in $$props) $$invalidate(15, update = $$props.update);
		if ('isInFolders' in $$props) $$invalidate(16, isInFolders = $$props.isInFolders);
	};

	$$self.$capture_state = () => ({
		Button,
		Flyout,
		IconButton,
		ProgressRing,
		TextBlock,
		TextBox,
		Bookmark,
		Icons,
		EditBookmark,
		selectedFolder,
		t,
		tt,
		localizedName,
		update,
		isInFolders,
		bookmarks,
		editFlyout,
		deleteFlyout,
		addDialog,
		delF,
		deleteFolder,
		rename,
		addNew,
		editF,
		newFolderName,
		promise
	});

	$$self.$inject_state = $$props => {
		if ('selectedFolder' in $$props) $$invalidate(0, selectedFolder = $$props.selectedFolder);
		if ('tt' in $$props) $$invalidate(1, tt = $$props.tt);
		if ('localizedName' in $$props) $$invalidate(2, localizedName = $$props.localizedName);
		if ('update' in $$props) $$invalidate(15, update = $$props.update);
		if ('isInFolders' in $$props) $$invalidate(16, isInFolders = $$props.isInFolders);
		if ('bookmarks' in $$props) $$invalidate(3, bookmarks = $$props.bookmarks);
		if ('editFlyout' in $$props) $$invalidate(4, editFlyout = $$props.editFlyout);
		if ('deleteFlyout' in $$props) $$invalidate(5, deleteFlyout = $$props.deleteFlyout);
		if ('addDialog' in $$props) $$invalidate(6, addDialog = $$props.addDialog);
		if ('newFolderName' in $$props) $$invalidate(7, newFolderName = $$props.newFolderName);
		if ('promise' in $$props) $$invalidate(8, promise = $$props.promise);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selectedFolder*/ 1) {
			$: $$invalidate(8, promise = new Promise(async y => {
					$$invalidate(3, bookmarks = await window.nereid.userdata.bookmarks.getFolder({ folder: selectedFolder }));
					y();
				}));
		}

		if ($$self.$$.dirty & /*selectedFolder*/ 1) {
			$: $$invalidate(7, newFolderName = selectedFolder);
		}
	};

	return [
		selectedFolder,
		tt,
		localizedName,
		bookmarks,
		editFlyout,
		deleteFlyout,
		addDialog,
		newFolderName,
		promise,
		t,
		delF,
		deleteFolder,
		rename,
		addNew,
		editF,
		update,
		isInFolders,
		textbox_value_binding,
		flyout0_open_binding,
		click_handler,
		flyout1_open_binding,
		click_handler_1,
		editbookmark_open_binding
	];
}

class FolderView extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				selectedFolder: 0,
				tt: 1,
				localizedName: 2,
				update: 15,
				isInFolders: 16
			},
			add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "FolderView",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*tt*/ ctx[1] === undefined && !('tt' in props)) {
			console.warn("<FolderView> was created without expected prop 'tt'");
		}

		if (/*localizedName*/ ctx[2] === undefined && !('localizedName' in props)) {
			console.warn("<FolderView> was created without expected prop 'localizedName'");
		}

		if (/*update*/ ctx[15] === undefined && !('update' in props)) {
			console.warn("<FolderView> was created without expected prop 'update'");
		}

		if (/*isInFolders*/ ctx[16] === undefined && !('isInFolders' in props)) {
			console.warn("<FolderView> was created without expected prop 'isInFolders'");
		}
	}

	get selectedFolder() {
		throw new Error("<FolderView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selectedFolder(value) {
		throw new Error("<FolderView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tt() {
		throw new Error("<FolderView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tt(value) {
		throw new Error("<FolderView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get localizedName() {
		throw new Error("<FolderView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set localizedName(value) {
		throw new Error("<FolderView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get update() {
		throw new Error("<FolderView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set update(value) {
		throw new Error("<FolderView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isInFolders() {
		throw new Error("<FolderView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isInFolders(value) {
		throw new Error("<FolderView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default FolderView;