/* ByDate.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	globals,
	group_outros,
	init,
	insert_dev,
	mount_component,
	safe_not_equal,
	set_data_dev,
	space,
	text,
	transition_in,
	transition_out,
	validate_each_argument,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

const { Object: Object_1 } = globals;
import { TextBlock } from "../modules/fluent-svelte/index.js";
import BySession from "./BySession.svelte.js";
const file = "ByDate.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (26:0) <TextBlock variant="title">
function create_default_slot(ctx) {
	let t_value = /*fmt*/ ctx[2].format(/*date*/ ctx[0]) + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*date*/ 1 && t_value !== (t_value = /*fmt*/ ctx[2].format(/*date*/ ctx[0]) + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(26:0) <TextBlock variant=\\\"title\\\">",
		ctx
	});

	return block;
}

// (30:2) {#each Object.keys(sortedEntries) as UUID}
function create_each_block(ctx) {
	let bysession;
	let current;

	bysession = new BySession({
			props: {
				list: /*sortedEntries*/ ctx[1][/*UUID*/ ctx[5]]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(bysession.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(bysession, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const bysession_changes = {};
			if (dirty & /*sortedEntries*/ 2) bysession_changes.list = /*sortedEntries*/ ctx[1][/*UUID*/ ctx[5]];
			bysession.$set(bysession_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(bysession.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(bysession.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(bysession, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(30:2) {#each Object.keys(sortedEntries) as UUID}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let textblock;
	let t0;
	let pre;
	let t1;
	let t2;
	let current;

	textblock = new TextBlock({
			props: {
				variant: "title",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value = Object.keys(/*sortedEntries*/ ctx[1]);
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			create_component(textblock.$$.fragment);
			t0 = space();
			pre = element("pre");
			t1 = text("  ");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = text("\r\n");
			add_location(pre, file, 28, 0, 647);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(textblock, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, pre, anchor);
			append_dev(pre, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(pre, null);
			}

			append_dev(pre, t2);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const textblock_changes = {};

			if (dirty & /*$$scope, date*/ 257) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);

			if (dirty & /*sortedEntries, Object*/ 2) {
				each_value = Object.keys(/*sortedEntries*/ ctx[1]);
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(pre, t2);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(textblock, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(pre);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ByDate', slots, []);
	let { date } = $$props;
	let { entries } = $$props;
	const fmt = Intl.DateTimeFormat(navigator.language, { dateStyle: 'long' });
	let sortedEntries = {};

	function sortEntriesBySession() {
		entries.forEach(e => {
			const { sessionUUID } = e;

			if (sessionUUID in sortedEntries) {
				sortedEntries[sessionUUID].push(e);
			} else {
				$$invalidate(1, sortedEntries[sessionUUID] = [e], sortedEntries);
			}
		});
	}

	const writable_props = ['date', 'entries'];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ByDate> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('date' in $$props) $$invalidate(0, date = $$props.date);
		if ('entries' in $$props) $$invalidate(3, entries = $$props.entries);
	};

	$$self.$capture_state = () => ({
		TextBlock,
		BySession,
		date,
		entries,
		fmt,
		sortedEntries,
		sortEntriesBySession
	});

	$$self.$inject_state = $$props => {
		if ('date' in $$props) $$invalidate(0, date = $$props.date);
		if ('entries' in $$props) $$invalidate(3, entries = $$props.entries);
		if ('sortedEntries' in $$props) $$invalidate(1, sortedEntries = $$props.sortedEntries);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*entries*/ 8) {
			$: {
				entries;
				sortEntriesBySession();
			}
		}
	};

	return [date, sortedEntries, fmt, entries];
}

class ByDate extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { date: 0, entries: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ByDate",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*date*/ ctx[0] === undefined && !('date' in props)) {
			console.warn("<ByDate> was created without expected prop 'date'");
		}

		if (/*entries*/ ctx[3] === undefined && !('entries' in props)) {
			console.warn("<ByDate> was created without expected prop 'entries'");
		}
	}

	get date() {
		throw new Error("<ByDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set date(value) {
		throw new Error("<ByDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get entries() {
		throw new Error("<ByDate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set entries(value) {
		throw new Error("<ByDate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default ByDate;