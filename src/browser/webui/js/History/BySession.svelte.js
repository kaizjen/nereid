/* BySession.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_location,
	append_styles,
	attr_dev,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	group_outros,
	init,
	insert_dev,
	mount_component,
	noop,
	safe_not_equal,
	transition_in,
	transition_out,
	validate_each_argument,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import Entry from "./Entry.svelte.js";
const file = "BySession.svelte";

function add_css(target) {
	append_styles(target, "svelte-1nrb9c0", ".list.svelte-1nrb9c0{border-radius:4px;overflow:hidden;background:#80808033;margin-bottom:10px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnlTZXNzaW9uLnN2ZWx0ZSIsInNvdXJjZXMiOlsiQnlTZXNzaW9uLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c3R5bGU+XHJcbiAgLmxpc3Qge1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIGJhY2tncm91bmQ6ICM4MDgwODAzMztcclxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgfVxyXG48L3N0eWxlPlxyXG48c2NyaXB0PlxyXG4gIGltcG9ydCBFbnRyeSBmcm9tIFwiLi9FbnRyeS5zdmVsdGVcIjtcclxuXHJcbiAgZXhwb3J0IGxldCBsaXN0O1xyXG5cclxuICBsZXQgZm9ybWF0dGVkTGlzdCA9IGxpc3QuZmlsdGVyKChpdGVtLCBpbmRleCkgPT4ge1xyXG4gICAgcmV0dXJuIGxpc3QuZmluZEluZGV4KGUgPT4gZS51cmwgPT0gaXRlbS51cmwpID09IGluZGV4O1xyXG4gIH0pXHJcbjwvc2NyaXB0PlxyXG5cclxuPGRpdiBjbGFzcz1cImxpc3RcIj5cclxuICB7I2VhY2ggZm9ybWF0dGVkTGlzdCBhcyBlbnRyeX1cclxuICAgIDxFbnRyeSB7ZW50cnl9IC8+XHJcbiAgey9lYWNofVxyXG48L2Rpdj4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0UsS0FBSyxlQUFDLENBQUMsQUFDTCxhQUFhLENBQUUsR0FBRyxDQUNsQixRQUFRLENBQUUsTUFBTSxDQUNoQixVQUFVLENBQUUsU0FBUyxDQUNyQixhQUFhLENBQUUsSUFBSSxBQUNyQixDQUFDIn0= */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (20:2) {#each formattedList as entry}
function create_each_block(ctx) {
	let entry;
	let current;

	entry = new Entry({
			props: { entry: /*entry*/ ctx[2] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(entry.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(entry, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(entry.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(entry.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(entry, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(20:2) {#each formattedList as entry}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let current;
	let each_value = /*formattedList*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "list svelte-1nrb9c0");
			add_location(div, file, 18, 0, 344);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*formattedList*/ 1) {
				each_value = /*formattedList*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('BySession', slots, []);
	let { list } = $$props;

	let formattedList = list.filter((item, index) => {
		return list.findIndex(e => e.url == item.url) == index;
	});

	const writable_props = ['list'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BySession> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('list' in $$props) $$invalidate(1, list = $$props.list);
	};

	$$self.$capture_state = () => ({ Entry, list, formattedList });

	$$self.$inject_state = $$props => {
		if ('list' in $$props) $$invalidate(1, list = $$props.list);
		if ('formattedList' in $$props) $$invalidate(0, formattedList = $$props.formattedList);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [formattedList, list];
}

class BySession extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { list: 1 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BySession",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*list*/ ctx[1] === undefined && !('list' in props)) {
			console.warn("<BySession> was created without expected prop 'list'");
		}
	}

	get list() {
		throw new Error("<BySession>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set list(value) {
		throw new Error("<BySession>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default BySession;