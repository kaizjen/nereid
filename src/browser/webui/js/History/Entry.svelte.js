/* Entry.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	append_styles,
	attr_dev,
	create_component,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element,
	globals,
	init,
	insert_dev,
	mount_component,
	noop,
	safe_not_equal,
	set_data_dev,
	set_style,
	space,
	src_url_equal,
	text,
	transition_in,
	transition_out,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

const { console: console_1 } = globals;

import {
	TextBlock,
	ContextMenu,
	MenuFlyoutItem,
	MenuFlyoutDivider,
	IconButton
} from "../modules/fluent-svelte/index.js";

import { getContext } from "nereid://.svelte/index.mjs";
import * as Icons from "../icons.js";
const file = "Entry.svelte";

function add_css(target) {
	append_styles(target, "svelte-1ei6l12", ".item.svelte-1ei6l12.svelte-1ei6l12{display:flex}.item.svelte-1ei6l12.svelte-1ei6l12:hover{background:#80808073}.item.svelte-1ei6l12>a.svelte-1ei6l12{padding:10px;padding-inline:20px;flex-grow:1;color:inherit;text-decoration:none;display:flex;align-items:center;overflow:hidden}.wrapper.svelte-1ei6l12.svelte-1ei6l12{white-space:nowrap}.wrapper.svelte-1ei6l12.svelte-1ei6l12:not(:last-child){border-bottom:1px solid #80808073}.host.svelte-1ei6l12.svelte-1ei6l12{color:gray;margin-right:10px;width:3.5cm;overflow:hidden;flex-shrink:0}.favicon.svelte-1ei6l12.svelte-1ei6l12{width:16px;height:16px;margin-right:8px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50cnkuc3ZlbHRlIiwic291cmNlcyI6WyJFbnRyeS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHN0eWxlPlxyXG4gIC5pdGVtIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgfVxyXG4gIC5pdGVtOmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQ6ICM4MDgwODA3MztcclxuICB9XHJcbiAgLml0ZW0gPiBhIHtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBwYWRkaW5nLWlubGluZTogMjBweDtcclxuICAgIGZsZXgtZ3JvdzogMTtcclxuICAgIGNvbG9yOiBpbmhlcml0O1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIH1cclxuXHJcbiAgLndyYXBwZXIge1xyXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuICB9XHJcbiAgLndyYXBwZXI6bm90KDpsYXN0LWNoaWxkKSB7XHJcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzgwODA4MDczO1xyXG4gIH1cclxuXHJcbiAgLmhvc3Qge1xyXG4gICAgY29sb3I6IGdyYXk7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbiAgICB3aWR0aDogMy41Y207XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgZmxleC1zaHJpbms6IDA7XHJcbiAgfVxyXG5cclxuICAuZmF2aWNvbiB7XHJcbiAgICB3aWR0aDogMTZweDtcclxuICAgIGhlaWdodDogMTZweDtcclxuICAgIG1hcmdpbi1yaWdodDogOHB4O1xyXG4gIH1cclxuPC9zdHlsZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgaW1wb3J0IHsgVGV4dEJsb2NrLCBDb250ZXh0TWVudSwgTWVudUZseW91dEl0ZW0sIE1lbnVGbHlvdXREaXZpZGVyLCBJY29uQnV0dG9uIH0gZnJvbSBcImZsdWVudC1zdmVsdGVcIjtcclxuICBpbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSBcInN2ZWx0ZVwiO1xyXG4gIGltcG9ydCAqIGFzIEljb25zIGZyb20gXCIuLi9pY29ucy5qc1wiO1xyXG5cclxuICBleHBvcnQgbGV0IGVudHJ5O1xyXG4gIGNvbnN0IHVwZGF0ZSA9IGdldENvbnRleHQoJ3VwZGF0ZScpXHJcblxyXG4gIGNvbnN0IHsgdCB9ID0gd2luZG93Lm5lcmVpZC5pMThuO1xyXG4gIGZ1bmN0aW9uIHR0KHN0ciwgLi4uYXJncykge1xyXG4gICAgcmV0dXJuIHQoYHBhZ2VzLmhpc3RvcnkuJHtzdHJ9YCwgLi4uYXJncylcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldFRpbWUoKSB7XHJcbiAgICBmdW5jdGlvbiBzbWFydFRvU3RyaW5nKG51bSkge1xyXG4gICAgICBudW0gPSBudW0udG9TdHJpbmcoKVxyXG4gICAgICBpZiAobnVtLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICBudW0gPSAnMCcgKyBudW07XHJcbiAgICAgICAgcmV0dXJuIHNtYXJ0VG9TdHJpbmcobnVtKVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBudW1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoZW50cnkudGltZXN0YW1wKTtcclxuICAgIHJldHVybiBgJHtzbWFydFRvU3RyaW5nKGRhdGUuZ2V0SG91cnMoKSl9OiR7c21hcnRUb1N0cmluZyhkYXRlLmdldE1pbnV0ZXMoKSl9YFxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ2V0SG9zdG5hbWUodXJsKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gKG5ldyBVUkwodXJsKSkuaG9zdG5hbWVcclxuXHJcbiAgICB9IGNhdGNoIChfKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgZnVuY3Rpb24gZGVsKCkge1xyXG4gICAgY29uc29sZS5sb2coXCJkZWxcIiwgZW50cnkub3JpZ2luYWxJbmRleCk7XHJcbiAgICBhd2FpdCB3aW5kb3cubmVyZWlkLnVzZXJkYXRhLmhpc3RvcnkuZGVsQXQoeyBpbmRleDogZW50cnkub3JpZ2luYWxJbmRleCB9KVxyXG4gICAgdXBkYXRlKCk7XHJcbiAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxkaXYgY2xhc3M9XCJ3cmFwcGVyXCI+XHJcbiAgPENvbnRleHRNZW51IHN0eWxlPVwid2hpdGUtc3BhY2U6IG5vd3JhcDtcIj5cclxuICAgIDxkaXYgY2xhc3M9XCJpdGVtXCI+XHJcbiAgICAgIDxhIGhyZWY9e2VudHJ5LnVybH0+XHJcbiAgICAgICAgPFRleHRCbG9jayB2YXJpYW50PVwiY2FwdGlvblwiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAxMHB4XCI+XHJcbiAgICAgICAgICAgIHtnZXRUaW1lKCl9XHJcbiAgICAgICAgPC9UZXh0QmxvY2s+XHJcbiAgICAgICAgeyNpZiBlbnRyeS5mYXZpY29uVVJMfVxyXG4gICAgICAgICAgPGltZyBjbGFzcz1cImZhdmljb25cIiBzcmM9eydnZXQ6JyArIGVudHJ5LmZhdmljb25VUkx9IGFsdD17dHQoJ2Zhdmljb24nKX0+XHJcbiAgICAgICAgey9pZn1cclxuICAgICAgICA8c3BhbiBjbGFzcz1cImhvc3RcIiBzdHlsZTp3aWR0aD17ZW50cnkuZmF2aWNvblVSTCA/IFwiY2FsYygzLjVjbSAtIDE2cHggLSA4cHgpXCIgOiAnJ30+XHJcbiAgICAgICAgICA8VGV4dEJsb2NrIHZhcmlhbnQ9XCJjYXB0aW9uXCI+XHJcbiAgICAgICAgICAgIHtnZXRIb3N0bmFtZShlbnRyeS51cmwpfVxyXG4gICAgICAgICAgPC9UZXh0QmxvY2s+XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgIDxUZXh0QmxvY2s+XHJcbiAgICAgICAgICB7ZW50cnkudGl0bGV9XHJcbiAgICAgICAgPC9UZXh0QmxvY2s+XHJcbiAgICAgIDwvYT5cclxuICAgICAgPEljb25CdXR0b24gb246Y2xpY2s9e2RlbH0+XHJcbiAgICAgICAgPEljb25zLkRlbGV0ZSB0aXRsZT17dHQoJ2RlbGV0ZUVudHJ5Jyl9PjwvSWNvbnMuRGVsZXRlPlxyXG4gICAgICA8L0ljb25CdXR0b24+XHJcbiAgICA8L2Rpdj5cclxuICBcclxuICAgIDxzdmVsdGU6ZnJhZ21lbnQgc2xvdD1cImZseW91dFwiPlxyXG4gICAgICA8TWVudUZseW91dEl0ZW0gb246Y2xpY2s9eygpID0+IHdpbmRvdy5uZXJlaWQudGFiLmNyZWF0ZShlbnRyeS51cmwpfT5cclxuICAgICAgICB7dCgnbWVudS5jb250ZXh0TWVudS5vcGVuLm5ld1RhYicpfVxyXG4gICAgICA8L01lbnVGbHlvdXRJdGVtPlxyXG4gICAgICA8TWVudUZseW91dEl0ZW0gb246Y2xpY2s9eygpID0+IHdpbmRvdy5uZXJlaWQudGFiLmdvKGVudHJ5LnVybCl9PlxyXG4gICAgICAgIHt0KCdtZW51LmNvbnRleHRNZW51Lm9wZW4udGhpc1RhYicpfVxyXG4gICAgICA8L01lbnVGbHlvdXRJdGVtPlxyXG4gICAgICA8TWVudUZseW91dERpdmlkZXIgLz5cclxuICAgICAgPE1lbnVGbHlvdXRJdGVtIG9uOmNsaWNrPXtkZWx9PlxyXG4gICAgICAgIHt0dCgnZGVsZXRlRW50cnknKX1cclxuICAgICAgPC9NZW51Rmx5b3V0SXRlbT5cclxuICAgIDwvc3ZlbHRlOmZyYWdtZW50PlxyXG4gIDwvQ29udGV4dE1lbnU+XHJcbjwvZGl2PiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDRSxLQUFLLDhCQUFDLENBQUMsQUFDTCxPQUFPLENBQUUsSUFBSSxBQUNmLENBQUMsQUFDRCxtQ0FBSyxNQUFNLEFBQUMsQ0FBQyxBQUNYLFVBQVUsQ0FBRSxTQUFTLEFBQ3ZCLENBQUMsQUFDRCxvQkFBSyxDQUFHLENBQUMsZUFBQyxDQUFDLEFBQ1QsT0FBTyxDQUFFLElBQUksQ0FDYixjQUFjLENBQUUsSUFBSSxDQUNwQixTQUFTLENBQUUsQ0FBQyxDQUNaLEtBQUssQ0FBRSxPQUFPLENBQ2QsZUFBZSxDQUFFLElBQUksQ0FDckIsT0FBTyxDQUFFLElBQUksQ0FDYixXQUFXLENBQUUsTUFBTSxDQUNuQixRQUFRLENBQUUsTUFBTSxBQUNsQixDQUFDLEFBRUQsUUFBUSw4QkFBQyxDQUFDLEFBQ1IsV0FBVyxDQUFFLE1BQU0sQUFDckIsQ0FBQyxBQUNELHNDQUFRLEtBQUssV0FBVyxDQUFDLEFBQUMsQ0FBQyxBQUN6QixhQUFhLENBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTLEFBQ3BDLENBQUMsQUFFRCxLQUFLLDhCQUFDLENBQUMsQUFDTCxLQUFLLENBQUUsSUFBSSxDQUNYLFlBQVksQ0FBRSxJQUFJLENBQ2xCLEtBQUssQ0FBRSxLQUFLLENBQ1osUUFBUSxDQUFFLE1BQU0sQ0FDaEIsV0FBVyxDQUFFLENBQUMsQUFDaEIsQ0FBQyxBQUVELFFBQVEsOEJBQUMsQ0FBQyxBQUNSLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixZQUFZLENBQUUsR0FBRyxBQUNuQixDQUFDIn0= */");
}

// (88:8) <TextBlock variant="caption" style="margin-right: 10px">
function create_default_slot_7(ctx) {
	let t_1_value = /*getTime*/ ctx[3]() + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(88:8) <TextBlock variant=\\\"caption\\\" style=\\\"margin-right: 10px\\\">",
		ctx
	});

	return block;
}

// (91:8) {#if entry.faviconURL}
function create_if_block(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "class", "favicon svelte-1ei6l12");
			if (!src_url_equal(img.src, img_src_value = 'get:' + /*entry*/ ctx[0].faviconURL)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*tt*/ ctx[2]('favicon'));
			add_location(img, file, 91, 10, 1969);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*entry*/ 1 && !src_url_equal(img.src, img_src_value = 'get:' + /*entry*/ ctx[0].faviconURL)) {
				attr_dev(img, "src", img_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(91:8) {#if entry.faviconURL}",
		ctx
	});

	return block;
}

// (95:10) <TextBlock variant="caption">
function create_default_slot_6(ctx) {
	let t_1_value = getHostname(/*entry*/ ctx[0].url) + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*entry*/ 1 && t_1_value !== (t_1_value = getHostname(/*entry*/ ctx[0].url) + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(95:10) <TextBlock variant=\\\"caption\\\">",
		ctx
	});

	return block;
}

// (99:8) <TextBlock>
function create_default_slot_5(ctx) {
	let t_1_value = /*entry*/ ctx[0].title + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*entry*/ 1 && t_1_value !== (t_1_value = /*entry*/ ctx[0].title + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(99:8) <TextBlock>",
		ctx
	});

	return block;
}

// (103:6) <IconButton on:click={del}>
function create_default_slot_4(ctx) {
	let icons_delete;
	let current;

	icons_delete = new Icons.Delete({
			props: { title: /*tt*/ ctx[2]('deleteEntry') },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icons_delete.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(icons_delete, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icons_delete.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icons_delete.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icons_delete, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(103:6) <IconButton on:click={del}>",
		ctx
	});

	return block;
}

// (85:2) <ContextMenu style="white-space: nowrap;">
function create_default_slot_3(ctx) {
	let div;
	let a;
	let textblock0;
	let t0;
	let t1;
	let span;
	let textblock1;
	let t2;
	let textblock2;
	let a_href_value;
	let t3;
	let iconbutton;
	let current;

	textblock0 = new TextBlock({
			props: {
				variant: "caption",
				style: "margin-right: 10px",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let if_block = /*entry*/ ctx[0].faviconURL && create_if_block(ctx);

	textblock1 = new TextBlock({
			props: {
				variant: "caption",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	textblock2 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton = new IconButton({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton.$on("click", /*del*/ ctx[4]);

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			create_component(textblock0.$$.fragment);
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			span = element("span");
			create_component(textblock1.$$.fragment);
			t2 = space();
			create_component(textblock2.$$.fragment);
			t3 = space();
			create_component(iconbutton.$$.fragment);
			attr_dev(span, "class", "host svelte-1ei6l12");

			set_style(
				span,
				"width",
				/*entry*/ ctx[0].faviconURL
				? "calc(3.5cm - 16px - 8px)"
				: '',
				false
			);

			add_location(span, file, 93, 8, 2067);
			attr_dev(a, "href", a_href_value = /*entry*/ ctx[0].url);
			attr_dev(a, "class", "svelte-1ei6l12");
			add_location(a, file, 86, 6, 1792);
			attr_dev(div, "class", "item svelte-1ei6l12");
			add_location(div, file, 85, 4, 1766);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, a);
			mount_component(textblock0, a, null);
			append_dev(a, t0);
			if (if_block) if_block.m(a, null);
			append_dev(a, t1);
			append_dev(a, span);
			mount_component(textblock1, span, null);
			append_dev(a, t2);
			mount_component(textblock2, a, null);
			append_dev(div, t3);
			mount_component(iconbutton, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock0_changes = {};

			if (dirty & /*$$scope*/ 256) {
				textblock0_changes.$$scope = { dirty, ctx };
			}

			textblock0.$set(textblock0_changes);

			if (/*entry*/ ctx[0].faviconURL) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(a, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			const textblock1_changes = {};

			if (dirty & /*$$scope, entry*/ 257) {
				textblock1_changes.$$scope = { dirty, ctx };
			}

			textblock1.$set(textblock1_changes);

			if (dirty & /*entry*/ 1) {
				set_style(
					span,
					"width",
					/*entry*/ ctx[0].faviconURL
					? "calc(3.5cm - 16px - 8px)"
					: '',
					false
				);
			}

			const textblock2_changes = {};

			if (dirty & /*$$scope, entry*/ 257) {
				textblock2_changes.$$scope = { dirty, ctx };
			}

			textblock2.$set(textblock2_changes);

			if (!current || dirty & /*entry*/ 1 && a_href_value !== (a_href_value = /*entry*/ ctx[0].url)) {
				attr_dev(a, "href", a_href_value);
			}

			const iconbutton_changes = {};

			if (dirty & /*$$scope*/ 256) {
				iconbutton_changes.$$scope = { dirty, ctx };
			}

			iconbutton.$set(iconbutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock0.$$.fragment, local);
			transition_in(textblock1.$$.fragment, local);
			transition_in(textblock2.$$.fragment, local);
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock0.$$.fragment, local);
			transition_out(textblock1.$$.fragment, local);
			transition_out(textblock2.$$.fragment, local);
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(textblock0);
			if (if_block) if_block.d();
			destroy_component(textblock1);
			destroy_component(textblock2);
			destroy_component(iconbutton);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(85:2) <ContextMenu style=\\\"white-space: nowrap;\\\">",
		ctx
	});

	return block;
}

// (109:6) <MenuFlyoutItem on:click={() => window.nereid.tab.create(entry.url)}>
function create_default_slot_2(ctx) {
	let t_1_value = /*t*/ ctx[1]('menu.contextMenu.open.newTab') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(109:6) <MenuFlyoutItem on:click={() => window.nereid.tab.create(entry.url)}>",
		ctx
	});

	return block;
}

// (112:6) <MenuFlyoutItem on:click={() => window.nereid.tab.go(entry.url)}>
function create_default_slot_1(ctx) {
	let t_1_value = /*t*/ ctx[1]('menu.contextMenu.open.thisTab') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(112:6) <MenuFlyoutItem on:click={() => window.nereid.tab.go(entry.url)}>",
		ctx
	});

	return block;
}

// (116:6) <MenuFlyoutItem on:click={del}>
function create_default_slot(ctx) {
	let t_1_value = /*tt*/ ctx[2]('deleteEntry') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(116:6) <MenuFlyoutItem on:click={del}>",
		ctx
	});

	return block;
}

// (108:4) <svelte:fragment slot="flyout">
function create_flyout_slot(ctx) {
	let menuflyoutitem0;
	let t0;
	let menuflyoutitem1;
	let t1;
	let menuflyoutdivider;
	let t2;
	let menuflyoutitem2;
	let current;

	menuflyoutitem0 = new MenuFlyoutItem({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	menuflyoutitem0.$on("click", /*click_handler*/ ctx[5]);

	menuflyoutitem1 = new MenuFlyoutItem({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	menuflyoutitem1.$on("click", /*click_handler_1*/ ctx[6]);
	menuflyoutdivider = new MenuFlyoutDivider({ $$inline: true });

	menuflyoutitem2 = new MenuFlyoutItem({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	menuflyoutitem2.$on("click", /*del*/ ctx[4]);

	const block = {
		c: function create() {
			create_component(menuflyoutitem0.$$.fragment);
			t0 = space();
			create_component(menuflyoutitem1.$$.fragment);
			t1 = space();
			create_component(menuflyoutdivider.$$.fragment);
			t2 = space();
			create_component(menuflyoutitem2.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(menuflyoutitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(menuflyoutitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(menuflyoutdivider, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(menuflyoutitem2, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const menuflyoutitem0_changes = {};

			if (dirty & /*$$scope*/ 256) {
				menuflyoutitem0_changes.$$scope = { dirty, ctx };
			}

			menuflyoutitem0.$set(menuflyoutitem0_changes);
			const menuflyoutitem1_changes = {};

			if (dirty & /*$$scope*/ 256) {
				menuflyoutitem1_changes.$$scope = { dirty, ctx };
			}

			menuflyoutitem1.$set(menuflyoutitem1_changes);
			const menuflyoutitem2_changes = {};

			if (dirty & /*$$scope*/ 256) {
				menuflyoutitem2_changes.$$scope = { dirty, ctx };
			}

			menuflyoutitem2.$set(menuflyoutitem2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(menuflyoutitem0.$$.fragment, local);
			transition_in(menuflyoutitem1.$$.fragment, local);
			transition_in(menuflyoutdivider.$$.fragment, local);
			transition_in(menuflyoutitem2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(menuflyoutitem0.$$.fragment, local);
			transition_out(menuflyoutitem1.$$.fragment, local);
			transition_out(menuflyoutdivider.$$.fragment, local);
			transition_out(menuflyoutitem2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(menuflyoutitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(menuflyoutitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(menuflyoutdivider, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(menuflyoutitem2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_flyout_slot.name,
		type: "slot",
		source: "(108:4) <svelte:fragment slot=\\\"flyout\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let contextmenu;
	let current;

	contextmenu = new ContextMenu({
			props: {
				style: "white-space: nowrap;",
				$$slots: {
					flyout: [create_flyout_slot],
					default: [create_default_slot_3]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(contextmenu.$$.fragment);
			attr_dev(div, "class", "wrapper svelte-1ei6l12");
			add_location(div, file, 83, 0, 1693);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(contextmenu, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const contextmenu_changes = {};

			if (dirty & /*$$scope, entry*/ 257) {
				contextmenu_changes.$$scope = { dirty, ctx };
			}

			contextmenu.$set(contextmenu_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(contextmenu.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(contextmenu.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(contextmenu);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function getHostname(url) {
	try {
		return new URL(url).hostname;
	} catch(_) {
		return null;
	}
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Entry', slots, []);
	let { entry } = $$props;
	const update = getContext('update');
	const { t } = window.nereid.i18n;

	function tt(str, ...args) {
		return t(`pages.history.${str}`, ...args);
	}

	function getTime() {
		function smartToString(num) {
			num = num.toString();

			if (num.length < 2) {
				num = '0' + num;
				return smartToString(num);
			}

			return num;
		}

		const date = new Date(entry.timestamp);
		return `${smartToString(date.getHours())}:${smartToString(date.getMinutes())}`;
	}

	async function del() {
		console.log("del", entry.originalIndex);
		await window.nereid.userdata.history.delAt({ index: entry.originalIndex });
		update();
	}

	const writable_props = ['entry'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Entry> was created with unknown prop '${key}'`);
	});

	const click_handler = () => window.nereid.tab.create(entry.url);
	const click_handler_1 = () => window.nereid.tab.go(entry.url);

	$$self.$$set = $$props => {
		if ('entry' in $$props) $$invalidate(0, entry = $$props.entry);
	};

	$$self.$capture_state = () => ({
		TextBlock,
		ContextMenu,
		MenuFlyoutItem,
		MenuFlyoutDivider,
		IconButton,
		getContext,
		Icons,
		entry,
		update,
		t,
		tt,
		getTime,
		getHostname,
		del
	});

	$$self.$inject_state = $$props => {
		if ('entry' in $$props) $$invalidate(0, entry = $$props.entry);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [entry, t, tt, getTime, del, click_handler, click_handler_1];
}

class Entry extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { entry: 0 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Entry",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*entry*/ ctx[0] === undefined && !('entry' in props)) {
			console_1.warn("<Entry> was created without expected prop 'entry'");
		}
	}

	get entry() {
		throw new Error("<Entry>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set entry(value) {
		throw new Error("<Entry>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Entry;