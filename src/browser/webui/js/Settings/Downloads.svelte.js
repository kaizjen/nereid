/* Downloads.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_flush_callback,
	add_location,
	append_dev,
	attr_dev,
	bind,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element,
	globals,
	group_outros,
	init,
	insert_dev,
	mount_component,
	noop,
	safe_not_equal,
	set_data_dev,
	set_store_value,
	space,
	text,
	transition_in,
	transition_out,
	validate_slots,
	validate_store
} from "nereid://.svelte/internal/index.mjs";

const { console: console_1 } = globals;
import { RadioButton, TextBlock, Button } from "../modules/fluent-svelte/index.js";
import { getContext } from "nereid://.svelte/internal/index.mjs";
const file = "Downloads.svelte";

// (43:2) <TextBlock variant="subtitle">
function create_default_slot_8(ctx) {
	let t_1_value = /*tt*/ ctx[2]('subtitle') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(43:2) <TextBlock variant=\\\"subtitle\\\">",
		ctx
	});

	return block;
}

// (48:6) <TextBlock>
function create_default_slot_7(ctx) {
	let t_1_value = /*tt*/ ctx[2]('ask') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(48:6) <TextBlock>",
		ctx
	});

	return block;
}

// (46:2) <RadioButton bind:group value="unknown" on:click={selectUnknown}>
function create_default_slot_6(ctx) {
	let div;
	let textblock;
	let current;

	textblock = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(textblock.$$.fragment);
			add_location(div, file, 46, 4, 1206);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(textblock, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(textblock);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(46:2) <RadioButton bind:group value=\\\"unknown\\\" on:click={selectUnknown}>",
		ctx
	});

	return block;
}

// (55:6) <TextBlock>
function create_default_slot_5(ctx) {
	let t_1_value = /*tt*/ ctx[2]('choose') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(55:6) <TextBlock>",
		ctx
	});

	return block;
}

// (56:6) {#if group == 'known'}
function create_if_block(ctx) {
	let br;
	let textblock;
	let current;

	textblock = new TextBlock({
			props: {
				style: "color: gray;",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			br = element("br");
			create_component(textblock.$$.fragment);
			add_location(br, file, 56, 8, 1457);
		},
		m: function mount(target, anchor) {
			insert_dev(target, br, anchor);
			mount_component(textblock, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock_changes = {};

			if (dirty & /*$$scope, $config*/ 2050) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(br);
			destroy_component(textblock, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(56:6) {#if group == 'known'}",
		ctx
	});

	return block;
}

// (57:12) <TextBlock style="color: gray;">
function create_default_slot_4(ctx) {
	let t_1_value = (/*$config*/ ctx[1].behaviour.downloadPath ?? /*tt*/ ctx[2]('noPath')) + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$config*/ 2 && t_1_value !== (t_1_value = (/*$config*/ ctx[1].behaviour.downloadPath ?? /*tt*/ ctx[2]('noPath')) + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(57:12) <TextBlock style=\\\"color: gray;\\\">",
		ctx
	});

	return block;
}

// (53:2) <RadioButton bind:group value="known">
function create_default_slot_3(ctx) {
	let div;
	let textblock;
	let t_1;
	let current;

	textblock = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let if_block = /*group*/ ctx[0] == 'known' && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			create_component(textblock.$$.fragment);
			t_1 = space();
			if (if_block) if_block.c();
			add_location(div, file, 53, 4, 1365);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(textblock, div, null);
			append_dev(div, t_1);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);

			if (/*group*/ ctx[0] == 'known') {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*group*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(textblock);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(53:2) <RadioButton bind:group value=\\\"known\\\">",
		ctx
	});

	return block;
}

// (61:2) <Button variant="accent" disabled={group != 'known'} on:click={selectFolder}>
function create_default_slot_2(ctx) {
	let t_1_value = /*tt*/ ctx[2]('button-select') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(61:2) <Button variant=\\\"accent\\\" disabled={group != 'known'} on:click={selectFolder}>",
		ctx
	});

	return block;
}

// (65:2) <Button      disabled={$config.behaviour.downloadPath == null}      variant="hyperlink"      on:click={() => { window.nereid.shell.openPath($config.behaviour.downloadPath) }}    >
function create_default_slot_1(ctx) {
	let t_1_value = /*tt*/ ctx[2]('openFolder') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(65:2) <Button      disabled={$config.behaviour.downloadPath == null}      variant=\\\"hyperlink\\\"      on:click={() => { window.nereid.shell.openPath($config.behaviour.downloadPath) }}    >",
		ctx
	});

	return block;
}

// (70:2) <Button variant="hyperlink" href="nereid://downloads" target="_blank">
function create_default_slot(ctx) {
	let t_1_value = /*tt*/ ctx[2]('allDownloads') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(70:2) <Button variant=\\\"hyperlink\\\" href=\\\"nereid://downloads\\\" target=\\\"_blank\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div0;
	let textblock;
	let t0;
	let div1;
	let radiobutton0;
	let updating_group;
	let t1;
	let div2;
	let radiobutton1;
	let updating_group_1;
	let t2;
	let button0;
	let t3;
	let div3;
	let t4;
	let div4;
	let button1;
	let t5;
	let button2;
	let current;

	textblock = new TextBlock({
			props: {
				variant: "subtitle",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function radiobutton0_group_binding(value) {
		/*radiobutton0_group_binding*/ ctx[7](value);
	}

	let radiobutton0_props = {
		value: "unknown",
		$$slots: { default: [create_default_slot_6] },
		$$scope: { ctx }
	};

	if (/*group*/ ctx[0] !== void 0) {
		radiobutton0_props.group = /*group*/ ctx[0];
	}

	radiobutton0 = new RadioButton({
			props: radiobutton0_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(radiobutton0, 'group', radiobutton0_group_binding));
	radiobutton0.$on("click", /*selectUnknown*/ ctx[4]);

	function radiobutton1_group_binding(value) {
		/*radiobutton1_group_binding*/ ctx[8](value);
	}

	let radiobutton1_props = {
		value: "known",
		$$slots: { default: [create_default_slot_3] },
		$$scope: { ctx }
	};

	if (/*group*/ ctx[0] !== void 0) {
		radiobutton1_props.group = /*group*/ ctx[0];
	}

	radiobutton1 = new RadioButton({
			props: radiobutton1_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(radiobutton1, 'group', radiobutton1_group_binding));

	button0 = new Button({
			props: {
				variant: "accent",
				disabled: /*group*/ ctx[0] != 'known',
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0.$on("click", /*selectFolder*/ ctx[5]);

	button1 = new Button({
			props: {
				disabled: /*$config*/ ctx[1].behaviour.downloadPath == null,
				variant: "hyperlink",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1.$on("click", /*click_handler*/ ctx[9]);

	button2 = new Button({
			props: {
				variant: "hyperlink",
				href: "nereid://downloads",
				target: "_blank",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(textblock.$$.fragment);
			t0 = space();
			div1 = element("div");
			create_component(radiobutton0.$$.fragment);
			t1 = space();
			div2 = element("div");
			create_component(radiobutton1.$$.fragment);
			t2 = space();
			create_component(button0.$$.fragment);
			t3 = space();
			div3 = element("div");
			t4 = space();
			div4 = element("div");
			create_component(button1.$$.fragment);
			t5 = space();
			create_component(button2.$$.fragment);
			attr_dev(div0, "class", "s-option");
			add_location(div0, file, 41, 0, 1015);
			attr_dev(div1, "class", "s-option");
			add_location(div1, file, 44, 0, 1109);
			attr_dev(div2, "class", "s-option");
			add_location(div2, file, 51, 0, 1295);
			attr_dev(div3, "class", "separator");
			add_location(div3, file, 62, 0, 1719);
			attr_dev(div4, "class", "s-option");
			add_location(div4, file, 63, 0, 1750);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(textblock, div0, null);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			mount_component(radiobutton0, div1, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, div2, anchor);
			mount_component(radiobutton1, div2, null);
			append_dev(div2, t2);
			mount_component(button0, div2, null);
			insert_dev(target, t3, anchor);
			insert_dev(target, div3, anchor);
			insert_dev(target, t4, anchor);
			insert_dev(target, div4, anchor);
			mount_component(button1, div4, null);
			append_dev(div4, t5);
			mount_component(button2, div4, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const textblock_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
			const radiobutton0_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				radiobutton0_changes.$$scope = { dirty, ctx };
			}

			if (!updating_group && dirty & /*group*/ 1) {
				updating_group = true;
				radiobutton0_changes.group = /*group*/ ctx[0];
				add_flush_callback(() => updating_group = false);
			}

			radiobutton0.$set(radiobutton0_changes);
			const radiobutton1_changes = {};

			if (dirty & /*$$scope, $config, group*/ 2051) {
				radiobutton1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_group_1 && dirty & /*group*/ 1) {
				updating_group_1 = true;
				radiobutton1_changes.group = /*group*/ ctx[0];
				add_flush_callback(() => updating_group_1 = false);
			}

			radiobutton1.$set(radiobutton1_changes);
			const button0_changes = {};
			if (dirty & /*group*/ 1) button0_changes.disabled = /*group*/ ctx[0] != 'known';

			if (dirty & /*$$scope*/ 2048) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};
			if (dirty & /*$config*/ 2) button1_changes.disabled = /*$config*/ ctx[1].behaviour.downloadPath == null;

			if (dirty & /*$$scope*/ 2048) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
			const button2_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				button2_changes.$$scope = { dirty, ctx };
			}

			button2.$set(button2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			transition_in(radiobutton0.$$.fragment, local);
			transition_in(radiobutton1.$$.fragment, local);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(button2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			transition_out(radiobutton0.$$.fragment, local);
			transition_out(radiobutton1.$$.fragment, local);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(button2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(textblock);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
			destroy_component(radiobutton0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div2);
			destroy_component(radiobutton1);
			destroy_component(button0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div3);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div4);
			destroy_component(button1);
			destroy_component(button2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $config;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Downloads', slots, []);
	let { update } = $$props;
	const { t } = window.nereid.i18n;

	function tt(key, ...args) {
		return t(`pages.settings.downloads.${key}`, ...args);
	}

	let config = getContext('config');
	validate_store(config, 'config');
	component_subscribe($$self, config, value => $$invalidate(1, $config = value));

	let group = $config.behaviour.downloadPath == null
	? 'unknown'
	: 'known';

	function selectUnknown() {
		console.log('selecting unknown');
		set_store_value(config, $config.behaviour.downloadPath = null, $config);
		update();
	}

	async function selectFolder() {
		console.log('selecting fld');

		let dialogResponse = await window.nereid.dialog.selectDirectory({
			defaultPath: $config.behaviour.downloadPath ?? '/',
			title: tt('dialog.title'),
			buttonLabel: tt('dialog.button-choose')
		});

		if (dialogResponse.canceled) return;
		let path = dialogResponse.filePaths[0];
		set_store_value(config, $config.behaviour.downloadPath = path, $config);
		update();
	}

	const writable_props = ['update'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Downloads> was created with unknown prop '${key}'`);
	});

	function radiobutton0_group_binding(value) {
		group = value;
		$$invalidate(0, group);
	}

	function radiobutton1_group_binding(value) {
		group = value;
		$$invalidate(0, group);
	}

	const click_handler = () => {
		window.nereid.shell.openPath($config.behaviour.downloadPath);
	};

	$$self.$$set = $$props => {
		if ('update' in $$props) $$invalidate(6, update = $$props.update);
	};

	$$self.$capture_state = () => ({
		RadioButton,
		TextBlock,
		Button,
		getContext,
		update,
		t,
		tt,
		config,
		group,
		selectUnknown,
		selectFolder,
		$config
	});

	$$self.$inject_state = $$props => {
		if ('update' in $$props) $$invalidate(6, update = $$props.update);
		if ('config' in $$props) $$invalidate(3, config = $$props.config);
		if ('group' in $$props) $$invalidate(0, group = $$props.group);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		group,
		$config,
		tt,
		config,
		selectUnknown,
		selectFolder,
		update,
		radiobutton0_group_binding,
		radiobutton1_group_binding,
		click_handler
	];
}

class Downloads extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { update: 6 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Downloads",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*update*/ ctx[6] === undefined && !('update' in props)) {
			console_1.warn("<Downloads> was created without expected prop 'update'");
		}
	}

	get update() {
		throw new Error("<Downloads>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set update(value) {
		throw new Error("<Downloads>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Downloads;