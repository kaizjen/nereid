/* Languages.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_flush_callback,
	add_location,
	append_dev,
	attr_dev,
	bind,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	empty,
	group_outros,
	init,
	insert_dev,
	mount_component,
	noop,
	safe_not_equal,
	set_data_dev,
	set_store_value,
	space,
	text,
	transition_in,
	transition_out,
	validate_each_argument,
	validate_slots,
	validate_store
} from "nereid://.svelte/internal/index.mjs";

import {
	RadioButton,
	TextBlock,
	Button,
	ContentDialog,
	InfoBar
} from "../modules/fluent-svelte/index.js";

import { getContext } from "nereid://.svelte/internal/index.mjs";
import Codes from "../modules/iso-639-1/src/index.js";
const file = "Languages.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

// (52:4) <RadioButton group={$config.i18n.lang} value={code} on:input={selectNereidLanguageF(code)}>
function create_default_slot_11(ctx) {
	let t0_value = Codes.getNativeName(/*code*/ ctx[18]) + "";
	let t0;
	let t1;

	const block = {
		c: function create() {
			t0 = text(t0_value);
			t1 = space();
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(52:4) <RadioButton group={$config.i18n.lang} value={code} on:input={selectNereidLanguageF(code)}>",
		ctx
	});

	return block;
}

// (51:2) {#each available as code}
function create_each_block_1(ctx) {
	let radiobutton;
	let br;
	let current;

	radiobutton = new RadioButton({
			props: {
				group: /*$config*/ ctx[3].i18n.lang,
				value: /*code*/ ctx[18],
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	radiobutton.$on("input", /*selectNereidLanguageF*/ ctx[9](/*code*/ ctx[18]));

	const block = {
		c: function create() {
			create_component(radiobutton.$$.fragment);
			br = element("br");
			add_location(br, file, 53, 18, 1475);
		},
		m: function mount(target, anchor) {
			mount_component(radiobutton, target, anchor);
			insert_dev(target, br, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const radiobutton_changes = {};
			if (dirty & /*$config*/ 8) radiobutton_changes.group = /*$config*/ ctx[3].i18n.lang;

			if (dirty & /*$$scope*/ 8388608) {
				radiobutton_changes.$$scope = { dirty, ctx };
			}

			radiobutton.$set(radiobutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(radiobutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(radiobutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(radiobutton, detaching);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(51:2) {#each available as code}",
		ctx
	});

	return block;
}

// (50:0) <ContentDialog bind:open={availableDialog} style="max-height: 100%; overflow: auto;" title={tt('dialog')}>
function create_default_slot_10(ctx) {
	let each_1_anchor;
	let current;
	let each_value_1 = /*available*/ ctx[5];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$config, available, selectNereidLanguageF, Codes*/ 552) {
				each_value_1 = /*available*/ ctx[5];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(50:0) <ContentDialog bind:open={availableDialog} style=\\\"max-height: 100%; overflow: auto;\\\" title={tt('dialog')}>",
		ctx
	});

	return block;
}

// (57:2) <Button slot="footer" on:click={() => availableDialog = false}>
function create_default_slot_9(ctx) {
	let t_1_value = /*t*/ ctx[4]('common.done') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(57:2) <Button slot=\\\"footer\\\" on:click={() => availableDialog = false}>",
		ctx
	});

	return block;
}

// (57:2) 
function create_footer_slot_1(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				slot: "footer",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[12]);

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_footer_slot_1.name,
		type: "slot",
		source: "(57:2) ",
		ctx
	});

	return block;
}

// (64:4) <RadioButton group={$config.i18n.locale} value={code} on:input={selectChromiumLanguageF(code)}>
function create_default_slot_8(ctx) {
	let t0_value = Codes.getNativeName(/*code*/ ctx[18]) + "";
	let t0;
	let t1;

	const block = {
		c: function create() {
			t0 = text(t0_value);
			t1 = space();
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(64:4) <RadioButton group={$config.i18n.locale} value={code} on:input={selectChromiumLanguageF(code)}>",
		ctx
	});

	return block;
}

// (63:2) {#each all as code}
function create_each_block(ctx) {
	let radiobutton;
	let br;
	let current;

	radiobutton = new RadioButton({
			props: {
				group: /*$config*/ ctx[3].i18n.locale,
				value: /*code*/ ctx[18],
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	radiobutton.$on("input", /*selectChromiumLanguageF*/ ctx[10](/*code*/ ctx[18]));

	const block = {
		c: function create() {
			create_component(radiobutton.$$.fragment);
			br = element("br");
			add_location(br, file, 65, 18, 1899);
		},
		m: function mount(target, anchor) {
			mount_component(radiobutton, target, anchor);
			insert_dev(target, br, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const radiobutton_changes = {};
			if (dirty & /*$config*/ 8) radiobutton_changes.group = /*$config*/ ctx[3].i18n.locale;

			if (dirty & /*$$scope*/ 8388608) {
				radiobutton_changes.$$scope = { dirty, ctx };
			}

			radiobutton.$set(radiobutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(radiobutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(radiobutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(radiobutton, detaching);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(63:2) {#each all as code}",
		ctx
	});

	return block;
}

// (62:0) <ContentDialog bind:open={allDialog} style="max-height: 100%; overflow: auto;" title={tt('dialog')}>
function create_default_slot_7(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*all*/ ctx[6];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$config, all, selectChromiumLanguageF, Codes*/ 1096) {
				each_value = /*all*/ ctx[6];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(62:0) <ContentDialog bind:open={allDialog} style=\\\"max-height: 100%; overflow: auto;\\\" title={tt('dialog')}>",
		ctx
	});

	return block;
}

// (69:2) <Button slot="footer" on:click={() => allDialog = false}>
function create_default_slot_6(ctx) {
	let t_1_value = /*t*/ ctx[4]('common.done') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(69:2) <Button slot=\\\"footer\\\" on:click={() => allDialog = false}>",
		ctx
	});

	return block;
}

// (69:2) 
function create_footer_slot(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				slot: "footer",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler_1*/ ctx[14]);

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_footer_slot.name,
		type: "slot",
		source: "(69:2) ",
		ctx
	});

	return block;
}

// (75:2) <TextBlock>
function create_default_slot_5(ctx) {
	let t_1_value = /*tt*/ ctx[7]('label-all') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(75:2) <TextBlock>",
		ctx
	});

	return block;
}

// (76:2) <Button on:click={() => allDialog = true}>
function create_default_slot_4(ctx) {
	let t_1_value = Codes.getNativeName(/*$config*/ ctx[3].i18n.locale) + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$config*/ 8 && t_1_value !== (t_1_value = Codes.getNativeName(/*$config*/ ctx[3].i18n.locale) + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(76:2) <Button on:click={() => allDialog = true}>",
		ctx
	});

	return block;
}

// (81:2) <TextBlock variant="caption">
function create_default_slot_3(ctx) {
	let t_1_value = /*tt*/ ctx[7]('notice') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(81:2) <TextBlock variant=\\\"caption\\\">",
		ctx
	});

	return block;
}

// (86:2) <TextBlock>
function create_default_slot_2(ctx) {
	let t_1_value = /*tt*/ ctx[7]('label-nereid') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(86:2) <TextBlock>",
		ctx
	});

	return block;
}

// (87:2) <Button on:click={() => availableDialog = true}>
function create_default_slot_1(ctx) {
	let t_1_value = Codes.getNativeName(/*$config*/ ctx[3].i18n.lang) + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$config*/ 8 && t_1_value !== (t_1_value = Codes.getNativeName(/*$config*/ ctx[3].i18n.lang) + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(87:2) <Button on:click={() => availableDialog = true}>",
		ctx
	});

	return block;
}

// (92:0) {#if needsRestart}
function create_if_block(ctx) {
	let div;
	let infobar;
	let current;

	infobar = new InfoBar({
			props: {
				severity: "caution",
				title: /*tt*/ ctx[7]('restart-notification'),
				$$slots: { action: [create_action_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(infobar.$$.fragment);
			attr_dev(div, "class", "s-option");
			add_location(div, file, 92, 2, 2536);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(infobar, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const infobar_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				infobar_changes.$$scope = { dirty, ctx };
			}

			infobar.$set(infobar_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(infobar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(infobar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(infobar);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(92:0) {#if needsRestart}",
		ctx
	});

	return block;
}

// (95:6) <Button slot="action" variant="accent" on:click={window.nereid.app.restart}>
function create_default_slot(ctx) {
	let t_1_value = /*tt*/ ctx[7]('restart-button') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(95:6) <Button slot=\\\"action\\\" variant=\\\"accent\\\" on:click={window.nereid.app.restart}>",
		ctx
	});

	return block;
}

// (95:6) 
function create_action_slot(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				slot: "action",
				variant: "accent",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", window.nereid.app.restart);

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_action_slot.name,
		type: "slot",
		source: "(95:6) ",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let contentdialog0;
	let updating_open;
	let t0;
	let contentdialog1;
	let updating_open_1;
	let t1;
	let div0;
	let textblock0;
	let t2;
	let button0;
	let t3;
	let div1;
	let textblock1;
	let t4;
	let div2;
	let textblock2;
	let t5;
	let button1;
	let t6;
	let if_block_anchor;
	let current;

	function contentdialog0_open_binding(value) {
		/*contentdialog0_open_binding*/ ctx[13](value);
	}

	let contentdialog0_props = {
		style: "max-height: 100%; overflow: auto;",
		title: /*tt*/ ctx[7]('dialog'),
		$$slots: {
			footer: [create_footer_slot_1],
			default: [create_default_slot_10]
		},
		$$scope: { ctx }
	};

	if (/*availableDialog*/ ctx[1] !== void 0) {
		contentdialog0_props.open = /*availableDialog*/ ctx[1];
	}

	contentdialog0 = new ContentDialog({
			props: contentdialog0_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(contentdialog0, 'open', contentdialog0_open_binding));

	function contentdialog1_open_binding(value) {
		/*contentdialog1_open_binding*/ ctx[15](value);
	}

	let contentdialog1_props = {
		style: "max-height: 100%; overflow: auto;",
		title: /*tt*/ ctx[7]('dialog'),
		$$slots: {
			footer: [create_footer_slot],
			default: [create_default_slot_7]
		},
		$$scope: { ctx }
	};

	if (/*allDialog*/ ctx[0] !== void 0) {
		contentdialog1_props.open = /*allDialog*/ ctx[0];
	}

	contentdialog1 = new ContentDialog({
			props: contentdialog1_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(contentdialog1, 'open', contentdialog1_open_binding));

	textblock0 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0 = new Button({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0.$on("click", /*click_handler_2*/ ctx[16]);

	textblock1 = new TextBlock({
			props: {
				variant: "caption",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	textblock2 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1 = new Button({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1.$on("click", /*click_handler_3*/ ctx[17]);
	let if_block = /*needsRestart*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			create_component(contentdialog0.$$.fragment);
			t0 = space();
			create_component(contentdialog1.$$.fragment);
			t1 = space();
			div0 = element("div");
			create_component(textblock0.$$.fragment);
			t2 = space();
			create_component(button0.$$.fragment);
			t3 = space();
			div1 = element("div");
			create_component(textblock1.$$.fragment);
			t4 = space();
			div2 = element("div");
			create_component(textblock2.$$.fragment);
			t5 = space();
			create_component(button1.$$.fragment);
			t6 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr_dev(div0, "class", "s-option");
			add_location(div0, file, 73, 0, 2038);
			attr_dev(div1, "class", "s-option");
			add_location(div1, file, 79, 0, 2221);
			attr_dev(div2, "class", "s-option");
			add_location(div2, file, 84, 0, 2322);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(contentdialog0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(contentdialog1, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div0, anchor);
			mount_component(textblock0, div0, null);
			append_dev(div0, t2);
			mount_component(button0, div0, null);
			insert_dev(target, t3, anchor);
			insert_dev(target, div1, anchor);
			mount_component(textblock1, div1, null);
			insert_dev(target, t4, anchor);
			insert_dev(target, div2, anchor);
			mount_component(textblock2, div2, null);
			append_dev(div2, t5);
			mount_component(button1, div2, null);
			insert_dev(target, t6, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const contentdialog0_changes = {};

			if (dirty & /*$$scope, availableDialog, $config*/ 8388618) {
				contentdialog0_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open && dirty & /*availableDialog*/ 2) {
				updating_open = true;
				contentdialog0_changes.open = /*availableDialog*/ ctx[1];
				add_flush_callback(() => updating_open = false);
			}

			contentdialog0.$set(contentdialog0_changes);
			const contentdialog1_changes = {};

			if (dirty & /*$$scope, allDialog, $config*/ 8388617) {
				contentdialog1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open_1 && dirty & /*allDialog*/ 1) {
				updating_open_1 = true;
				contentdialog1_changes.open = /*allDialog*/ ctx[0];
				add_flush_callback(() => updating_open_1 = false);
			}

			contentdialog1.$set(contentdialog1_changes);
			const textblock0_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				textblock0_changes.$$scope = { dirty, ctx };
			}

			textblock0.$set(textblock0_changes);
			const button0_changes = {};

			if (dirty & /*$$scope, $config*/ 8388616) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const textblock1_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				textblock1_changes.$$scope = { dirty, ctx };
			}

			textblock1.$set(textblock1_changes);
			const textblock2_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				textblock2_changes.$$scope = { dirty, ctx };
			}

			textblock2.$set(textblock2_changes);
			const button1_changes = {};

			if (dirty & /*$$scope, $config*/ 8388616) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);

			if (/*needsRestart*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*needsRestart*/ 4) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(contentdialog0.$$.fragment, local);
			transition_in(contentdialog1.$$.fragment, local);
			transition_in(textblock0.$$.fragment, local);
			transition_in(button0.$$.fragment, local);
			transition_in(textblock1.$$.fragment, local);
			transition_in(textblock2.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(contentdialog0.$$.fragment, local);
			transition_out(contentdialog1.$$.fragment, local);
			transition_out(textblock0.$$.fragment, local);
			transition_out(button0.$$.fragment, local);
			transition_out(textblock1.$$.fragment, local);
			transition_out(textblock2.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(contentdialog0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(contentdialog1, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div0);
			destroy_component(textblock0);
			destroy_component(button0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div1);
			destroy_component(textblock1);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div2);
			destroy_component(textblock2);
			destroy_component(button1);
			if (detaching) detach_dev(t6);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $config;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Languages', slots, []);
	let { update } = $$props;
	const { t } = window.nereid.i18n;
	const available = window.nereid.i18n.getAvailableTranslations();
	const all = Codes.getAllCodes();

	function tt(key, ...args) {
		return t(`pages.settings.languages.${key}`, ...args);
	}

	let config = getContext('config');
	validate_store(config, 'config');
	component_subscribe($$self, config, value => $$invalidate(3, $config = value));
	let allDialog = location.hash.startsWith('#languagePicker');
	let availableDialog = location.hash.startsWith('#language-for-nereid');
	let needsRestart = false;

	function selectNereidLanguageF(code) {
		return function () {
			set_store_value(config, $config.i18n.lang = code, $config);
			update();
			$$invalidate(2, needsRestart = true);
			$$invalidate(1, availableDialog = false);
		};
	}

	function selectChromiumLanguageF(code) {
		return function () {
			set_store_value(config, $config.i18n.locale = code, $config);

			if (window.nereid.i18n.getSupportedLanguage(code) == code) {
				set_store_value(config, $config.i18n.lang = code, $config);
			}

			update();
			$$invalidate(2, needsRestart = true);
			$$invalidate(0, allDialog = false);
		};
	}

	const writable_props = ['update'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Languages> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(1, availableDialog = false);

	function contentdialog0_open_binding(value) {
		availableDialog = value;
		$$invalidate(1, availableDialog);
	}

	const click_handler_1 = () => $$invalidate(0, allDialog = false);

	function contentdialog1_open_binding(value) {
		allDialog = value;
		$$invalidate(0, allDialog);
	}

	const click_handler_2 = () => $$invalidate(0, allDialog = true);
	const click_handler_3 = () => $$invalidate(1, availableDialog = true);

	$$self.$$set = $$props => {
		if ('update' in $$props) $$invalidate(11, update = $$props.update);
	};

	$$self.$capture_state = () => ({
		RadioButton,
		TextBlock,
		Button,
		ContentDialog,
		InfoBar,
		getContext,
		Codes,
		update,
		t,
		available,
		all,
		tt,
		config,
		allDialog,
		availableDialog,
		needsRestart,
		selectNereidLanguageF,
		selectChromiumLanguageF,
		$config
	});

	$$self.$inject_state = $$props => {
		if ('update' in $$props) $$invalidate(11, update = $$props.update);
		if ('config' in $$props) $$invalidate(8, config = $$props.config);
		if ('allDialog' in $$props) $$invalidate(0, allDialog = $$props.allDialog);
		if ('availableDialog' in $$props) $$invalidate(1, availableDialog = $$props.availableDialog);
		if ('needsRestart' in $$props) $$invalidate(2, needsRestart = $$props.needsRestart);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		allDialog,
		availableDialog,
		needsRestart,
		$config,
		t,
		available,
		all,
		tt,
		config,
		selectNereidLanguageF,
		selectChromiumLanguageF,
		update,
		click_handler,
		contentdialog0_open_binding,
		click_handler_1,
		contentdialog1_open_binding,
		click_handler_2,
		click_handler_3
	];
}

class Languages extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { update: 11 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Languages",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*update*/ ctx[11] === undefined && !('update' in props)) {
			console.warn("<Languages> was created without expected prop 'update'");
		}
	}

	get update() {
		throw new Error("<Languages>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set update(value) {
		throw new Error("<Languages>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Languages;