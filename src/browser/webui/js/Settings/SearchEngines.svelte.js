/* SearchEngines.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_flush_callback,
	add_location,
	append_dev,
	append_styles,
	attr_dev,
	bind,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	globals,
	group_outros,
	init,
	insert_dev,
	is_function,
	mount_component,
	noop,
	safe_not_equal,
	set_data_dev,
	set_store_value,
	space,
	text,
	transition_in,
	transition_out,
	validate_each_argument,
	validate_slots,
	validate_store
} from "nereid://.svelte/internal/index.mjs";

const { Error: Error_1, Object: Object_1, console: console_1 } = globals;

import {
	Expander,
	TextBlock,
	ComboBox,
	Button,
	ContentDialog,
	TextBox
} from "../modules/fluent-svelte/index.js";

import { getContext } from "nereid://.svelte/internal/index.mjs";
import noFirstTime from "nereid://js/nft.js";
const file = "SearchEngines.svelte";

function add_css(target) {
	append_styles(target, "svelte-16di8yi", ".flex.svelte-16di8yi{display:flex;justify-content:space-between;align-items:center;margin-bottom:10px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[34] = list[i];
	child_ctx[36] = i;
	return child_ctx;
}

// (77:4) <TextBlock>
function create_default_slot_23(ctx) {
	let t_1_value = /*tt*/ ctx[10]('dialogs.name') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(77:4) <TextBlock>",
		ctx
	});

	return block;
}

// (81:4) <TextBlock>
function create_default_slot_22(ctx) {
	let t_1_value = /*tt*/ ctx[10]('dialogs.searchURL') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(81:4) <TextBlock>",
		ctx
	});

	return block;
}

// (85:4) <TextBlock>
function create_default_slot_21(ctx) {
	let t_1_value = /*tt*/ ctx[10]('dialogs.suggestURL') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(85:4) <TextBlock>",
		ctx
	});

	return block;
}

// (75:0) <ContentDialog title={tt('dialogs.edit')} closable={false} append={document.body} bind:open={editEngineDialog}>
function create_default_slot_20(ctx) {
	let div0;
	let textblock0;
	let t0;
	let textbox0;
	let updating_value;
	let t1;
	let div1;
	let textblock1;
	let t2;
	let textbox1;
	let updating_value_1;
	let t3;
	let div2;
	let textblock2;
	let t4;
	let textbox2;
	let updating_value_2;
	let current;

	textblock0 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function textbox0_value_binding(value) {
		/*textbox0_value_binding*/ ctx[16](value);
	}

	let textbox0_props = {
		placeholder: /*tt*/ ctx[10]('dialogs.noEmpty')
	};

	if (/*currentEngine*/ ctx[6].name !== void 0) {
		textbox0_props.value = /*currentEngine*/ ctx[6].name;
	}

	textbox0 = new TextBox({ props: textbox0_props, $$inline: true });
	binding_callbacks.push(() => bind(textbox0, 'value', textbox0_value_binding));

	textblock1 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function textbox1_value_binding(value) {
		/*textbox1_value_binding*/ ctx[17](value);
	}

	let textbox1_props = {
		placeholder: /*tt*/ ctx[10]('dialogs.noEmpty')
	};

	if (/*currentEngine*/ ctx[6].searchURL !== void 0) {
		textbox1_props.value = /*currentEngine*/ ctx[6].searchURL;
	}

	textbox1 = new TextBox({ props: textbox1_props, $$inline: true });
	binding_callbacks.push(() => bind(textbox1, 'value', textbox1_value_binding));

	textblock2 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function textbox2_value_binding(value) {
		/*textbox2_value_binding*/ ctx[18](value);
	}

	let textbox2_props = {
		placeholder: /*tt*/ ctx[10]('dialogs.emptyDisablesHints')
	};

	if (/*currentEngine*/ ctx[6].suggestURL !== void 0) {
		textbox2_props.value = /*currentEngine*/ ctx[6].suggestURL;
	}

	textbox2 = new TextBox({ props: textbox2_props, $$inline: true });
	binding_callbacks.push(() => bind(textbox2, 'value', textbox2_value_binding));

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(textblock0.$$.fragment);
			t0 = space();
			create_component(textbox0.$$.fragment);
			t1 = space();
			div1 = element("div");
			create_component(textblock1.$$.fragment);
			t2 = space();
			create_component(textbox1.$$.fragment);
			t3 = space();
			div2 = element("div");
			create_component(textblock2.$$.fragment);
			t4 = space();
			create_component(textbox2.$$.fragment);
			attr_dev(div0, "class", "flex svelte-16di8yi");
			add_location(div0, file, 75, 2, 1751);
			attr_dev(div1, "class", "flex svelte-16di8yi");
			add_location(div1, file, 79, 2, 1919);
			attr_dev(div2, "class", "flex svelte-16di8yi");
			add_location(div2, file, 83, 2, 2097);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(textblock0, div0, null);
			append_dev(div0, t0);
			mount_component(textbox0, div0, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, div1, anchor);
			mount_component(textblock1, div1, null);
			append_dev(div1, t2);
			mount_component(textbox1, div1, null);
			insert_dev(target, t3, anchor);
			insert_dev(target, div2, anchor);
			mount_component(textblock2, div2, null);
			append_dev(div2, t4);
			mount_component(textbox2, div2, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock0_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				textblock0_changes.$$scope = { dirty, ctx };
			}

			textblock0.$set(textblock0_changes);
			const textbox0_changes = {};

			if (!updating_value && dirty[0] & /*currentEngine*/ 64) {
				updating_value = true;
				textbox0_changes.value = /*currentEngine*/ ctx[6].name;
				add_flush_callback(() => updating_value = false);
			}

			textbox0.$set(textbox0_changes);
			const textblock1_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				textblock1_changes.$$scope = { dirty, ctx };
			}

			textblock1.$set(textblock1_changes);
			const textbox1_changes = {};

			if (!updating_value_1 && dirty[0] & /*currentEngine*/ 64) {
				updating_value_1 = true;
				textbox1_changes.value = /*currentEngine*/ ctx[6].searchURL;
				add_flush_callback(() => updating_value_1 = false);
			}

			textbox1.$set(textbox1_changes);
			const textblock2_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				textblock2_changes.$$scope = { dirty, ctx };
			}

			textblock2.$set(textblock2_changes);
			const textbox2_changes = {};

			if (!updating_value_2 && dirty[0] & /*currentEngine*/ 64) {
				updating_value_2 = true;
				textbox2_changes.value = /*currentEngine*/ ctx[6].suggestURL;
				add_flush_callback(() => updating_value_2 = false);
			}

			textbox2.$set(textbox2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock0.$$.fragment, local);
			transition_in(textbox0.$$.fragment, local);
			transition_in(textblock1.$$.fragment, local);
			transition_in(textbox1.$$.fragment, local);
			transition_in(textblock2.$$.fragment, local);
			transition_in(textbox2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock0.$$.fragment, local);
			transition_out(textbox0.$$.fragment, local);
			transition_out(textblock1.$$.fragment, local);
			transition_out(textbox1.$$.fragment, local);
			transition_out(textblock2.$$.fragment, local);
			transition_out(textbox2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(textblock0);
			destroy_component(textbox0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div1);
			destroy_component(textblock1);
			destroy_component(textbox1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div2);
			destroy_component(textblock2);
			destroy_component(textbox2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(75:0) <ContentDialog title={tt('dialogs.edit')} closable={false} append={document.body} bind:open={editEngineDialog}>",
		ctx
	});

	return block;
}

// (90:4) <Button on:click={() => {        Object.assign(currentEngine, backupEngine) // need to undo all changes        currentEngine = null;        editEngineDialog = false;      }}>
function create_default_slot_19(ctx) {
	let t_1_value = /*t*/ ctx[9]('common.cancel') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(90:4) <Button on:click={() => {        Object.assign(currentEngine, backupEngine) // need to undo all changes        currentEngine = null;        editEngineDialog = false;      }}>",
		ctx
	});

	return block;
}

// (95:4) <Button variant="accent" on:click={() => {        $config = $config; // object reference is alredy updated every time a change is made, we have to update the store manually though        update()        editEngineDialog = false;      }} disabled={currentEngine.name == '' || currentEngine.searchURL == ''}>
function create_default_slot_18(ctx) {
	let t_1_value = /*tt*/ ctx[10]('dialogs.save') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(95:4) <Button variant=\\\"accent\\\" on:click={() => {        $config = $config; // object reference is alredy updated every time a change is made, we have to update the store manually though        update()        editEngineDialog = false;      }} disabled={currentEngine.name == '' || currentEngine.searchURL == ''}>",
		ctx
	});

	return block;
}

// (89:2) <svelte:fragment slot="footer">
function create_footer_slot_2(ctx) {
	let button0;
	let t_1;
	let button1;
	let current;

	button0 = new Button({
			props: {
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0.$on("click", /*click_handler*/ ctx[14]);

	button1 = new Button({
			props: {
				variant: "accent",
				disabled: /*currentEngine*/ ctx[6].name == '' || /*currentEngine*/ ctx[6].searchURL == '',
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1.$on("click", /*click_handler_1*/ ctx[15]);

	const block = {
		c: function create() {
			create_component(button0.$$.fragment);
			t_1 = space();
			create_component(button1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(button0, target, anchor);
			insert_dev(target, t_1, anchor);
			mount_component(button1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button0_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};
			if (dirty[0] & /*currentEngine*/ 64) button1_changes.disabled = /*currentEngine*/ ctx[6].name == '' || /*currentEngine*/ ctx[6].searchURL == '';

			if (dirty[1] & /*$$scope*/ 64) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button0, detaching);
			if (detaching) detach_dev(t_1);
			destroy_component(button1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_footer_slot_2.name,
		type: "slot",
		source: "(89:2) <svelte:fragment slot=\\\"footer\\\">",
		ctx
	});

	return block;
}

// (109:2) <TextBlock>
function create_default_slot_17(ctx) {
	let t_1_value = /*tt*/ ctx[10]('dialogs.delete.prompt', { engine: /*currentEngine*/ ctx[6].name }) + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*currentEngine*/ 64 && t_1_value !== (t_1_value = /*tt*/ ctx[10]('dialogs.delete.prompt', { engine: /*currentEngine*/ ctx[6].name }) + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(109:2) <TextBlock>",
		ctx
	});

	return block;
}

// (103:0) <ContentDialog    title={tt('dialogs.delete.title')}    append={document.body}    bind:open={delEngineDialog}    on:backdropclick={() => { currentEngine = null; delEngineDialog = false; }}  >
function create_default_slot_16(ctx) {
	let textblock;
	let current;

	textblock = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(textblock.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(textblock, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock_changes = {};

			if (dirty[0] & /*currentEngine*/ 64 | dirty[1] & /*$$scope*/ 64) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(textblock, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(103:0) <ContentDialog    title={tt('dialogs.delete.title')}    append={document.body}    bind:open={delEngineDialog}    on:backdropclick={() => { currentEngine = null; delEngineDialog = false; }}  >",
		ctx
	});

	return block;
}

// (112:4) <Button on:click={() => { currentEngine = null; delEngineDialog = false }}>
function create_default_slot_15(ctx) {
	let t_1_value = /*t*/ ctx[9]('common.cancel') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(112:4) <Button on:click={() => { currentEngine = null; delEngineDialog = false }}>",
		ctx
	});

	return block;
}

// (113:4) <Button on:click={() => {        let i = $config.search.available.indexOf(currentEngine);        if (i == -1) throw(new Error("This should NOT happen"))          $config.search.available.splice(i, 1);        if (i <= selectedIndex) {          // shift the selected engine so it stays the same          selectedIndex--;          $config.search.selectedIndex--;        }        $config = $config;        update()        delEngineDialog = false;      }}>
function create_default_slot_14(ctx) {
	let t_1_value = /*tt*/ ctx[10]('dialogs.delete.delete-button') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(113:4) <Button on:click={() => {        let i = $config.search.available.indexOf(currentEngine);        if (i == -1) throw(new Error(\\\"This should NOT happen\\\"))          $config.search.available.splice(i, 1);        if (i <= selectedIndex) {          // shift the selected engine so it stays the same          selectedIndex--;          $config.search.selectedIndex--;        }        $config = $config;        update()        delEngineDialog = false;      }}>",
		ctx
	});

	return block;
}

// (111:2) <svelte:fragment slot="footer">
function create_footer_slot_1(ctx) {
	let button0;
	let t_1;
	let button1;
	let current;

	button0 = new Button({
			props: {
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0.$on("click", /*click_handler_2*/ ctx[20]);

	button1 = new Button({
			props: {
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1.$on("click", /*click_handler_3*/ ctx[21]);

	const block = {
		c: function create() {
			create_component(button0.$$.fragment);
			t_1 = space();
			create_component(button1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(button0, target, anchor);
			insert_dev(target, t_1, anchor);
			mount_component(button1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button0_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button0, detaching);
			if (detaching) detach_dev(t_1);
			destroy_component(button1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_footer_slot_1.name,
		type: "slot",
		source: "(111:2) <svelte:fragment slot=\\\"footer\\\">",
		ctx
	});

	return block;
}

// (131:2) <TextBlock>
function create_default_slot_13(ctx) {
	let t_1_value = /*tt*/ ctx[10]('defaultSE') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(131:2) <TextBlock>",
		ctx
	});

	return block;
}

// (138:2) <TextBlock variant="bodyStrong">
function create_default_slot_12(ctx) {
	let t_1_value = /*tt*/ ctx[10]('manage') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(138:2) <TextBlock variant=\\\"bodyStrong\\\">",
		ctx
	});

	return block;
}

// (137:0) <Expander>
function create_default_slot_11(ctx) {
	let textblock;
	let current;

	textblock = new TextBlock({
			props: {
				variant: "bodyStrong",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(textblock.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(textblock, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(textblock, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(137:0) <Expander>",
		ctx
	});

	return block;
}

// (144:10) <TextBlock variant="caption" style="color: gray;">
function create_default_slot_10(ctx) {
	let t0_value = /*tt*/ ctx[10]('host') + "";
	let t0;
	let t1;
	let t2_value = getHost(/*SE*/ ctx[34].searchURL) + "";
	let t2;

	const block = {
		c: function create() {
			t0 = text(t0_value);
			t1 = space();
			t2 = text(t2_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, t2, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*$config*/ 4 && t2_value !== (t2_value = getHost(/*SE*/ ctx[34].searchURL) + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(t2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(144:10) <TextBlock variant=\\\"caption\\\" style=\\\"color: gray;\\\">",
		ctx
	});

	return block;
}

// (142:8) <TextBlock>
function create_default_slot_9(ctx) {
	let t0_value = /*SE*/ ctx[34].name + "";
	let t0;
	let br;
	let t1;
	let textblock;
	let current;

	textblock = new TextBlock({
			props: {
				variant: "caption",
				style: "color: gray;",
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = text(t0_value);
			br = element("br");
			t1 = space();
			create_component(textblock.$$.fragment);
			add_location(br, file, 142, 19, 4351);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, br, anchor);
			insert_dev(target, t1, anchor);
			mount_component(textblock, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty[0] & /*$config*/ 4) && t0_value !== (t0_value = /*SE*/ ctx[34].name + "")) set_data_dev(t0, t0_value);
			const textblock_changes = {};

			if (dirty[0] & /*$config*/ 4 | dirty[1] & /*$$scope*/ 64) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br);
			if (detaching) detach_dev(t1);
			destroy_component(textblock, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(142:8) <TextBlock>",
		ctx
	});

	return block;
}

// (149:10) <Button on:click={editEngineF(SE, i)}>
function create_default_slot_8(ctx) {
	let t_1_value = /*tt*/ ctx[10]('button-edit') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(149:10) <Button on:click={editEngineF(SE, i)}>",
		ctx
	});

	return block;
}

// (152:10) <Button on:click={delEngineF(SE, i)} disabled={items.length == 1}>
function create_default_slot_7(ctx) {
	let t_1_value = /*tt*/ ctx[10]('button-delete') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(152:10) <Button on:click={delEngineF(SE, i)} disabled={items.length == 1}>",
		ctx
	});

	return block;
}

// (140:4) {#each $config.search.available as SE, i}
function create_each_block(ctx) {
	let div1;
	let textblock;
	let t0;
	let div0;
	let button0;
	let t1;
	let button1;
	let current;

	textblock = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0 = new Button({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0.$on("click", function () {
		if (is_function(/*editEngineF*/ ctx[12](/*SE*/ ctx[34], /*i*/ ctx[36]))) /*editEngineF*/ ctx[12](/*SE*/ ctx[34], /*i*/ ctx[36]).apply(this, arguments);
	});

	button1 = new Button({
			props: {
				disabled: /*items*/ ctx[3].length == 1,
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1.$on("click", function () {
		if (is_function(/*delEngineF*/ ctx[13](/*SE*/ ctx[34], /*i*/ ctx[36]))) /*delEngineF*/ ctx[13](/*SE*/ ctx[34], /*i*/ ctx[36]).apply(this, arguments);
	});

	const block = {
		c: function create() {
			div1 = element("div");
			create_component(textblock.$$.fragment);
			t0 = space();
			div0 = element("div");
			create_component(button0.$$.fragment);
			t1 = space();
			create_component(button1.$$.fragment);
			add_location(div0, file, 147, 8, 4523);
			attr_dev(div1, "class", "flex svelte-16di8yi");
			add_location(div1, file, 140, 6, 4291);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			mount_component(textblock, div1, null);
			append_dev(div1, t0);
			append_dev(div1, div0);
			mount_component(button0, div0, null);
			append_dev(div0, t1);
			mount_component(button1, div0, null);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const textblock_changes = {};

			if (dirty[0] & /*$config*/ 4 | dirty[1] & /*$$scope*/ 64) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
			const button0_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};
			if (dirty[0] & /*items*/ 8) button1_changes.disabled = /*items*/ ctx[3].length == 1;

			if (dirty[1] & /*$$scope*/ 64) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(textblock);
			destroy_component(button0);
			destroy_component(button1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(140:4) {#each $config.search.available as SE, i}",
		ctx
	});

	return block;
}

// (159:4) <Button variant="accent" on:click={() => {currentEngine = {}; newEngineDialog = true}}>
function create_default_slot_6(ctx) {
	let t_1_value = /*tt*/ ctx[10]('button-add') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(159:4) <Button variant=\\\"accent\\\" on:click={() => {currentEngine = {}; newEngineDialog = true}}>",
		ctx
	});

	return block;
}

// (168:8) <TextBlock>
function create_default_slot_5(ctx) {
	let t_1_value = /*tt*/ ctx[10]('dialogs.name') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(168:8) <TextBlock>",
		ctx
	});

	return block;
}

// (172:8) <TextBlock>
function create_default_slot_4(ctx) {
	let t_1_value = /*tt*/ ctx[10]('dialogs.searchURL') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(172:8) <TextBlock>",
		ctx
	});

	return block;
}

// (176:8) <TextBlock>
function create_default_slot_3(ctx) {
	let t_1_value = /*tt*/ ctx[10]('dialogs.suggestURL') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(176:8) <TextBlock>",
		ctx
	});

	return block;
}

// (162:4) <ContentDialog        title={tt('dialogs.add')}        bind:open={newEngineDialog} append={document.body}        on:close={() => currentEngine = null}      >
function create_default_slot_2(ctx) {
	let div0;
	let textblock0;
	let t0;
	let textbox0;
	let updating_value;
	let t1;
	let div1;
	let textblock1;
	let t2;
	let textbox1;
	let updating_value_1;
	let t3;
	let div2;
	let textblock2;
	let t4;
	let textbox2;
	let updating_value_2;
	let current;

	textblock0 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function textbox0_value_binding_1(value) {
		/*textbox0_value_binding_1*/ ctx[28](value);
	}

	let textbox0_props = {
		placeholder: /*tt*/ ctx[10]('dialogs.noEmpty')
	};

	if (/*currentEngine*/ ctx[6].name !== void 0) {
		textbox0_props.value = /*currentEngine*/ ctx[6].name;
	}

	textbox0 = new TextBox({ props: textbox0_props, $$inline: true });
	binding_callbacks.push(() => bind(textbox0, 'value', textbox0_value_binding_1));

	textblock1 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function textbox1_value_binding_1(value) {
		/*textbox1_value_binding_1*/ ctx[29](value);
	}

	let textbox1_props = {
		placeholder: /*tt*/ ctx[10]('dialogs.noEmpty')
	};

	if (/*currentEngine*/ ctx[6].searchURL !== void 0) {
		textbox1_props.value = /*currentEngine*/ ctx[6].searchURL;
	}

	textbox1 = new TextBox({ props: textbox1_props, $$inline: true });
	binding_callbacks.push(() => bind(textbox1, 'value', textbox1_value_binding_1));

	textblock2 = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function textbox2_value_binding_1(value) {
		/*textbox2_value_binding_1*/ ctx[30](value);
	}

	let textbox2_props = {
		placeholder: /*tt*/ ctx[10]('dialogs.emptyDisablesHints')
	};

	if (/*currentEngine*/ ctx[6].suggestURL !== void 0) {
		textbox2_props.value = /*currentEngine*/ ctx[6].suggestURL;
	}

	textbox2 = new TextBox({ props: textbox2_props, $$inline: true });
	binding_callbacks.push(() => bind(textbox2, 'value', textbox2_value_binding_1));

	const block = {
		c: function create() {
			div0 = element("div");
			create_component(textblock0.$$.fragment);
			t0 = space();
			create_component(textbox0.$$.fragment);
			t1 = space();
			div1 = element("div");
			create_component(textblock1.$$.fragment);
			t2 = space();
			create_component(textbox1.$$.fragment);
			t3 = space();
			div2 = element("div");
			create_component(textblock2.$$.fragment);
			t4 = space();
			create_component(textbox2.$$.fragment);
			attr_dev(div0, "class", "flex svelte-16di8yi");
			add_location(div0, file, 166, 6, 5125);
			attr_dev(div1, "class", "flex svelte-16di8yi");
			add_location(div1, file, 170, 6, 5309);
			attr_dev(div2, "class", "flex svelte-16di8yi");
			add_location(div2, file, 174, 6, 5503);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			mount_component(textblock0, div0, null);
			append_dev(div0, t0);
			mount_component(textbox0, div0, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, div1, anchor);
			mount_component(textblock1, div1, null);
			append_dev(div1, t2);
			mount_component(textbox1, div1, null);
			insert_dev(target, t3, anchor);
			insert_dev(target, div2, anchor);
			mount_component(textblock2, div2, null);
			append_dev(div2, t4);
			mount_component(textbox2, div2, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock0_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				textblock0_changes.$$scope = { dirty, ctx };
			}

			textblock0.$set(textblock0_changes);
			const textbox0_changes = {};

			if (!updating_value && dirty[0] & /*currentEngine*/ 64) {
				updating_value = true;
				textbox0_changes.value = /*currentEngine*/ ctx[6].name;
				add_flush_callback(() => updating_value = false);
			}

			textbox0.$set(textbox0_changes);
			const textblock1_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				textblock1_changes.$$scope = { dirty, ctx };
			}

			textblock1.$set(textblock1_changes);
			const textbox1_changes = {};

			if (!updating_value_1 && dirty[0] & /*currentEngine*/ 64) {
				updating_value_1 = true;
				textbox1_changes.value = /*currentEngine*/ ctx[6].searchURL;
				add_flush_callback(() => updating_value_1 = false);
			}

			textbox1.$set(textbox1_changes);
			const textblock2_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				textblock2_changes.$$scope = { dirty, ctx };
			}

			textblock2.$set(textblock2_changes);
			const textbox2_changes = {};

			if (!updating_value_2 && dirty[0] & /*currentEngine*/ 64) {
				updating_value_2 = true;
				textbox2_changes.value = /*currentEngine*/ ctx[6].suggestURL;
				add_flush_callback(() => updating_value_2 = false);
			}

			textbox2.$set(textbox2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock0.$$.fragment, local);
			transition_in(textbox0.$$.fragment, local);
			transition_in(textblock1.$$.fragment, local);
			transition_in(textbox1.$$.fragment, local);
			transition_in(textblock2.$$.fragment, local);
			transition_in(textbox2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock0.$$.fragment, local);
			transition_out(textbox0.$$.fragment, local);
			transition_out(textblock1.$$.fragment, local);
			transition_out(textbox1.$$.fragment, local);
			transition_out(textblock2.$$.fragment, local);
			transition_out(textbox2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(textblock0);
			destroy_component(textbox0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div1);
			destroy_component(textblock1);
			destroy_component(textbox1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div2);
			destroy_component(textblock2);
			destroy_component(textbox2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(162:4) <ContentDialog        title={tt('dialogs.add')}        bind:open={newEngineDialog} append={document.body}        on:close={() => currentEngine = null}      >",
		ctx
	});

	return block;
}

// (180:8) <Button on:click={() => newEngineDialog = false}>
function create_default_slot_1(ctx) {
	let t_1_value = /*t*/ ctx[9]('common.cancel') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(180:8) <Button on:click={() => newEngineDialog = false}>",
		ctx
	});

	return block;
}

// (183:8) <Button on:click={() => {            console.log('setting $available.push()');            $config.search.available.push({ ...currentEngine, suggestAlgorithm: 'find' });            $config = $config;              update()              currentEngine = null;            newEngineDialog = false;          }} variant="accent" disabled={currentEngine.name == '' || currentEngine.searchURL == ''}>
function create_default_slot(ctx) {
	let t_1_value = /*t*/ ctx[9]('common.done') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(183:8) <Button on:click={() => {            console.log('setting $available.push()');            $config.search.available.push({ ...currentEngine, suggestAlgorithm: 'find' });            $config = $config;              update()              currentEngine = null;            newEngineDialog = false;          }} variant=\\\"accent\\\" disabled={currentEngine.name == '' || currentEngine.searchURL == ''}>",
		ctx
	});

	return block;
}

// (179:6) <svelte:fragment slot="footer">
function create_footer_slot(ctx) {
	let button0;
	let t_1;
	let button1;
	let current;

	button0 = new Button({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0.$on("click", /*click_handler_5*/ ctx[26]);

	button1 = new Button({
			props: {
				variant: "accent",
				disabled: /*currentEngine*/ ctx[6].name == '' || /*currentEngine*/ ctx[6].searchURL == '',
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1.$on("click", /*click_handler_6*/ ctx[27]);

	const block = {
		c: function create() {
			create_component(button0.$$.fragment);
			t_1 = space();
			create_component(button1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(button0, target, anchor);
			insert_dev(target, t_1, anchor);
			mount_component(button1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button0_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};
			if (dirty[0] & /*currentEngine*/ 64) button1_changes.disabled = /*currentEngine*/ ctx[6].name == '' || /*currentEngine*/ ctx[6].searchURL == '';

			if (dirty[1] & /*$$scope*/ 64) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button0, detaching);
			if (detaching) detach_dev(t_1);
			destroy_component(button1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_footer_slot.name,
		type: "slot",
		source: "(179:6) <svelte:fragment slot=\\\"footer\\\">",
		ctx
	});

	return block;
}

// (139:2) <svelte:fragment slot="content">
function create_content_slot(ctx) {
	let t0;
	let br;
	let t1;
	let button;
	let t2;
	let contentdialog;
	let updating_open;
	let current;
	let each_value = /*$config*/ ctx[2].search.available;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	button = new Button({
			props: {
				variant: "accent",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler_4*/ ctx[25]);

	function contentdialog_open_binding(value) {
		/*contentdialog_open_binding*/ ctx[31](value);
	}

	let contentdialog_props = {
		title: /*tt*/ ctx[10]('dialogs.add'),
		append: document.body,
		$$slots: {
			footer: [create_footer_slot],
			default: [create_default_slot_2]
		},
		$$scope: { ctx }
	};

	if (/*newEngineDialog*/ ctx[8] !== void 0) {
		contentdialog_props.open = /*newEngineDialog*/ ctx[8];
	}

	contentdialog = new ContentDialog({
			props: contentdialog_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(contentdialog, 'open', contentdialog_open_binding));
	contentdialog.$on("close", /*close_handler*/ ctx[32]);

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			br = element("br");
			t1 = space();
			create_component(button.$$.fragment);
			t2 = space();
			create_component(contentdialog.$$.fragment);
			add_location(br, file, 157, 4, 4815);
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, t0, anchor);
			insert_dev(target, br, anchor);
			insert_dev(target, t1, anchor);
			mount_component(button, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(contentdialog, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*items, delEngineF, $config, tt, editEngineF*/ 13324) {
				each_value = /*$config*/ ctx[2].search.available;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(t0.parentNode, t0);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			const button_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const contentdialog_changes = {};

			if (dirty[0] & /*currentEngine, $config, update, newEngineDialog*/ 325 | dirty[1] & /*$$scope*/ 64) {
				contentdialog_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open && dirty[0] & /*newEngineDialog*/ 256) {
				updating_open = true;
				contentdialog_changes.open = /*newEngineDialog*/ ctx[8];
				add_flush_callback(() => updating_open = false);
			}

			contentdialog.$set(contentdialog_changes);
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(button.$$.fragment, local);
			transition_in(contentdialog.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(button.$$.fragment, local);
			transition_out(contentdialog.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(br);
			if (detaching) detach_dev(t1);
			destroy_component(button, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(contentdialog, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_content_slot.name,
		type: "slot",
		source: "(139:2) <svelte:fragment slot=\\\"content\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let contentdialog0;
	let updating_open;
	let t0;
	let contentdialog1;
	let updating_open_1;
	let t1;
	let div;
	let textblock;
	let t2;
	let combobox;
	let updating_value;
	let t3;
	let expander;
	let current;

	function contentdialog0_open_binding(value) {
		/*contentdialog0_open_binding*/ ctx[19](value);
	}

	let contentdialog0_props = {
		title: /*tt*/ ctx[10]('dialogs.edit'),
		closable: false,
		append: document.body,
		$$slots: {
			footer: [create_footer_slot_2],
			default: [create_default_slot_20]
		},
		$$scope: { ctx }
	};

	if (/*editEngineDialog*/ ctx[4] !== void 0) {
		contentdialog0_props.open = /*editEngineDialog*/ ctx[4];
	}

	contentdialog0 = new ContentDialog({
			props: contentdialog0_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(contentdialog0, 'open', contentdialog0_open_binding));

	function contentdialog1_open_binding(value) {
		/*contentdialog1_open_binding*/ ctx[22](value);
	}

	let contentdialog1_props = {
		title: /*tt*/ ctx[10]('dialogs.delete.title'),
		append: document.body,
		$$slots: {
			footer: [create_footer_slot_1],
			default: [create_default_slot_16]
		},
		$$scope: { ctx }
	};

	if (/*delEngineDialog*/ ctx[7] !== void 0) {
		contentdialog1_props.open = /*delEngineDialog*/ ctx[7];
	}

	contentdialog1 = new ContentDialog({
			props: contentdialog1_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(contentdialog1, 'open', contentdialog1_open_binding));
	contentdialog1.$on("backdropclick", /*backdropclick_handler*/ ctx[23]);

	textblock = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function combobox_value_binding(value) {
		/*combobox_value_binding*/ ctx[24](value);
	}

	let combobox_props = { items: /*items*/ ctx[3] };

	if (/*selectedIndex*/ ctx[1] !== void 0) {
		combobox_props.value = /*selectedIndex*/ ctx[1];
	}

	combobox = new ComboBox({ props: combobox_props, $$inline: true });
	binding_callbacks.push(() => bind(combobox, 'value', combobox_value_binding));

	expander = new Expander({
			props: {
				$$slots: {
					content: [create_content_slot],
					default: [create_default_slot_11]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(contentdialog0.$$.fragment);
			t0 = space();
			create_component(contentdialog1.$$.fragment);
			t1 = space();
			div = element("div");
			create_component(textblock.$$.fragment);
			t2 = space();
			create_component(combobox.$$.fragment);
			t3 = space();
			create_component(expander.$$.fragment);
			attr_dev(div, "class", "s-option");
			add_location(div, file, 129, 0, 3889);
		},
		l: function claim(nodes) {
			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(contentdialog0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(contentdialog1, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div, anchor);
			mount_component(textblock, div, null);
			append_dev(div, t2);
			mount_component(combobox, div, null);
			insert_dev(target, t3, anchor);
			mount_component(expander, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const contentdialog0_changes = {};

			if (dirty[0] & /*currentEngine, $config, update, editEngineDialog, backupEngine*/ 117 | dirty[1] & /*$$scope*/ 64) {
				contentdialog0_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open && dirty[0] & /*editEngineDialog*/ 16) {
				updating_open = true;
				contentdialog0_changes.open = /*editEngineDialog*/ ctx[4];
				add_flush_callback(() => updating_open = false);
			}

			contentdialog0.$set(contentdialog0_changes);
			const contentdialog1_changes = {};

			if (dirty[0] & /*$config, currentEngine, selectedIndex, update, delEngineDialog*/ 199 | dirty[1] & /*$$scope*/ 64) {
				contentdialog1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open_1 && dirty[0] & /*delEngineDialog*/ 128) {
				updating_open_1 = true;
				contentdialog1_changes.open = /*delEngineDialog*/ ctx[7];
				add_flush_callback(() => updating_open_1 = false);
			}

			contentdialog1.$set(contentdialog1_changes);
			const textblock_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
			const combobox_changes = {};
			if (dirty[0] & /*items*/ 8) combobox_changes.items = /*items*/ ctx[3];

			if (!updating_value && dirty[0] & /*selectedIndex*/ 2) {
				updating_value = true;
				combobox_changes.value = /*selectedIndex*/ ctx[1];
				add_flush_callback(() => updating_value = false);
			}

			combobox.$set(combobox_changes);
			const expander_changes = {};

			if (dirty[0] & /*newEngineDialog, currentEngine, $config, update, items*/ 333 | dirty[1] & /*$$scope*/ 64) {
				expander_changes.$$scope = { dirty, ctx };
			}

			expander.$set(expander_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(contentdialog0.$$.fragment, local);
			transition_in(contentdialog1.$$.fragment, local);
			transition_in(textblock.$$.fragment, local);
			transition_in(combobox.$$.fragment, local);
			transition_in(expander.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(contentdialog0.$$.fragment, local);
			transition_out(contentdialog1.$$.fragment, local);
			transition_out(textblock.$$.fragment, local);
			transition_out(combobox.$$.fragment, local);
			transition_out(expander.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(contentdialog0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(contentdialog1, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div);
			destroy_component(textblock);
			destroy_component(combobox);
			if (detaching) detach_dev(t3);
			destroy_component(expander, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function getHost(url) {
	try {
		let { hostname } = new URL(url);
		return hostname;
	} catch(e) {
		return `[Error: ${e}]`;
	}
}

function instance($$self, $$props, $$invalidate) {
	let $config;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('SearchEngines', slots, []);
	let { update } = $$props;
	const { t } = window.nereid.i18n;

	function tt(key, ...args) {
		return t(`pages.settings.search.${key}`, ...args);
	}

	let config = getContext('config');
	validate_store(config, 'config');
	component_subscribe($$self, config, value => $$invalidate(2, $config = value));
	let selectedIndex = $config.search.selectedIndex;
	let items = [];
	let editEngineDialog = false;
	let backupEngine = null;
	let currentEngine = null;
	let delEngineDialog = false;
	let newEngineDialog = false;

	const handleSelect = noFirstTime(() => {
		console.log('selecting', selectedIndex);
		set_store_value(config, $config.search.selectedIndex = selectedIndex, $config);
		update();
	});

	function editEngineF(engine) {
		return function () {
			$$invalidate(6, currentEngine = engine);
			$$invalidate(5, backupEngine = Object.assign({}, engine));
			$$invalidate(4, editEngineDialog = true);
		};
	}

	function delEngineF(engine) {
		return function () {
			$$invalidate(6, currentEngine = engine);
			$$invalidate(5, backupEngine = Object.assign({}, engine));
			$$invalidate(7, delEngineDialog = true);
		};
	}

	const writable_props = ['update'];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<SearchEngines> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		Object.assign(currentEngine, backupEngine); // need to undo all changes
		$$invalidate(6, currentEngine = null);
		$$invalidate(4, editEngineDialog = false);
	};

	const click_handler_1 = () => {
		config.set($config); // object reference is alredy updated every time a change is made, we have to update the store manually though
		update();
		$$invalidate(4, editEngineDialog = false);
	};

	function textbox0_value_binding(value) {
		if ($$self.$$.not_equal(currentEngine.name, value)) {
			currentEngine.name = value;
			$$invalidate(6, currentEngine);
		}
	}

	function textbox1_value_binding(value) {
		if ($$self.$$.not_equal(currentEngine.searchURL, value)) {
			currentEngine.searchURL = value;
			$$invalidate(6, currentEngine);
		}
	}

	function textbox2_value_binding(value) {
		if ($$self.$$.not_equal(currentEngine.suggestURL, value)) {
			currentEngine.suggestURL = value;
			$$invalidate(6, currentEngine);
		}
	}

	function contentdialog0_open_binding(value) {
		editEngineDialog = value;
		$$invalidate(4, editEngineDialog);
	}

	const click_handler_2 = () => {
		$$invalidate(6, currentEngine = null);
		$$invalidate(7, delEngineDialog = false);
	};

	const click_handler_3 = () => {
		let i = $config.search.available.indexOf(currentEngine);
		if (i == -1) throw new Error("This should NOT happen");
		$config.search.available.splice(i, 1);

		if (i <= selectedIndex) {
			// shift the selected engine so it stays the same
			$$invalidate(1, selectedIndex--, selectedIndex);

			set_store_value(config, $config.search.selectedIndex--, $config);
		}

		config.set($config);
		update();
		$$invalidate(7, delEngineDialog = false);
	};

	function contentdialog1_open_binding(value) {
		delEngineDialog = value;
		$$invalidate(7, delEngineDialog);
	}

	const backdropclick_handler = () => {
		$$invalidate(6, currentEngine = null);
		$$invalidate(7, delEngineDialog = false);
	};

	function combobox_value_binding(value) {
		selectedIndex = value;
		$$invalidate(1, selectedIndex);
	}

	const click_handler_4 = () => {
		$$invalidate(6, currentEngine = {});
		$$invalidate(8, newEngineDialog = true);
	};

	const click_handler_5 = () => $$invalidate(8, newEngineDialog = false);

	const click_handler_6 = () => {
		console.log('setting $available.push()');

		$config.search.available.push({
			...currentEngine,
			suggestAlgorithm: 'find'
		});

		config.set($config);
		update();
		$$invalidate(6, currentEngine = null);
		$$invalidate(8, newEngineDialog = false);
	};

	function textbox0_value_binding_1(value) {
		if ($$self.$$.not_equal(currentEngine.name, value)) {
			currentEngine.name = value;
			$$invalidate(6, currentEngine);
		}
	}

	function textbox1_value_binding_1(value) {
		if ($$self.$$.not_equal(currentEngine.searchURL, value)) {
			currentEngine.searchURL = value;
			$$invalidate(6, currentEngine);
		}
	}

	function textbox2_value_binding_1(value) {
		if ($$self.$$.not_equal(currentEngine.suggestURL, value)) {
			currentEngine.suggestURL = value;
			$$invalidate(6, currentEngine);
		}
	}

	function contentdialog_open_binding(value) {
		newEngineDialog = value;
		$$invalidate(8, newEngineDialog);
	}

	const close_handler = () => $$invalidate(6, currentEngine = null);

	$$self.$$set = $$props => {
		if ('update' in $$props) $$invalidate(0, update = $$props.update);
	};

	$$self.$capture_state = () => ({
		Expander,
		TextBlock,
		ComboBox,
		Button,
		ContentDialog,
		TextBox,
		getContext,
		noFirstTime,
		update,
		t,
		tt,
		config,
		selectedIndex,
		items,
		editEngineDialog,
		backupEngine,
		currentEngine,
		delEngineDialog,
		newEngineDialog,
		handleSelect,
		getHost,
		editEngineF,
		delEngineF,
		$config
	});

	$$self.$inject_state = $$props => {
		if ('update' in $$props) $$invalidate(0, update = $$props.update);
		if ('config' in $$props) $$invalidate(11, config = $$props.config);
		if ('selectedIndex' in $$props) $$invalidate(1, selectedIndex = $$props.selectedIndex);
		if ('items' in $$props) $$invalidate(3, items = $$props.items);
		if ('editEngineDialog' in $$props) $$invalidate(4, editEngineDialog = $$props.editEngineDialog);
		if ('backupEngine' in $$props) $$invalidate(5, backupEngine = $$props.backupEngine);
		if ('currentEngine' in $$props) $$invalidate(6, currentEngine = $$props.currentEngine);
		if ('delEngineDialog' in $$props) $$invalidate(7, delEngineDialog = $$props.delEngineDialog);
		if ('newEngineDialog' in $$props) $$invalidate(8, newEngineDialog = $$props.newEngineDialog);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*$config*/ 4) {
			$: $$invalidate(3, items = $config.search.available.map(({ name }, i) => ({ name, value: i })));
		}

		if ($$self.$$.dirty[0] & /*selectedIndex*/ 2) {
			$: {
				selectedIndex;
				handleSelect();
			}
		}
	};

	return [
		update,
		selectedIndex,
		$config,
		items,
		editEngineDialog,
		backupEngine,
		currentEngine,
		delEngineDialog,
		newEngineDialog,
		t,
		tt,
		config,
		editEngineF,
		delEngineF,
		click_handler,
		click_handler_1,
		textbox0_value_binding,
		textbox1_value_binding,
		textbox2_value_binding,
		contentdialog0_open_binding,
		click_handler_2,
		click_handler_3,
		contentdialog1_open_binding,
		backdropclick_handler,
		combobox_value_binding,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		textbox0_value_binding_1,
		textbox1_value_binding_1,
		textbox2_value_binding_1,
		contentdialog_open_binding,
		close_handler
	];
}

class SearchEngines extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { update: 0 }, add_css, [-1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SearchEngines",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*update*/ ctx[0] === undefined && !('update' in props)) {
			console_1.warn("<SearchEngines> was created without expected prop 'update'");
		}
	}

	get update() {
		throw new Error_1("<SearchEngines>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set update(value) {
		throw new Error_1("<SearchEngines>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default SearchEngines;