/* SiteSettings.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_flush_callback,
	add_location,
	add_render_callback,
	append_dev,
	append_styles,
	attr_dev,
	bind,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	create_in_transition,
	destroy_component,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	empty,
	globals,
	group_outros,
	init,
	insert_dev,
	is_function,
	listen_dev,
	mount_component,
	noop,
	safe_not_equal,
	set_data_dev,
	set_store_value,
	space,
	text,
	transition_in,
	transition_out,
	validate_each_argument,
	validate_slots,
	validate_store
} from "nereid://.svelte/internal/index.mjs";

const { Object: Object_1, console: console_1 } = globals;

import {
	ListItem,
	TextBlock,
	ContentDialog,
	IconButton,
	ToggleSwitch,
	TextBox,
	AutoSuggestBox,
	Button,
	ComboBox
} from "../../modules/fluent-svelte/index.js";

import { afterUpdate, getContext } from "nereid://.svelte/internal/index.mjs";
import { ArrowBack } from "nereid://js/icons.js";
import { fly } from "nereid://.svelte/transition/index.mjs";
const file = "SiteSettings.svelte";

function add_css(target) {
	append_styles(target, "svelte-1d9xv3y", ".wrapper.svelte-1d9xv3y{position:relative}.space.svelte-1d9xv3y{margin-block:30px}.text-center.svelte-1d9xv3y{text-align:center}.flex.svelte-1d9xv3y{display:flex}.flex.col.svelte-1d9xv3y{flex-direction:column}.permission.svelte-1d9xv3y{display:flex;flex-direction:column;margin-block:20px}.perm-info.svelte-1d9xv3y{display:flex;align-items:center;justify-content:space-between;margin-bottom:2px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[29] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[32] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[35] = list[i];
	return child_ctx;
}

// (148:2) {#if mainPage}
function create_if_block_4(ctx) {
	let div2;
	let textblock0;
	let t0;
	let div0;
	let t1;
	let listitem0;
	let t2;
	let textblock1;
	let t3;
	let div1;
	let t4;
	let listitem1;
	let t5;
	let textblock2;
	let div2_intro;
	let current;

	textblock0 = new TextBlock({
			props: {
				variant: "title",
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	listitem0 = new ListItem({
			props: {
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	listitem0.$on("click", /*click_handler*/ ctx[16]);

	textblock1 = new TextBlock({
			props: {
				variant: "caption",
				style: "color: gray; margin-inline: calc(5px + 12px)",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	listitem1 = new ListItem({
			props: {
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	listitem1.$on("click", /*click_handler_1*/ ctx[17]);

	textblock2 = new TextBlock({
			props: {
				variant: "caption",
				style: "color: gray; margin-inline: calc(5px + 12px)",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div2 = element("div");
			create_component(textblock0.$$.fragment);
			t0 = space();
			div0 = element("div");
			t1 = space();
			create_component(listitem0.$$.fragment);
			t2 = space();
			create_component(textblock1.$$.fragment);
			t3 = space();
			div1 = element("div");
			t4 = space();
			create_component(listitem1.$$.fragment);
			t5 = space();
			create_component(textblock2.$$.fragment);
			attr_dev(div0, "class", "space svelte-1d9xv3y");
			add_location(div0, file, 152, 6, 4301);
			attr_dev(div1, "class", "separator");
			add_location(div1, file, 159, 6, 4614);
			attr_dev(div2, "class", "page");
			add_location(div2, file, 148, 4, 4163);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			mount_component(textblock0, div2, null);
			append_dev(div2, t0);
			append_dev(div2, div0);
			append_dev(div2, t1);
			mount_component(listitem0, div2, null);
			append_dev(div2, t2);
			mount_component(textblock1, div2, null);
			append_dev(div2, t3);
			append_dev(div2, div1);
			append_dev(div2, t4);
			mount_component(listitem1, div2, null);
			append_dev(div2, t5);
			mount_component(textblock2, div2, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock0_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				textblock0_changes.$$scope = { dirty, ctx };
			}

			textblock0.$set(textblock0_changes);
			const listitem0_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				listitem0_changes.$$scope = { dirty, ctx };
			}

			listitem0.$set(listitem0_changes);
			const textblock1_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				textblock1_changes.$$scope = { dirty, ctx };
			}

			textblock1.$set(textblock1_changes);
			const listitem1_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				listitem1_changes.$$scope = { dirty, ctx };
			}

			listitem1.$set(listitem1_changes);
			const textblock2_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				textblock2_changes.$$scope = { dirty, ctx };
			}

			textblock2.$set(textblock2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock0.$$.fragment, local);
			transition_in(listitem0.$$.fragment, local);
			transition_in(textblock1.$$.fragment, local);
			transition_in(listitem1.$$.fragment, local);
			transition_in(textblock2.$$.fragment, local);

			if (!div2_intro) {
				add_render_callback(() => {
					div2_intro = create_in_transition(div2, fly, { x: -20, duration: 200 });
					div2_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(textblock0.$$.fragment, local);
			transition_out(listitem0.$$.fragment, local);
			transition_out(textblock1.$$.fragment, local);
			transition_out(listitem1.$$.fragment, local);
			transition_out(textblock2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_component(textblock0);
			destroy_component(listitem0);
			destroy_component(textblock1);
			destroy_component(listitem1);
			destroy_component(textblock2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(148:2) {#if mainPage}",
		ctx
	});

	return block;
}

// (150:6) <TextBlock variant="title">
function create_default_slot_18(ctx) {
	let t_1_value = /*t*/ ctx[7]('title') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(150:6) <TextBlock variant=\\\"title\\\">",
		ctx
	});

	return block;
}

// (154:6) <ListItem on:click={() => { pages.sitesOverview = true }}>
function create_default_slot_17(ctx) {
	let t_1_value = /*t*/ ctx[7]('dialog.main.viewSites') + "";
	let t_1;
	let br;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
			br = element("br");
			add_location(br, file, 154, 36, 4430);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
			insert_dev(target, br, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(154:6) <ListItem on:click={() => { pages.sitesOverview = true }}>",
		ctx
	});

	return block;
}

// (157:6) <TextBlock variant="caption" style="color: gray; margin-inline: calc(5px + 12px)">
function create_default_slot_16(ctx) {
	let t_1_value = /*t*/ ctx[7]('dialog.main.viewSites-desc') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(157:6) <TextBlock variant=\\\"caption\\\" style=\\\"color: gray; margin-inline: calc(5px + 12px)\\\">",
		ctx
	});

	return block;
}

// (161:6) <ListItem on:click={() => { pages.defaultPermissions = true }}>
function create_default_slot_15(ctx) {
	let t_1_value = /*t*/ ctx[7]('dialog.main.permissions') + "";
	let t_1;
	let br;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
			br = element("br");
			add_location(br, file, 161, 38, 4754);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
			insert_dev(target, br, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
			if (detaching) detach_dev(br);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(161:6) <ListItem on:click={() => { pages.defaultPermissions = true }}>",
		ctx
	});

	return block;
}

// (164:6) <TextBlock variant="caption" style="color: gray; margin-inline: calc(5px + 12px)">
function create_default_slot_14(ctx) {
	let t_1_value = /*t*/ ctx[7]('dialog.main.permissions-desc') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(164:6) <TextBlock variant=\\\"caption\\\" style=\\\"color: gray; margin-inline: calc(5px + 12px)\\\">",
		ctx
	});

	return block;
}

// (170:2) {#if pages.sitesOverview}
function create_if_block_3(ctx) {
	let div3;
	let iconbutton;
	let t0;
	let textblock0;
	let t1;
	let div0;
	let t2;
	let div1;
	let button;
	let t3;
	let div2;
	let t4;
	let textblock1;
	let t5;
	let div3_intro;
	let current;
	let mounted;
	let dispose;

	iconbutton = new IconButton({
			props: {
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton.$on("click", /*click_handler_2*/ ctx[18]);

	textblock0 = new TextBlock({
			props: {
				variant: "title",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button = new Button({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler_3*/ ctx[19]);

	textblock1 = new TextBlock({
			props: {
				variant: "subtitle",
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value_2 = /*sites*/ ctx[8];
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div3 = element("div");
			create_component(iconbutton.$$.fragment);
			t0 = space();
			create_component(textblock0.$$.fragment);
			t1 = space();
			div0 = element("div");
			t2 = space();
			div1 = element("div");
			create_component(button.$$.fragment);
			t3 = space();
			div2 = element("div");
			t4 = space();
			create_component(textblock1.$$.fragment);
			t5 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div0, "class", "space svelte-1d9xv3y");
			add_location(div0, file, 177, 6, 5343);
			attr_dev(div1, "class", "flex col svelte-1d9xv3y");
			add_location(div1, file, 179, 6, 5378);
			attr_dev(div2, "class", "space svelte-1d9xv3y");
			add_location(div2, file, 182, 6, 5541);
			attr_dev(div3, "class", "page");
			add_location(div3, file, 170, 4, 4992);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			mount_component(iconbutton, div3, null);
			append_dev(div3, t0);
			mount_component(textblock0, div3, null);
			append_dev(div3, t1);
			append_dev(div3, div0);
			append_dev(div3, t2);
			append_dev(div3, div1);
			mount_component(button, div1, null);
			append_dev(div3, t3);
			append_dev(div3, div2);
			append_dev(div3, t4);
			mount_component(textblock1, div3, null);
			append_dev(div3, t5);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div3, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen_dev(div3, "introend", /*introend_handler*/ ctx[22], false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const iconbutton_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				iconbutton_changes.$$scope = { dirty, ctx };
			}

			iconbutton.$set(iconbutton_changes);
			const textblock0_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				textblock0_changes.$$scope = { dirty, ctx };
			}

			textblock0.$set(textblock0_changes);
			const button_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const textblock1_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				textblock1_changes.$$scope = { dirty, ctx };
			}

			textblock1.$set(textblock1_changes);

			if (dirty[0] & /*currentSite, sites, pages, getSitePermissions, _t*/ 835) {
				each_value_2 = /*sites*/ ctx[8];
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div3, null);
					}
				}

				group_outros();

				for (i = each_value_2.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			transition_in(textblock0.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			transition_in(textblock1.$$.fragment, local);

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			if (!div3_intro) {
				add_render_callback(() => {
					div3_intro = create_in_transition(div3, fly, {
						x: /*_animation_comingFromSite*/ ctx[2] ? -20 : 20,
						duration: 200
					});

					div3_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			transition_out(textblock0.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			transition_out(textblock1.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			destroy_component(iconbutton);
			destroy_component(textblock0);
			destroy_component(button);
			destroy_component(textblock1);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(170:2) {#if pages.sitesOverview}",
		ctx
	});

	return block;
}

// (172:6) <IconButton on:click={() => { pages.sitesOverview = false }}>
function create_default_slot_13(ctx) {
	let arrowback;
	let current;
	arrowback = new ArrowBack({ $$inline: true });

	const block = {
		c: function create() {
			create_component(arrowback.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(arrowback, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(arrowback.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(arrowback.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(arrowback, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(172:6) <IconButton on:click={() => { pages.sitesOverview = false }}>",
		ctx
	});

	return block;
}

// (175:6) <TextBlock variant="title">
function create_default_slot_12(ctx) {
	let t_1_value = /*t*/ ctx[7]('dialog.sites.title') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(175:6) <TextBlock variant=\\\"title\\\">",
		ctx
	});

	return block;
}

// (181:8) <Button on:click={() => {pages.sitesOverview = false; pages.site = true; }}>
function create_default_slot_11(ctx) {
	let t_1_value = /*t*/ ctx[7]('dialog.sites.more') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(181:8) <Button on:click={() => {pages.sitesOverview = false; pages.site = true; }}>",
		ctx
	});

	return block;
}

// (185:6) <TextBlock variant="subtitle">
function create_default_slot_10(ctx) {
	let t_1_value = /*t*/ ctx[7]('dialog.sites.with-permissions') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(185:6) <TextBlock variant=\\\"subtitle\\\">",
		ctx
	});

	return block;
}

// (192:12) <TextBlock variant="caption" style="color: gray;">
function create_default_slot_9(ctx) {
	let t_1_value = /*getSitePermissions*/ ctx[9](/*s*/ ctx[35]).slice(0, 5).map(/*func*/ ctx[20]).join(', ') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(192:12) <TextBlock variant=\\\"caption\\\" style=\\\"color: gray;\\\">",
		ctx
	});

	return block;
}

// (190:10) <ListItem on:click={() => { currentSite = s; pages.sitesOverview = false; pages.site = true; }}>
function create_default_slot_8(ctx) {
	let t0_value = /*s*/ ctx[35] + "";
	let t0;
	let t1;
	let textblock;
	let current;

	textblock = new TextBlock({
			props: {
				variant: "caption",
				style: "color: gray;",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = text(t0_value);
			t1 = space();
			create_component(textblock.$$.fragment);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			mount_component(textblock, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			destroy_component(textblock, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(190:10) <ListItem on:click={() => { currentSite = s; pages.sitesOverview = false; pages.site = true; }}>",
		ctx
	});

	return block;
}

// (188:6) {#each sites as s}
function create_each_block_2(ctx) {
	let div;
	let listitem;
	let t_1;
	let current;

	function click_handler_4() {
		return /*click_handler_4*/ ctx[21](/*s*/ ctx[35]);
	}

	listitem = new ListItem({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	listitem.$on("click", click_handler_4);

	const block = {
		c: function create() {
			div = element("div");
			create_component(listitem.$$.fragment);
			t_1 = space();
			attr_dev(div, "class", "item");
			add_location(div, file, 188, 8, 5708);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(listitem, div, null);
			append_dev(div, t_1);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const listitem_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				listitem_changes.$$scope = { dirty, ctx };
			}

			listitem.$set(listitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(listitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(listitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(listitem);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(188:6) {#each sites as s}",
		ctx
	});

	return block;
}

// (201:2) {#if pages.site}
function create_if_block_1(ctx) {
	let div2;
	let div0;
	let iconbutton;
	let t0;
	let autosuggestbox;
	let updating_value;
	let t1;
	let div1;
	let t2;
	let show_if;
	let current_block_type_index;
	let if_block;
	let div2_intro;
	let current;

	iconbutton = new IconButton({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton.$on("click", /*click_handler_5*/ ctx[23]);

	function autosuggestbox_value_binding(value) {
		/*autosuggestbox_value_binding*/ ctx[24](value);
	}

	let autosuggestbox_props = {
		items: /*sites*/ ctx[8],
		placeholder: /*t*/ ctx[7]('dialog.sitePage.hostPlaceholder')
	};

	if (/*currentSite*/ ctx[1] !== void 0) {
		autosuggestbox_props.value = /*currentSite*/ ctx[1];
	}

	autosuggestbox = new AutoSuggestBox({
			props: autosuggestbox_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(autosuggestbox, 'value', autosuggestbox_value_binding));
	const if_block_creators = [create_if_block_2, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty[0] & /*currentSite*/ 2) show_if = null;
		if (show_if == null) show_if = !!isValidURL(addHTTP(/*currentSite*/ ctx[1]));
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, [-1, -1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			create_component(iconbutton.$$.fragment);
			t0 = space();
			create_component(autosuggestbox.$$.fragment);
			t1 = space();
			div1 = element("div");
			t2 = space();
			if_block.c();
			attr_dev(div0, "class", "flex svelte-1d9xv3y");
			add_location(div0, file, 202, 6, 6211);
			attr_dev(div1, "class", "space svelte-1d9xv3y");
			add_location(div1, file, 208, 6, 6559);
			attr_dev(div2, "class", "page");
			add_location(div2, file, 201, 4, 6151);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			mount_component(iconbutton, div0, null);
			append_dev(div0, t0);
			mount_component(autosuggestbox, div0, null);
			append_dev(div2, t1);
			append_dev(div2, div1);
			append_dev(div2, t2);
			if_blocks[current_block_type_index].m(div2, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				iconbutton_changes.$$scope = { dirty, ctx };
			}

			iconbutton.$set(iconbutton_changes);
			const autosuggestbox_changes = {};

			if (!updating_value && dirty[0] & /*currentSite*/ 2) {
				updating_value = true;
				autosuggestbox_changes.value = /*currentSite*/ ctx[1];
				add_flush_callback(() => updating_value = false);
			}

			autosuggestbox.$set(autosuggestbox_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div2, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			transition_in(autosuggestbox.$$.fragment, local);
			transition_in(if_block);

			if (!div2_intro) {
				add_render_callback(() => {
					div2_intro = create_in_transition(div2, fly, { x: 20, duration: 200 });
					div2_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			transition_out(autosuggestbox.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_component(iconbutton);
			destroy_component(autosuggestbox);
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(201:2) {#if pages.site}",
		ctx
	});

	return block;
}

// (204:8) <IconButton on:click={() => { pages.sitesOverview = true; _animation_comingFromSite = true; pages.site = false; currentSite = '' }}>
function create_default_slot_7(ctx) {
	let arrowback;
	let current;
	arrowback = new ArrowBack({ $$inline: true });

	const block = {
		c: function create() {
			create_component(arrowback.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(arrowback, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(arrowback.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(arrowback.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(arrowback, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(204:8) <IconButton on:click={() => { pages.sitesOverview = true; _animation_comingFromSite = true; pages.site = false; currentSite = '' }}>",
		ctx
	});

	return block;
}

// (227:6) {:else}
function create_else_block(ctx) {
	let div;
	let textblock;
	let current;

	textblock = new TextBlock({
			props: {
				variant: "caption",
				style: "align: center;",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(textblock.$$.fragment);
			attr_dev(div, "class", "text-center svelte-1d9xv3y");
			add_location(div, file, 227, 8, 7513);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(textblock, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(textblock);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(227:6) {:else}",
		ctx
	});

	return block;
}

// (211:6) {#if isValidURL(addHTTP(currentSite))}
function create_if_block_2(ctx) {
	let each_1_anchor;
	let current;
	let each_value_1 = Object.keys(/*defaultPermissions*/ ctx[3]);
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*_t, defaultPermissions, getPermissionName, getPermissionValue, currentSite, handleChangeF*/ 7242) {
				each_value_1 = Object.keys(/*defaultPermissions*/ ctx[3]);
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(211:6) {#if isValidURL(addHTTP(currentSite))}",
		ctx
	});

	return block;
}

// (229:10) <TextBlock variant="caption" style="align: center;">
function create_default_slot_6(ctx) {
	let t_1_value = /*t*/ ctx[7]('dialog.sitePage.invalidURL') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(229:10) <TextBlock variant=\\\"caption\\\" style=\\\"align: center;\\\">",
		ctx
	});

	return block;
}

// (216:14) <TextBlock variant="bodyStrong">
function create_default_slot_5(ctx) {
	let t_1_value = /*_t*/ ctx[6](`common.permissions.${/*permissionKey*/ ctx[32]}.name`) + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*defaultPermissions*/ 8 && t_1_value !== (t_1_value = /*_t*/ ctx[6](`common.permissions.${/*permissionKey*/ ctx[32]}.name`) + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(216:14) <TextBlock variant=\\\"bodyStrong\\\">",
		ctx
	});

	return block;
}

// (223:12) <TextBlock style="color: gray;" variant="caption">
function create_default_slot_4(ctx) {
	let t_1_value = /*_t*/ ctx[6](`common.permissions.${/*permissionKey*/ ctx[32]}.desc`) + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*defaultPermissions*/ 8 && t_1_value !== (t_1_value = /*_t*/ ctx[6](`common.permissions.${/*permissionKey*/ ctx[32]}.desc`) + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(223:12) <TextBlock style=\\\"color: gray;\\\" variant=\\\"caption\\\">",
		ctx
	});

	return block;
}

// (213:8) {#each Object.keys(defaultPermissions) as permissionKey}
function create_each_block_1(ctx) {
	let div1;
	let div0;
	let textblock0;
	let t0;
	let combobox;
	let t1;
	let textblock1;
	let t2;
	let current;

	textblock0 = new TextBlock({
			props: {
				variant: "bodyStrong",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	combobox = new ComboBox({
			props: {
				items: [
					{
						name: /*getPermissionName*/ ctx[10](/*permissionKey*/ ctx[32], 'allow'),
						value: true
					},
					{
						name: /*getPermissionName*/ ctx[10](/*permissionKey*/ ctx[32], 'deny'),
						value: false
					},
					{
						name: /*getPermissionName*/ ctx[10](/*permissionKey*/ ctx[32], 'useDefault'),
						value: null
					}
				],
				value: /*getPermissionValue*/ ctx[11](/*currentSite*/ ctx[1], /*permissionKey*/ ctx[32])
			},
			$$inline: true
		});

	combobox.$on("select", function () {
		if (is_function(/*handleChangeF*/ ctx[12](/*currentSite*/ ctx[1], /*permissionKey*/ ctx[32]))) /*handleChangeF*/ ctx[12](/*currentSite*/ ctx[1], /*permissionKey*/ ctx[32]).apply(this, arguments);
	});

	textblock1 = new TextBlock({
			props: {
				style: "color: gray;",
				variant: "caption",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			create_component(textblock0.$$.fragment);
			t0 = space();
			create_component(combobox.$$.fragment);
			t1 = space();
			create_component(textblock1.$$.fragment);
			t2 = space();
			attr_dev(div0, "class", "perm-info svelte-1d9xv3y");
			add_location(div0, file, 214, 12, 6758);
			attr_dev(div1, "class", "permission svelte-1d9xv3y");
			add_location(div1, file, 213, 10, 6720);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			mount_component(textblock0, div0, null);
			append_dev(div0, t0);
			mount_component(combobox, div0, null);
			append_dev(div1, t1);
			mount_component(textblock1, div1, null);
			append_dev(div1, t2);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const textblock0_changes = {};

			if (dirty[0] & /*defaultPermissions*/ 8 | dirty[1] & /*$$scope*/ 128) {
				textblock0_changes.$$scope = { dirty, ctx };
			}

			textblock0.$set(textblock0_changes);
			const combobox_changes = {};

			if (dirty[0] & /*defaultPermissions*/ 8) combobox_changes.items = [
				{
					name: /*getPermissionName*/ ctx[10](/*permissionKey*/ ctx[32], 'allow'),
					value: true
				},
				{
					name: /*getPermissionName*/ ctx[10](/*permissionKey*/ ctx[32], 'deny'),
					value: false
				},
				{
					name: /*getPermissionName*/ ctx[10](/*permissionKey*/ ctx[32], 'useDefault'),
					value: null
				}
			];

			if (dirty[0] & /*currentSite, defaultPermissions*/ 10) combobox_changes.value = /*getPermissionValue*/ ctx[11](/*currentSite*/ ctx[1], /*permissionKey*/ ctx[32]);
			combobox.$set(combobox_changes);
			const textblock1_changes = {};

			if (dirty[0] & /*defaultPermissions*/ 8 | dirty[1] & /*$$scope*/ 128) {
				textblock1_changes.$$scope = { dirty, ctx };
			}

			textblock1.$set(textblock1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock0.$$.fragment, local);
			transition_in(combobox.$$.fragment, local);
			transition_in(textblock1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock0.$$.fragment, local);
			transition_out(combobox.$$.fragment, local);
			transition_out(textblock1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(textblock0);
			destroy_component(combobox);
			destroy_component(textblock1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(213:8) {#each Object.keys(defaultPermissions) as permissionKey}",
		ctx
	});

	return block;
}

// (235:2) {#if pages.defaultPermissions}
function create_if_block(ctx) {
	let div1;
	let div0;
	let iconbutton;
	let t0;
	let textblock;
	let t1;
	let div1_intro;
	let current;

	iconbutton = new IconButton({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	iconbutton.$on("click", /*click_handler_6*/ ctx[25]);

	textblock = new TextBlock({
			props: {
				variant: "title",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value = Object.keys(/*defaultPermissions*/ ctx[3]);
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			create_component(iconbutton.$$.fragment);
			t0 = space();
			create_component(textblock.$$.fragment);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div0, "class", "flex svelte-1d9xv3y");
			add_location(div0, file, 236, 6, 7799);
			attr_dev(div1, "class", "page");
			add_location(div1, file, 235, 4, 7739);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			mount_component(iconbutton, div0, null);
			append_dev(div0, t0);
			mount_component(textblock, div0, null);
			append_dev(div1, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				iconbutton_changes.$$scope = { dirty, ctx };
			}

			iconbutton.$set(iconbutton_changes);
			const textblock_changes = {};

			if (dirty[1] & /*$$scope*/ 128) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);

			if (dirty[0] & /*_t, defaultPermissions, handleDefaultChangeF*/ 8264) {
				each_value = Object.keys(/*defaultPermissions*/ ctx[3]);
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div1, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			transition_in(textblock.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			if (!div1_intro) {
				add_render_callback(() => {
					div1_intro = create_in_transition(div1, fly, { x: 20, duration: 200 });
					div1_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			transition_out(textblock.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(iconbutton);
			destroy_component(textblock);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(235:2) {#if pages.defaultPermissions}",
		ctx
	});

	return block;
}

// (238:8) <IconButton on:click={() => { pages.defaultPermissions = false; }}>
function create_default_slot_3(ctx) {
	let arrowback;
	let current;
	arrowback = new ArrowBack({ $$inline: true });

	const block = {
		c: function create() {
			create_component(arrowback.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(arrowback, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(arrowback.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(arrowback.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(arrowback, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(238:8) <IconButton on:click={() => { pages.defaultPermissions = false; }}>",
		ctx
	});

	return block;
}

// (241:8) <TextBlock variant="title">
function create_default_slot_2(ctx) {
	let t_1_value = /*t*/ ctx[7]('dialog.permissions.title') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(241:8) <TextBlock variant=\\\"title\\\">",
		ctx
	});

	return block;
}

// (249:12) <TextBlock variant="bodyStrong">
function create_default_slot_1(ctx) {
	let t_1_value = /*_t*/ ctx[6](`common.permissions.${/*perm*/ ctx[29]}.name`) + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*defaultPermissions*/ 8 && t_1_value !== (t_1_value = /*_t*/ ctx[6](`common.permissions.${/*perm*/ ctx[29]}.name`) + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(249:12) <TextBlock variant=\\\"bodyStrong\\\">",
		ctx
	});

	return block;
}

// (256:10) <TextBlock style="color: gray;" variant="caption">
function create_default_slot(ctx) {
	let t_1_value = /*_t*/ ctx[6](`common.permissions.${/*perm*/ ctx[29]}.desc`) + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*defaultPermissions*/ 8 && t_1_value !== (t_1_value = /*_t*/ ctx[6](`common.permissions.${/*perm*/ ctx[29]}.desc`) + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(256:10) <TextBlock style=\\\"color: gray;\\\" variant=\\\"caption\\\">",
		ctx
	});

	return block;
}

// (246:6) {#each Object.keys(defaultPermissions) as perm}
function create_each_block(ctx) {
	let div1;
	let div0;
	let textblock0;
	let t0;
	let combobox;
	let t1;
	let textblock1;
	let t2;
	let current;

	textblock0 = new TextBlock({
			props: {
				variant: "bodyStrong",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	combobox = new ComboBox({
			props: {
				items: [
					{
						name: /*_t*/ ctx[6]('common.permissions.status.allow'),
						value: true
					},
					{
						name: /*_t*/ ctx[6]('common.permissions.status.deny'),
						value: false
					},
					{
						name: /*_t*/ ctx[6]('common.permissions.status.ask'),
						value: null
					}
				],
				value: /*defaultPermissions*/ ctx[3][/*perm*/ ctx[29]]
			},
			$$inline: true
		});

	combobox.$on("select", function () {
		if (is_function(/*handleDefaultChangeF*/ ctx[13](/*perm*/ ctx[29]))) /*handleDefaultChangeF*/ ctx[13](/*perm*/ ctx[29]).apply(this, arguments);
	});

	textblock1 = new TextBlock({
			props: {
				style: "color: gray;",
				variant: "caption",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			create_component(textblock0.$$.fragment);
			t0 = space();
			create_component(combobox.$$.fragment);
			t1 = space();
			create_component(textblock1.$$.fragment);
			t2 = space();
			attr_dev(div0, "class", "perm-info svelte-1d9xv3y");
			add_location(div0, file, 247, 10, 8167);
			attr_dev(div1, "class", "permission svelte-1d9xv3y");
			add_location(div1, file, 246, 8, 8131);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			mount_component(textblock0, div0, null);
			append_dev(div0, t0);
			mount_component(combobox, div0, null);
			append_dev(div1, t1);
			mount_component(textblock1, div1, null);
			append_dev(div1, t2);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const textblock0_changes = {};

			if (dirty[0] & /*defaultPermissions*/ 8 | dirty[1] & /*$$scope*/ 128) {
				textblock0_changes.$$scope = { dirty, ctx };
			}

			textblock0.$set(textblock0_changes);
			const combobox_changes = {};
			if (dirty[0] & /*defaultPermissions*/ 8) combobox_changes.value = /*defaultPermissions*/ ctx[3][/*perm*/ ctx[29]];
			combobox.$set(combobox_changes);
			const textblock1_changes = {};

			if (dirty[0] & /*defaultPermissions*/ 8 | dirty[1] & /*$$scope*/ 128) {
				textblock1_changes.$$scope = { dirty, ctx };
			}

			textblock1.$set(textblock1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock0.$$.fragment, local);
			transition_in(combobox.$$.fragment, local);
			transition_in(textblock1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock0.$$.fragment, local);
			transition_out(combobox.$$.fragment, local);
			transition_out(textblock1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(textblock0);
			destroy_component(combobox);
			destroy_component(textblock1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(246:6) {#each Object.keys(defaultPermissions) as perm}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let current;
	let if_block0 = /*mainPage*/ ctx[4] && create_if_block_4(ctx);
	let if_block1 = /*pages*/ ctx[0].sitesOverview && create_if_block_3(ctx);
	let if_block2 = /*pages*/ ctx[0].site && create_if_block_1(ctx);
	let if_block3 = /*pages*/ ctx[0].defaultPermissions && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			attr_dev(div, "class", "wrapper svelte-1d9xv3y");
			add_location(div, file, 146, 0, 4118);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append_dev(div, t0);
			if (if_block1) if_block1.m(div, null);
			append_dev(div, t1);
			if (if_block2) if_block2.m(div, null);
			append_dev(div, t2);
			if (if_block3) if_block3.m(div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*mainPage*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*mainPage*/ 16) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*pages*/ ctx[0].sitesOverview) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*pages*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*pages*/ ctx[0].site) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*pages*/ 1) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*pages*/ ctx[0].defaultPermissions) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[0] & /*pages*/ 1) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div, null);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function isValidURL(url) {
	try {
		new URL(url);
		return true;
	} catch(_) {
		return false;
	}
}

function addHTTP(url) {
	if (url.startsWith('http:') || url.startsWith('https:')) {
		return url;
	} else {
		return 'https://' + url;
	}
}

function instance($$self, $$props, $$invalidate) {
	let mainPage;
	let defaultPermissions;
	let $config;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('SiteSettings', slots, []);
	let { update } = $$props;
	const config = getContext('config');
	validate_store(config, 'config');
	component_subscribe($$self, config, value => $$invalidate(15, $config = value));
	const { t: _t } = window.nereid.i18n;

	function t(str, ...args) {
		return _t(`pages.settings.privacy.siteSettings.${str}`, ...args);
	}

	const afterUpdateHooks = [];

	afterUpdate(() => {
		afterUpdateHooks.forEach(f => f());
		afterUpdateHooks.splice(0, afterUpdateHooks.length);
	});

	const hash = location.hash.toLowerCase().trim();

	let pages = {
		sitesOverview: hash.endsWith('/sites'),
		site: hash.includes('/site:'),
		defaultPermissions: hash.endsWith('/permissions'),
		cookies: hash.endsWith('/cookies')
	};

	let _animation_comingFromSite = false;
	let sites = Object.keys($config.privacy.sitePermissions);

	let currentSite = pages.site
	? hash.slice(('#siteSettings/site:').length)
	: '';

	function getSitePermissions(site) {
		let sitePerms = $config.privacy.sitePermissions;
		return Object.keys(sitePerms[site] || {}).filter(k => sitePerms[site][k] == true);
	}

	function getPermissionName(permKey, permValue) {
		let permBoolStatus = permValue == 'allow'
		? true
		: permValue == 'deny' ? false : null;

		let defaultBoolStatus = $config.privacy.defaultPermissions[permKey];

		let defaultTextStatus = defaultBoolStatus == true
		? 'allow'
		: defaultBoolStatus == false ? 'deny' : 'ask';

		if (permBoolStatus == null) {
			return _t('common.permissions.status.useDefault') + ` (${_t(`common.permissions.status.${defaultTextStatus}`)})`;
		}

		return _t(`common.permissions.status.${permValue}`);
	}

	function getPermissionValue(site, permKey) {
		return $config.privacy.sitePermissions[site]?.[permKey] ?? null;
	}

	let recentlyChanged = {};

	function handleChangeF(site, permKey) {
		return async function ({ detail }) {
			if (recentlyChanged[site]) return;
			console.log(`Changed`, site, permKey, detail);
			let stPerms = $config.privacy.sitePermissions;

			if (site in stPerms) {
				set_store_value(config, $config.privacy.sitePermissions[site][permKey] = detail.value, $config);
			} else {
				set_store_value(config, $config.privacy.sitePermissions[site] = { [permKey]: detail.value }, $config);
			}

			recentlyChanged[site] = true;
			await update();

			requestIdleCallback(() => {
				// prevent an infinite loop
				recentlyChanged[site] = false;
			});
		};
	}

	function handleDefaultChangeF(permKey) {
		return function ({ detail }) {
			console.log(`Default Changed`, permKey, detail);
			set_store_value(config, $config.privacy.defaultPermissions[permKey] = detail.value, $config);
			update();
		};
	}

	const writable_props = ['update'];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<SiteSettings> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		$$invalidate(0, pages.sitesOverview = true, pages);
	};

	const click_handler_1 = () => {
		$$invalidate(0, pages.defaultPermissions = true, pages);
	};

	const click_handler_2 = () => {
		$$invalidate(0, pages.sitesOverview = false, pages);
	};

	const click_handler_3 = () => {
		$$invalidate(0, pages.sitesOverview = false, pages);
		$$invalidate(0, pages.site = true, pages);
	};

	const func = p => _t(`common.permissions.${p}.name`);

	const click_handler_4 = s => {
		$$invalidate(1, currentSite = s);
		$$invalidate(0, pages.sitesOverview = false, pages);
		$$invalidate(0, pages.site = true, pages);
	};

	const introend_handler = () => $$invalidate(2, _animation_comingFromSite = false);

	const click_handler_5 = () => {
		$$invalidate(0, pages.sitesOverview = true, pages);
		$$invalidate(2, _animation_comingFromSite = true);
		$$invalidate(0, pages.site = false, pages);
		$$invalidate(1, currentSite = '');
	};

	function autosuggestbox_value_binding(value) {
		currentSite = value;
		$$invalidate(1, currentSite);
	}

	const click_handler_6 = () => {
		$$invalidate(0, pages.defaultPermissions = false, pages);
	};

	$$self.$$set = $$props => {
		if ('update' in $$props) $$invalidate(14, update = $$props.update);
	};

	$$self.$capture_state = () => ({
		ListItem,
		TextBlock,
		ContentDialog,
		IconButton,
		ToggleSwitch,
		TextBox,
		AutoSuggestBox,
		Button,
		ComboBox,
		afterUpdate,
		getContext,
		ArrowBack,
		fly,
		update,
		config,
		_t,
		t,
		afterUpdateHooks,
		hash,
		pages,
		_animation_comingFromSite,
		sites,
		currentSite,
		getSitePermissions,
		isValidURL,
		addHTTP,
		getPermissionName,
		getPermissionValue,
		recentlyChanged,
		handleChangeF,
		handleDefaultChangeF,
		defaultPermissions,
		mainPage,
		$config
	});

	$$self.$inject_state = $$props => {
		if ('update' in $$props) $$invalidate(14, update = $$props.update);
		if ('pages' in $$props) $$invalidate(0, pages = $$props.pages);
		if ('_animation_comingFromSite' in $$props) $$invalidate(2, _animation_comingFromSite = $$props._animation_comingFromSite);
		if ('sites' in $$props) $$invalidate(8, sites = $$props.sites);
		if ('currentSite' in $$props) $$invalidate(1, currentSite = $$props.currentSite);
		if ('recentlyChanged' in $$props) recentlyChanged = $$props.recentlyChanged;
		if ('defaultPermissions' in $$props) $$invalidate(3, defaultPermissions = $$props.defaultPermissions);
		if ('mainPage' in $$props) $$invalidate(4, mainPage = $$props.mainPage);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*pages*/ 1) {
			$: $$invalidate(4, mainPage = !pages.sitesOverview && !pages.site && !pages.defaultPermissions && !pages.cookies);
		}

		if ($$self.$$.dirty[0] & /*currentSite*/ 2) {
			$: if (isValidURL(addHTTP(currentSite))) {
				let url = new URL(addHTTP(currentSite));
				$$invalidate(1, currentSite = url.hostname);
			}
		}

		if ($$self.$$.dirty[0] & /*currentSite*/ 2) {
			$: if (currentSite != '') {
				location.hash = '#siteSettings/site:' + currentSite;
			} else {
				location.hash = '#siteSettings';
			}
		}

		if ($$self.$$.dirty[0] & /*$config*/ 32768) {
			$: $$invalidate(3, defaultPermissions = $config.privacy.defaultPermissions);
		}
	};

	return [
		pages,
		currentSite,
		_animation_comingFromSite,
		defaultPermissions,
		mainPage,
		config,
		_t,
		t,
		sites,
		getSitePermissions,
		getPermissionName,
		getPermissionValue,
		handleChangeF,
		handleDefaultChangeF,
		update,
		$config,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		func,
		click_handler_4,
		introend_handler,
		click_handler_5,
		autosuggestbox_value_binding,
		click_handler_6
	];
}

class SiteSettings extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { update: 14 }, add_css, [-1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SiteSettings",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*update*/ ctx[14] === undefined && !('update' in props)) {
			console_1.warn("<SiteSettings> was created without expected prop 'update'");
		}
	}

	get update() {
		throw new Error("<SiteSettings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set update(value) {
		throw new Error("<SiteSettings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default SiteSettings;