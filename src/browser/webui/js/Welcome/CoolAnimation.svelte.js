/* CoolAnimation.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_location,
	add_render_callback,
	append_dev,
	append_styles,
	attr_dev,
	check_outros,
	create_component,
	create_in_transition,
	create_out_transition,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element,
	empty,
	group_outros,
	init,
	insert_dev,
	is_function,
	listen_dev,
	mount_component,
	noop,
	safe_not_equal,
	set_style,
	space,
	svg_element,
	text,
	transition_in,
	transition_out,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import { Button, TextBlock } from "../modules/fluent-svelte/index.js";
import { draw, scale, fade } from "nereid://.svelte/transition/index.mjs";
import { expoOut } from "nereid://.svelte/easing/index.mjs";
const file = "CoolAnimation.svelte";

function add_css(target) {
	append_styles(target, "svelte-1rxj7fx", ".bg.svelte-1rxj7fx{position:absolute;top:0;left:0;width:100%;height:100%;background:black;z-index:-1;display:flex;justify-content:center;align-items:center}.fg.svelte-1rxj7fx{color:white;display:flex;position:absolute;align-items:center;justify-content:center;z-index:1;width:100%;height:100%;flex-direction:column}.backshadow.svelte-1rxj7fx{box-shadow:#000000ab 0 0 19px 20px;background:#000000ab;width:100%;text-align:center}.button-wr.svelte-1rxj7fx{position:absolute;bottom:8vh}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29vbEFuaW1hdGlvbi5zdmVsdGUiLCJzb3VyY2VzIjpbIkNvb2xBbmltYXRpb24uc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzdHlsZT5cclxuICAuYmcge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgYmFja2dyb3VuZDogYmxhY2s7XHJcbiAgICB6LWluZGV4OiAtMTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgfVxyXG4gIC5mZyB7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgei1pbmRleDogMTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB9XHJcbiAgLmJhY2tzaGFkb3cge1xyXG4gICAgYm94LXNoYWRvdzogIzAwMDAwMGFiIDAgMCAxOXB4IDIwcHg7XHJcbiAgICBiYWNrZ3JvdW5kOiAjMDAwMDAwYWI7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB9XHJcbiAgLmJ1dHRvbi13ciB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBib3R0b206IDh2aDtcclxuICB9XHJcbjwvc3R5bGU+XHJcbjxzY3JpcHQ+XHJcbiAgaW1wb3J0IHsgQnV0dG9uLCBUZXh0QmxvY2sgfSBmcm9tIFwiZmx1ZW50LXN2ZWx0ZVwiXHJcbiAgaW1wb3J0IHsgZHJhdywgc2NhbGUsIGZhZGUgfSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIlxyXG4gIGltcG9ydCB7IGV4cG9PdXQgfSBmcm9tIFwic3ZlbHRlL2Vhc2luZ1wiXHJcblxyXG4gIGV4cG9ydCBsZXQgbmV4dDtcclxuXHJcbiAgY29uc3QgeyB0IH0gPSB3aW5kb3cubmVyZWlkLmkxOG47XHJcblxyXG4gIGxldCBhbmltYXRpb25Eb25lID0gZmFsc2U7XHJcbiAgbGV0IHRvZ2dsZWQgPSBmYWxzZTtcclxuICBsZXQgY3VycmVudEZpbGwgPSAnbm9uZSc7XHJcblxyXG4gIGNvbnN0IGZpbmFsU2NhbGVPcHRpb25zID0geyBkdXJhdGlvbjogMjAwLCBzdGFydDogMC44IH07XHJcbiAgY29uc3Qgc3ZnQW5pbUR1cmF0aW9uID0gNzAwO1xyXG4gIFxyXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgdG9nZ2xlZCA9IHRydWVcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBjdXJyZW50RmlsbCA9ICd3aGl0ZSdcclxuICAgIH0sIDQwMCk7XHJcbiAgfSwgMTAwKTtcclxuPC9zY3JpcHQ+XHJcblxyXG57I2lmIHRvZ2dsZWR9XHJcbiAgPGRpdiBjbGFzcz1cImZnXCIgb3V0OnNjYWxlPXtmaW5hbFNjYWxlT3B0aW9uc30+XHJcbiAgICA8ZGl2IGNsYXNzPVwiYmFja3NoYWRvd1wiIGluOnNjYWxlPXt7IGRlbGF5OiBzdmdBbmltRHVyYXRpb24gKyAxMDAsIGR1cmF0aW9uOiBzdmdBbmltRHVyYXRpb24gKyAxMDAsIHN0YXJ0OiAwLjcsIGVhc2luZzogZXhwb091dCB9fSBvbjppbnRyb2VuZD17KCkgPT4gYW5pbWF0aW9uRG9uZSA9IHRydWV9PlxyXG4gICAgICA8VGV4dEJsb2NrIHZhcmlhbnQ9XCJkaXNwbGF5XCI+XHJcbiAgICAgICAge3QoJ3BhZ2VzLndlbGNvbWUud2VsY29tZScpfVxyXG4gICAgICA8L1RleHRCbG9jaz5cclxuICAgIDwvZGl2PlxyXG4gICAgeyNpZiBhbmltYXRpb25Eb25lfVxyXG4gICAgICA8ZGl2IGluOmZhZGUgY2xhc3M9XCJidXR0b24td3JcIj5cclxuICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJoeXBlcmxpbmtcIiBvbjpjbGljaz17bmV4dH0+XHJcbiAgICAgICAgICB7dCgncGFnZXMud2VsY29tZS5iZWdpbicpfVxyXG4gICAgICAgIDwvQnV0dG9uPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIHsvaWZ9XHJcbiAgPC9kaXY+XHJcbiAgPGRpdiBjbGFzcz1cImJnXCIgc3R5bGU6LS1jdXJyZW50LWZpbGw9e2N1cnJlbnRGaWxsfSBvdXQ6ZmFkZT17eyBkdXJhdGlvbjogZmluYWxTY2FsZU9wdGlvbnMuZHVyYXRpb24gfX0+XHJcbiAgICA8c3ZnXHJcbiAgICAgIGluOnNjYWxlPXt7IGRlbGF5OiAyMDAsIGR1cmF0aW9uOiBzdmdBbmltRHVyYXRpb24gLSAyMDAsIHN0YXJ0OiAxLjMsIG9wYWNpdHk6IDEsIGVhc2luZzogZXhwb091dCB9fVxyXG4gICAgICBvdXQ6c2NhbGU9e2ZpbmFsU2NhbGVPcHRpb25zfVxyXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcclxuICAgICAgdmlld0JveD1cIjAgMCA1MDAgNTAwXCIgd2lkdGg9XCI1MDBcIiBoZWlnaHQ9XCI1MDBcIlxyXG4gICAgPlxyXG4gICAgICA8ZWxsaXBzZSBpbjpmYWRlPXt7IGR1cmF0aW9uOiBzdmdBbmltRHVyYXRpb24gfX0gc3R5bGU9XCJmaWxsOiBub25lOyBzdHJva2U6IHJnYigzNiwgMTI2LCAyMDUpOyBzdHJva2Utd2lkdGg6IDEyMHB4O1wiIGN4PVwiMjUwXCIgY3k9XCIyNTBcIiByeD1cIjE2MFwiIHJ5PVwiMTYwXCI+PC9lbGxpcHNlPlxyXG4gICAgICA8cGF0aCBpbjpkcmF3PXt7IGR1cmF0aW9uOiBzdmdBbmltRHVyYXRpb24gfX0gc3R5bGU9XCJmaWxsOiBub25lOyBzdHJva2U6IHJnYig2OCwgMTY4LCAyNTUpOyBzdHJva2Utd2lkdGg6IDUwcHg7IHN0cm9rZS1saW5lY2FwOiByb3VuZDsgc3Ryb2tlLWxpbmVqb2luOiByb3VuZDtcIiBkPVwiTSA2My44ODEgNDE5LjU1OCBDIDE4MC42NTIgNDA2Ljk0IDQxOS4xMjIgMTk4Ljk2OSA0MzEuMzg5IDc2LjQ5OFwiPjwvcGF0aD5cclxuICAgIDwvc3ZnPlxyXG4gIDwvZGl2PlxyXG57OmVsc2V9XHJcbiAgPGRpdiBjbGFzcz1cImJnXCI+PC9kaXY+XHJcbnsvaWZ9Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNFLEdBQUcsZUFBQyxDQUFDLEFBQ0gsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsR0FBRyxDQUFFLENBQUMsQ0FDTixJQUFJLENBQUUsQ0FBQyxDQUNQLEtBQUssQ0FBRSxJQUFJLENBQ1gsTUFBTSxDQUFFLElBQUksQ0FDWixVQUFVLENBQUUsS0FBSyxDQUNqQixPQUFPLENBQUUsRUFBRSxDQUNYLE9BQU8sQ0FBRSxJQUFJLENBQ2IsZUFBZSxDQUFFLE1BQU0sQ0FDdkIsV0FBVyxDQUFFLE1BQU0sQUFDckIsQ0FBQyxBQUNELEdBQUcsZUFBQyxDQUFDLEFBQ0gsS0FBSyxDQUFFLEtBQUssQ0FDWixPQUFPLENBQUUsSUFBSSxDQUNiLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLFdBQVcsQ0FBRSxNQUFNLENBQ25CLGVBQWUsQ0FBRSxNQUFNLENBQ3ZCLE9BQU8sQ0FBRSxDQUFDLENBQ1YsS0FBSyxDQUFFLElBQUksQ0FDWCxNQUFNLENBQUUsSUFBSSxDQUNaLGNBQWMsQ0FBRSxNQUFNLEFBQ3hCLENBQUMsQUFDRCxXQUFXLGVBQUMsQ0FBQyxBQUNYLFVBQVUsQ0FBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUNuQyxVQUFVLENBQUUsU0FBUyxDQUNyQixLQUFLLENBQUUsSUFBSSxDQUNYLFVBQVUsQ0FBRSxNQUFNLEFBQ3BCLENBQUMsQUFDRCxVQUFVLGVBQUMsQ0FBQyxBQUNWLFFBQVEsQ0FBRSxRQUFRLENBQ2xCLE1BQU0sQ0FBRSxHQUFHLEFBQ2IsQ0FBQyJ9 */");
}

// (86:0) {:else}
function create_else_block(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "bg svelte-1rxj7fx");
			add_location(div, file, 86, 2, 2568);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(86:0) {:else}",
		ctx
	});

	return block;
}

// (60:0) {#if toggled}
function create_if_block(ctx) {
	let div1;
	let div0;
	let textblock;
	let div0_intro;
	let t0;
	let div1_outro;
	let t1;
	let div2;
	let svg;
	let ellipse;
	let ellipse_intro;
	let path;
	let path_intro;
	let svg_intro;
	let svg_outro;
	let div2_outro;
	let current;
	let mounted;
	let dispose;

	textblock = new TextBlock({
			props: {
				variant: "display",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let if_block = /*animationDone*/ ctx[1] && create_if_block_1(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			create_component(textblock.$$.fragment);
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			div2 = element("div");
			svg = svg_element("svg");
			ellipse = svg_element("ellipse");
			path = svg_element("path");
			attr_dev(div0, "class", "backshadow svelte-1rxj7fx");
			add_location(div0, file, 61, 4, 1266);
			attr_dev(div1, "class", "fg svelte-1rxj7fx");
			add_location(div1, file, 60, 2, 1214);
			set_style(ellipse, "fill", "none");
			set_style(ellipse, "stroke", "rgb(36, 126, 205)");
			set_style(ellipse, "stroke-width", "120px");
			attr_dev(ellipse, "cx", "250");
			attr_dev(ellipse, "cy", "250");
			attr_dev(ellipse, "rx", "160");
			attr_dev(ellipse, "ry", "160");
			add_location(ellipse, file, 81, 6, 2126);
			set_style(path, "fill", "none");
			set_style(path, "stroke", "rgb(68, 168, 255)");
			set_style(path, "stroke-width", "50px");
			set_style(path, "stroke-linecap", "round");
			set_style(path, "stroke-linejoin", "round");
			attr_dev(path, "d", "M 63.881 419.558 C 180.652 406.94 419.122 198.969 431.389 76.498");
			add_location(path, file, 82, 6, 2297);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "viewBox", "0 0 500 500");
			attr_dev(svg, "width", "500");
			attr_dev(svg, "height", "500");
			add_location(svg, file, 75, 4, 1867);
			attr_dev(div2, "class", "bg svelte-1rxj7fx");
			set_style(div2, "--current-fill", /*currentFill*/ ctx[3], false);
			add_location(div2, file, 74, 2, 1758);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			mount_component(textblock, div0, null);
			append_dev(div1, t0);
			if (if_block) if_block.m(div1, null);
			insert_dev(target, t1, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, svg);
			append_dev(svg, ellipse);
			append_dev(svg, path);
			current = true;

			if (!mounted) {
				dispose = listen_dev(div0, "introend", /*introend_handler*/ ctx[6], false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const textblock_changes = {};

			if (dirty & /*$$scope*/ 128) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);

			if (/*animationDone*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*animationDone*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty & /*currentFill*/ 8) {
				set_style(div2, "--current-fill", /*currentFill*/ ctx[3], false);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);

			if (!div0_intro) {
				add_render_callback(() => {
					div0_intro = create_in_transition(div0, scale, {
						delay: svgAnimDuration + 100,
						duration: svgAnimDuration + 100,
						start: 0.7,
						easing: expoOut
					});

					div0_intro.start();
				});
			}

			transition_in(if_block);
			if (div1_outro) div1_outro.end(1);

			if (!ellipse_intro) {
				add_render_callback(() => {
					ellipse_intro = create_in_transition(ellipse, fade, { duration: svgAnimDuration });
					ellipse_intro.start();
				});
			}

			if (!path_intro) {
				add_render_callback(() => {
					path_intro = create_in_transition(path, draw, { duration: svgAnimDuration });
					path_intro.start();
				});
			}

			add_render_callback(() => {
				if (svg_outro) svg_outro.end(1);

				svg_intro = create_in_transition(svg, scale, {
					delay: 200,
					duration: svgAnimDuration - 200,
					start: 1.3,
					opacity: 1,
					easing: expoOut
				});

				svg_intro.start();
			});

			if (div2_outro) div2_outro.end(1);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			transition_out(if_block);
			div1_outro = create_out_transition(div1, scale, /*finalScaleOptions*/ ctx[5]);
			if (svg_intro) svg_intro.invalidate();
			svg_outro = create_out_transition(svg, scale, /*finalScaleOptions*/ ctx[5]);

			div2_outro = create_out_transition(div2, fade, {
				duration: /*finalScaleOptions*/ ctx[5].duration
			});

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(textblock);
			if (if_block) if_block.d();
			if (detaching && div1_outro) div1_outro.end();
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div2);
			if (detaching && svg_outro) svg_outro.end();
			if (detaching && div2_outro) div2_outro.end();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(60:0) {#if toggled}",
		ctx
	});

	return block;
}

// (63:6) <TextBlock variant="display">
function create_default_slot_1(ctx) {
	let t_1_value = /*t*/ ctx[4]('pages.welcome.welcome') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(63:6) <TextBlock variant=\\\"display\\\">",
		ctx
	});

	return block;
}

// (67:4) {#if animationDone}
function create_if_block_1(ctx) {
	let div;
	let button;
	let div_intro;
	let current;

	button = new Button({
			props: {
				variant: "hyperlink",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", function () {
		if (is_function(/*next*/ ctx[0])) /*next*/ ctx[0].apply(this, arguments);
	});

	const block = {
		c: function create() {
			div = element("div");
			create_component(button.$$.fragment);
			attr_dev(div, "class", "button-wr svelte-1rxj7fx");
			add_location(div, file, 67, 6, 1577);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(button, div, null);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const button_changes = {};

			if (dirty & /*$$scope*/ 128) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);

			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, fade, {});
					div_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(67:4) {#if animationDone}",
		ctx
	});

	return block;
}

// (69:8) <Button variant="hyperlink" on:click={next}>
function create_default_slot(ctx) {
	let t_1_value = /*t*/ ctx[4]('pages.welcome.begin') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(69:8) <Button variant=\\\"hyperlink\\\" on:click={next}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*toggled*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const svgAnimDuration = 700;

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('CoolAnimation', slots, []);
	let { next } = $$props;
	const { t } = window.nereid.i18n;
	let animationDone = false;
	let toggled = false;
	let currentFill = 'none';
	const finalScaleOptions = { duration: 200, start: 0.8 };

	setTimeout(
		() => {
			$$invalidate(2, toggled = true);

			setTimeout(
				() => {
					$$invalidate(3, currentFill = 'white');
				},
				400
			);
		},
		100
	);

	const writable_props = ['next'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CoolAnimation> was created with unknown prop '${key}'`);
	});

	const introend_handler = () => $$invalidate(1, animationDone = true);

	$$self.$$set = $$props => {
		if ('next' in $$props) $$invalidate(0, next = $$props.next);
	};

	$$self.$capture_state = () => ({
		Button,
		TextBlock,
		draw,
		scale,
		fade,
		expoOut,
		next,
		t,
		animationDone,
		toggled,
		currentFill,
		finalScaleOptions,
		svgAnimDuration
	});

	$$self.$inject_state = $$props => {
		if ('next' in $$props) $$invalidate(0, next = $$props.next);
		if ('animationDone' in $$props) $$invalidate(1, animationDone = $$props.animationDone);
		if ('toggled' in $$props) $$invalidate(2, toggled = $$props.toggled);
		if ('currentFill' in $$props) $$invalidate(3, currentFill = $$props.currentFill);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		next,
		animationDone,
		toggled,
		currentFill,
		t,
		finalScaleOptions,
		introend_handler
	];
}

class CoolAnimation extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { next: 0 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "CoolAnimation",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*next*/ ctx[0] === undefined && !('next' in props)) {
			console.warn("<CoolAnimation> was created without expected prop 'next'");
		}
	}

	get next() {
		throw new Error("<CoolAnimation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set next(value) {
		throw new Error("<CoolAnimation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default CoolAnimation;