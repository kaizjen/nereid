/* LanguageChooser.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_flush_callback,
	add_location,
	append_dev,
	append_styles,
	attr_dev,
	bind,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element,
	group_outros,
	init,
	insert_dev,
	mount_component,
	noop,
	safe_not_equal,
	set_data_dev,
	space,
	text,
	transition_in,
	transition_out,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import { Button, ContentDialog, TextBlock } from "../modules/fluent-svelte/index.js";
import LanguageList from "./LanguageList.svelte.js";
import Codes from "../modules/iso-639-1/src/index.js";
const file = "LanguageChooser.svelte";

function add_css(target) {
	append_styles(target, "svelte-1avxynn", ".main.svelte-1avxynn{position:absolute;top:0;left:0;width:-webkit-fill-available;height:-webkit-fill-available;z-index:-1;padding-inline:200px}.head.svelte-1avxynn{-webkit-app-region:drag;padding-top:20px;margin-bottom:50px}footer.svelte-1avxynn{display:flex;align-items:center;bottom:0;position:absolute;width:100%;padding-block:8px}@media(prefers-color-scheme: dark){footer.svelte-1avxynn{background:black}}@media(prefers-color-scheme: light){footer.svelte-1avxynn{background:#cacaca}}.info.svelte-1avxynn{flex-grow:1;display:flex;flex-direction:column;padding-left:8px}.note.svelte-1avxynn{margin-top:50px;font-size:small;color:gray;font-style:italic}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGFuZ3VhZ2VDaG9vc2VyLnN2ZWx0ZSIsInNvdXJjZXMiOlsiTGFuZ3VhZ2VDaG9vc2VyLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c3R5bGU+XHJcbiAgLm1haW4ge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHdpZHRoOiAtd2Via2l0LWZpbGwtYXZhaWxhYmxlO1xyXG4gICAgaGVpZ2h0OiAtd2Via2l0LWZpbGwtYXZhaWxhYmxlO1xyXG4gICAgei1pbmRleDogLTE7XHJcbiAgICBwYWRkaW5nLWlubGluZTogMjAwcHg7XHJcbiAgfVxyXG4gIC5oZWFkIHtcclxuICAgIC13ZWJraXQtYXBwLXJlZ2lvbjogZHJhZztcclxuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNTBweDtcclxuICB9XHJcbiAgZm9vdGVyIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgYm90dG9tOiAwO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBwYWRkaW5nLWJsb2NrOiA4cHg7XHJcbiAgfVxyXG4gIEBtZWRpYSAocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspIHtcclxuICAgIGZvb3RlciB7XHJcbiAgICAgIGJhY2tncm91bmQ6IGJsYWNrO1xyXG4gICAgfVxyXG4gIH1cclxuICBAbWVkaWEgKHByZWZlcnMtY29sb3Itc2NoZW1lOiBsaWdodCkge1xyXG4gICAgZm9vdGVyIHtcclxuICAgICAgYmFja2dyb3VuZDogI2NhY2FjYTtcclxuICAgIH1cclxuICB9XHJcbiAgLmluZm8ge1xyXG4gICAgZmxleC1ncm93OiAxO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDhweDtcclxuICB9XHJcbiAgLm5vdGUge1xyXG4gICAgbWFyZ2luLXRvcDogNTBweDtcclxuICAgIGZvbnQtc2l6ZTogc21hbGw7XHJcbiAgICBjb2xvcjogZ3JheTtcclxuICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcclxuICB9XHJcbjwvc3R5bGU+XHJcbjxzY3JpcHQ+XHJcbiAgaW1wb3J0IHsgQnV0dG9uLCBDb250ZW50RGlhbG9nLCBUZXh0QmxvY2sgfSBmcm9tIFwiZmx1ZW50LXN2ZWx0ZVwiO1xyXG4gIGltcG9ydCBMYW5ndWFnZUxpc3QgZnJvbSBcIi4vTGFuZ3VhZ2VMaXN0LnN2ZWx0ZVwiO1xyXG4gIGltcG9ydCBDb2RlcyBmcm9tIFwiaXNvLTYzOS0xXCI7XHJcblxyXG4gIGV4cG9ydCBsZXQgbmV4dDtcclxuICBleHBvcnQgbGV0IGNvbmZpZztcclxuXHJcbiAgY29uc3QgeyB0IH0gPSB3aW5kb3cubmVyZWlkLmkxOG47XHJcblxyXG4gIGxldCBzZWxlY3RlZExvY2FsZSA9ICdlbic7XHJcbiAgbGV0IHNlbGVjdGVkTGFuZyA9ICdlbic7XHJcbiAgbGV0IG9wZW4gPSBmYWxzZTtcclxuXHJcbiAgJDoge1xyXG4gICAgbGV0IHN1cHBvcnRlZCA9IHdpbmRvdy5uZXJlaWQuaTE4bi5nZXRTdXBwb3J0ZWRMYW5ndWFnZShzZWxlY3RlZExvY2FsZSk7XHJcbiAgICBzZWxlY3RlZExhbmcgPSBzdXBwb3J0ZWRcclxuICB9XHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIGVuZExhbmd1YWdlU2VsZWN0aW9uKCkge1xyXG4gICAgaWYgKHNlbGVjdGVkTGFuZyAhPSBjb25maWcuaTE4bi5sYW5nIHx8IFxyXG4gICAgICBzZWxlY3RlZExvY2FsZSAhPSBjb25maWcuaTE4bi5sb2NhbGUpIHtcclxuICAgICAgcmVxdWVzdElkbGVDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgICAgd2luZG93Lm5lcmVpZC5hcHAucmVzdGFydCgpO1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgY29uZmlnLmkxOG4ubGFuZyA9IHNlbGVjdGVkTGFuZztcclxuICAgIGNvbmZpZy5pMThuLmxvY2FsZSA9IHNlbGVjdGVkTG9jYWxlXHJcbiAgICBhd2FpdCBuZXh0KCk7IC8vIG5leHQoKSBzZXRzIHRoZSBjb25maWdcclxuICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPENvbnRlbnREaWFsb2cgc3R5bGU9XCIgb3ZlcmZsb3c6IGF1dG87IG1heC1oZWlnaHQ6IDEwMCUgXCIgYmluZDpvcGVuPlxyXG4gIDxMYW5ndWFnZUxpc3QgYmluZDpzZWxlY3RlZD17c2VsZWN0ZWRMYW5nfSBvbmx5QXZhaWxhYmxlPXt0cnVlfSAvPlxyXG4gIDxzdmVsdGU6ZnJhZ21lbnQgc2xvdD1cImZvb3RlclwiPlxyXG4gICAgPEJ1dHRvbiBvbjpjbGljaz17KCkgPT4gb3BlbiA9IGZhbHNlfT57dCgnY29tbW9uLmRvbmUnKX08L0J1dHRvbj5cclxuICA8L3N2ZWx0ZTpmcmFnbWVudD5cclxuPC9Db250ZW50RGlhbG9nPlxyXG5cclxuPGRpdiBjbGFzcz1cIm1haW5cIj5cclxuICA8ZGl2IGNsYXNzPVwiaGVhZFwiPlxyXG4gICAgPFRleHRCbG9jayB2YXJpYW50PVwidGl0bGVMYXJnZVwiPnt0KCdwYWdlcy53ZWxjb21lLmxhbmd1YWdlLnRpdGxlJyl9PC9UZXh0QmxvY2s+XHJcbiAgPC9kaXY+XHJcblxyXG4gIDxkaXY+XHJcbiAgICA8TGFuZ3VhZ2VMaXN0IGJpbmQ6c2VsZWN0ZWQ9e3NlbGVjdGVkTG9jYWxlfSBvbmx5QXZhaWxhYmxlPXtmYWxzZX0gLz5cclxuICA8L2Rpdj5cclxuXHJcbiAgPGRpdiBjbGFzcz1cIm5vdGVcIj5cclxuICAgIHt0KCdwYWdlcy53ZWxjb21lLmxhbmd1YWdlLm5vdGUnKX1cclxuICA8L2Rpdj5cclxuXHJcbjwvZGl2PlxyXG48Zm9vdGVyPlxyXG4gIDxkaXYgY2xhc3M9XCJpbmZvXCI+XHJcbiAgICB7I2lmIHNlbGVjdGVkTGFuZyAhPSBzZWxlY3RlZExvY2FsZX1cclxuICAgICAgPHNwYW4+IHt0KCdwYWdlcy53ZWxjb21lLmxhbmd1YWdlLm5vVHJhbnNsYXRpb24nKX1cclxuICAgICAgPEJ1dHRvbiBvbjpjbGljaz17KCkgPT4gb3BlbiA9IHRydWV9PntDb2Rlcy5nZXROYXRpdmVOYW1lKHNlbGVjdGVkTGFuZykgfHwgYFske3NlbGVjdGVkTGFuZ31dYH08L0J1dHRvbj48L3NwYW4+XHJcbiAgICB7L2lmfVxyXG4gICAgeyNpZiBzZWxlY3RlZExhbmcgIT0gY29uZmlnLmkxOG4ubGFuZyB8fCBcclxuICAgICAgc2VsZWN0ZWRMb2NhbGUgIT0gY29uZmlnLmkxOG4ubG9jYWxlfVxyXG4gICAgICA8c3Bhbj57dCgncGFnZXMud2VsY29tZS5sYW5ndWFnZS5yZXN0YXJ0Tm90aWNlJyl9PC9zcGFuPlxyXG4gICAgey9pZn1cclxuICA8L2Rpdj5cclxuICA8QnV0dG9uIG9uOmNsaWNrPXtlbmRMYW5ndWFnZVNlbGVjdGlvbn0+XHJcbiAgICB7dCgncGFnZXMud2VsY29tZS5jb21tb24ubmV4dCcpfVxyXG4gIDwvQnV0dG9uPlxyXG48L2Zvb3Rlcj4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0UsS0FBSyxlQUFDLENBQUMsQUFDTCxRQUFRLENBQUUsUUFBUSxDQUNsQixHQUFHLENBQUUsQ0FBQyxDQUNOLElBQUksQ0FBRSxDQUFDLENBQ1AsS0FBSyxDQUFFLHNCQUFzQixDQUM3QixNQUFNLENBQUUsc0JBQXNCLENBQzlCLE9BQU8sQ0FBRSxFQUFFLENBQ1gsY0FBYyxDQUFFLEtBQUssQUFDdkIsQ0FBQyxBQUNELEtBQUssZUFBQyxDQUFDLEFBQ0wsa0JBQWtCLENBQUUsSUFBSSxDQUN4QixXQUFXLENBQUUsSUFBSSxDQUNqQixhQUFhLENBQUUsSUFBSSxBQUNyQixDQUFDLEFBQ0QsTUFBTSxlQUFDLENBQUMsQUFDTixPQUFPLENBQUUsSUFBSSxDQUNiLFdBQVcsQ0FBRSxNQUFNLENBQ25CLE1BQU0sQ0FBRSxDQUFDLENBQ1QsUUFBUSxDQUFFLFFBQVEsQ0FDbEIsS0FBSyxDQUFFLElBQUksQ0FDWCxhQUFhLENBQUUsR0FBRyxBQUNwQixDQUFDLEFBQ0QsTUFBTSxBQUFDLHVCQUF1QixJQUFJLENBQUMsQUFBQyxDQUFDLEFBQ25DLE1BQU0sZUFBQyxDQUFDLEFBQ04sVUFBVSxDQUFFLEtBQUssQUFDbkIsQ0FBQyxBQUNILENBQUMsQUFDRCxNQUFNLEFBQUMsdUJBQXVCLEtBQUssQ0FBQyxBQUFDLENBQUMsQUFDcEMsTUFBTSxlQUFDLENBQUMsQUFDTixVQUFVLENBQUUsT0FBTyxBQUNyQixDQUFDLEFBQ0gsQ0FBQyxBQUNELEtBQUssZUFBQyxDQUFDLEFBQ0wsU0FBUyxDQUFFLENBQUMsQ0FDWixPQUFPLENBQUUsSUFBSSxDQUNiLGNBQWMsQ0FBRSxNQUFNLENBQ3RCLFlBQVksQ0FBRSxHQUFHLEFBQ25CLENBQUMsQUFDRCxLQUFLLGVBQUMsQ0FBQyxBQUNMLFVBQVUsQ0FBRSxJQUFJLENBQ2hCLFNBQVMsQ0FBRSxLQUFLLENBQ2hCLEtBQUssQ0FBRSxJQUFJLENBQ1gsVUFBVSxDQUFFLE1BQU0sQUFDcEIsQ0FBQyJ9 */");
}

// (79:0) <ContentDialog style=" overflow: auto; max-height: 100% " bind:open>
function create_default_slot_4(ctx) {
	let languagelist;
	let updating_selected;
	let current;

	function languagelist_selected_binding(value) {
		/*languagelist_selected_binding*/ ctx[8](value);
	}

	let languagelist_props = { onlyAvailable: true };

	if (/*selectedLang*/ ctx[2] !== void 0) {
		languagelist_props.selected = /*selectedLang*/ ctx[2];
	}

	languagelist = new LanguageList({
			props: languagelist_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(languagelist, 'selected', languagelist_selected_binding));

	const block = {
		c: function create() {
			create_component(languagelist.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(languagelist, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const languagelist_changes = {};

			if (!updating_selected && dirty & /*selectedLang*/ 4) {
				updating_selected = true;
				languagelist_changes.selected = /*selectedLang*/ ctx[2];
				add_flush_callback(() => updating_selected = false);
			}

			languagelist.$set(languagelist_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(languagelist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(languagelist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(languagelist, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(79:0) <ContentDialog style=\\\" overflow: auto; max-height: 100% \\\" bind:open>",
		ctx
	});

	return block;
}

// (82:4) <Button on:click={() => open = false}>
function create_default_slot_3(ctx) {
	let t_1_value = /*t*/ ctx[4]('common.done') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(82:4) <Button on:click={() => open = false}>",
		ctx
	});

	return block;
}

// (81:2) <svelte:fragment slot="footer">
function create_footer_slot(ctx) {
	let button;
	let current;

	button = new Button({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[7]);

	const block = {
		c: function create() {
			create_component(button.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(button, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_footer_slot.name,
		type: "slot",
		source: "(81:2) <svelte:fragment slot=\\\"footer\\\">",
		ctx
	});

	return block;
}

// (88:4) <TextBlock variant="titleLarge">
function create_default_slot_2(ctx) {
	let t_1_value = /*t*/ ctx[4]('pages.welcome.language.title') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(88:4) <TextBlock variant=\\\"titleLarge\\\">",
		ctx
	});

	return block;
}

// (102:4) {#if selectedLang != selectedLocale}
function create_if_block_1(ctx) {
	let span;
	let t0_value = /*t*/ ctx[4]('pages.welcome.language.noTranslation') + "";
	let t0;
	let t1;
	let button;
	let current;

	button = new Button({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler_1*/ ctx[11]);

	const block = {
		c: function create() {
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			create_component(button.$$.fragment);
			add_location(span, file, 102, 6, 2360);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t0);
			append_dev(span, t1);
			mount_component(button, span, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope, selectedLang*/ 4100) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(102:4) {#if selectedLang != selectedLocale}",
		ctx
	});

	return block;
}

// (104:6) <Button on:click={() => open = true}>
function create_default_slot_1(ctx) {
	let t_1_value = (Codes.getNativeName(/*selectedLang*/ ctx[2]) || `[${/*selectedLang*/ ctx[2]}]`) + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*selectedLang*/ 4 && t_1_value !== (t_1_value = (Codes.getNativeName(/*selectedLang*/ ctx[2]) || `[${/*selectedLang*/ ctx[2]}]`) + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(104:6) <Button on:click={() => open = true}>",
		ctx
	});

	return block;
}

// (106:4) {#if selectedLang != config.i18n.lang ||         selectedLocale != config.i18n.locale}
function create_if_block(ctx) {
	let span;

	const block = {
		c: function create() {
			span = element("span");
			span.textContent = `${/*t*/ ctx[4]('pages.welcome.language.restartNotice')}`;
			add_location(span, file, 107, 6, 2640);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(106:4) {#if selectedLang != config.i18n.lang ||         selectedLocale != config.i18n.locale}",
		ctx
	});

	return block;
}

// (111:2) <Button on:click={endLanguageSelection}>
function create_default_slot(ctx) {
	let t_1_value = /*t*/ ctx[4]('pages.welcome.common.next') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(111:2) <Button on:click={endLanguageSelection}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let contentdialog;
	let updating_open;
	let t0;
	let div3;
	let div0;
	let textblock;
	let t1;
	let div1;
	let languagelist;
	let updating_selected;
	let t2;
	let div2;
	let t4;
	let footer;
	let div4;
	let t5;
	let t6;
	let button;
	let current;

	function contentdialog_open_binding(value) {
		/*contentdialog_open_binding*/ ctx[9](value);
	}

	let contentdialog_props = {
		style: " overflow: auto; max-height: 100% ",
		$$slots: {
			footer: [create_footer_slot],
			default: [create_default_slot_4]
		},
		$$scope: { ctx }
	};

	if (/*open*/ ctx[3] !== void 0) {
		contentdialog_props.open = /*open*/ ctx[3];
	}

	contentdialog = new ContentDialog({
			props: contentdialog_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(contentdialog, 'open', contentdialog_open_binding));

	textblock = new TextBlock({
			props: {
				variant: "titleLarge",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	function languagelist_selected_binding_1(value) {
		/*languagelist_selected_binding_1*/ ctx[10](value);
	}

	let languagelist_props = { onlyAvailable: false };

	if (/*selectedLocale*/ ctx[1] !== void 0) {
		languagelist_props.selected = /*selectedLocale*/ ctx[1];
	}

	languagelist = new LanguageList({
			props: languagelist_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(languagelist, 'selected', languagelist_selected_binding_1));
	let if_block0 = /*selectedLang*/ ctx[2] != /*selectedLocale*/ ctx[1] && create_if_block_1(ctx);
	let if_block1 = (/*selectedLang*/ ctx[2] != /*config*/ ctx[0].i18n.lang || /*selectedLocale*/ ctx[1] != /*config*/ ctx[0].i18n.locale) && create_if_block(ctx);

	button = new Button({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*endLanguageSelection*/ ctx[5]);

	const block = {
		c: function create() {
			create_component(contentdialog.$$.fragment);
			t0 = space();
			div3 = element("div");
			div0 = element("div");
			create_component(textblock.$$.fragment);
			t1 = space();
			div1 = element("div");
			create_component(languagelist.$$.fragment);
			t2 = space();
			div2 = element("div");
			div2.textContent = `${/*t*/ ctx[4]('pages.welcome.language.note')}`;
			t4 = space();
			footer = element("footer");
			div4 = element("div");
			if (if_block0) if_block0.c();
			t5 = space();
			if (if_block1) if_block1.c();
			t6 = space();
			create_component(button.$$.fragment);
			attr_dev(div0, "class", "head svelte-1avxynn");
			add_location(div0, file, 86, 2, 1985);
			add_location(div1, file, 90, 2, 2104);
			attr_dev(div2, "class", "note svelte-1avxynn");
			add_location(div2, file, 94, 2, 2200);
			attr_dev(div3, "class", "main svelte-1avxynn");
			add_location(div3, file, 85, 0, 1963);
			attr_dev(div4, "class", "info svelte-1avxynn");
			add_location(div4, file, 100, 2, 2292);
			attr_dev(footer, "class", "svelte-1avxynn");
			add_location(footer, file, 99, 0, 2280);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(contentdialog, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, div0);
			mount_component(textblock, div0, null);
			append_dev(div3, t1);
			append_dev(div3, div1);
			mount_component(languagelist, div1, null);
			append_dev(div3, t2);
			append_dev(div3, div2);
			insert_dev(target, t4, anchor);
			insert_dev(target, footer, anchor);
			append_dev(footer, div4);
			if (if_block0) if_block0.m(div4, null);
			append_dev(div4, t5);
			if (if_block1) if_block1.m(div4, null);
			append_dev(footer, t6);
			mount_component(button, footer, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const contentdialog_changes = {};

			if (dirty & /*$$scope, open, selectedLang*/ 4108) {
				contentdialog_changes.$$scope = { dirty, ctx };
			}

			if (!updating_open && dirty & /*open*/ 8) {
				updating_open = true;
				contentdialog_changes.open = /*open*/ ctx[3];
				add_flush_callback(() => updating_open = false);
			}

			contentdialog.$set(contentdialog_changes);
			const textblock_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
			const languagelist_changes = {};

			if (!updating_selected && dirty & /*selectedLocale*/ 2) {
				updating_selected = true;
				languagelist_changes.selected = /*selectedLocale*/ ctx[1];
				add_flush_callback(() => updating_selected = false);
			}

			languagelist.$set(languagelist_changes);

			if (/*selectedLang*/ ctx[2] != /*selectedLocale*/ ctx[1]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*selectedLang, selectedLocale*/ 6) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div4, t5);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*selectedLang*/ ctx[2] != /*config*/ ctx[0].i18n.lang || /*selectedLocale*/ ctx[1] != /*config*/ ctx[0].i18n.locale) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div4, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			const button_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(contentdialog.$$.fragment, local);
			transition_in(textblock.$$.fragment, local);
			transition_in(languagelist.$$.fragment, local);
			transition_in(if_block0);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(contentdialog.$$.fragment, local);
			transition_out(textblock.$$.fragment, local);
			transition_out(languagelist.$$.fragment, local);
			transition_out(if_block0);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(contentdialog, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div3);
			destroy_component(textblock);
			destroy_component(languagelist);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(footer);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('LanguageChooser', slots, []);
	let { next } = $$props;
	let { config } = $$props;
	const { t } = window.nereid.i18n;
	let selectedLocale = 'en';
	let selectedLang = 'en';
	let open = false;

	async function endLanguageSelection() {
		if (selectedLang != config.i18n.lang || selectedLocale != config.i18n.locale) {
			requestIdleCallback(() => {
				window.nereid.app.restart();
			});
		}

		$$invalidate(0, config.i18n.lang = selectedLang, config);
		$$invalidate(0, config.i18n.locale = selectedLocale, config);
		await next(); // next() sets the config
	}

	const writable_props = ['next', 'config'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LanguageChooser> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(3, open = false);

	function languagelist_selected_binding(value) {
		selectedLang = value;
		($$invalidate(2, selectedLang), $$invalidate(1, selectedLocale));
	}

	function contentdialog_open_binding(value) {
		open = value;
		$$invalidate(3, open);
	}

	function languagelist_selected_binding_1(value) {
		selectedLocale = value;
		$$invalidate(1, selectedLocale);
	}

	const click_handler_1 = () => $$invalidate(3, open = true);

	$$self.$$set = $$props => {
		if ('next' in $$props) $$invalidate(6, next = $$props.next);
		if ('config' in $$props) $$invalidate(0, config = $$props.config);
	};

	$$self.$capture_state = () => ({
		Button,
		ContentDialog,
		TextBlock,
		LanguageList,
		Codes,
		next,
		config,
		t,
		selectedLocale,
		selectedLang,
		open,
		endLanguageSelection
	});

	$$self.$inject_state = $$props => {
		if ('next' in $$props) $$invalidate(6, next = $$props.next);
		if ('config' in $$props) $$invalidate(0, config = $$props.config);
		if ('selectedLocale' in $$props) $$invalidate(1, selectedLocale = $$props.selectedLocale);
		if ('selectedLang' in $$props) $$invalidate(2, selectedLang = $$props.selectedLang);
		if ('open' in $$props) $$invalidate(3, open = $$props.open);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selectedLocale*/ 2) {
			$: {
				let supported = window.nereid.i18n.getSupportedLanguage(selectedLocale);
				$$invalidate(2, selectedLang = supported);
			}
		}
	};

	return [
		config,
		selectedLocale,
		selectedLang,
		open,
		t,
		endLanguageSelection,
		next,
		click_handler,
		languagelist_selected_binding,
		contentdialog_open_binding,
		languagelist_selected_binding_1,
		click_handler_1
	];
}

class LanguageChooser extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { next: 6, config: 0 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "LanguageChooser",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*next*/ ctx[6] === undefined && !('next' in props)) {
			console.warn("<LanguageChooser> was created without expected prop 'next'");
		}

		if (/*config*/ ctx[0] === undefined && !('config' in props)) {
			console.warn("<LanguageChooser> was created without expected prop 'config'");
		}
	}

	get next() {
		throw new Error("<LanguageChooser>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set next(value) {
		throw new Error("<LanguageChooser>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get config() {
		throw new Error("<LanguageChooser>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set config(value) {
		throw new Error("<LanguageChooser>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default LanguageChooser;