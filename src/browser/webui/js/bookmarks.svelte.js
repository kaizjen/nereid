/* bookmarks.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_flush_callback,
	add_location,
	append_dev,
	append_styles,
	attr_dev,
	bind,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	group_outros,
	handle_promise,
	init,
	insert_dev,
	listen_dev,
	mount_component,
	noop,
	safe_not_equal,
	set_data_dev,
	set_style,
	space,
	text,
	transition_in,
	transition_out,
	update_await_block_branch,
	validate_each_argument,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import { Button, ListItem, TextBlock, TextBox } from "./modules/fluent-svelte/index.js";
import FolderView from "./Bookmarks/FolderView.svelte.js";
import Header from "./common/Header.svelte.js";
import * as Icons from "./icons.js";
const file = "bookmarks.svelte";

function add_css(target) {
	append_styles(target, "svelte-1kke6sy", ".wrapper.svelte-1kke6sy{display:flex;flex-direction:column;position:fixed;height:100%;width:100%}main.svelte-1kke6sy{display:flex}aside.svelte-1kke6sy{padding-top:20px;min-width:7cm}.contentwrapper.svelte-1kke6sy{flex-grow:1;padding-block:12px;display:flex;justify-content:center;height:100%}.content.svelte-1kke6sy{width:20cm}.addFolder.svelte-1kke6sy{margin:5px}.end.svelte-1kke6sy{display:flex;justify-content:end}.err.svelte-1kke6sy{color:red;font-size:small}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[22] = list[i];
	return child_ctx;
}

// (162:4) <Header name="bookmarks">
function create_default_slot_4(ctx) {
	let icons_bookmarks;
	let current;
	icons_bookmarks = new Icons.Bookmarks({ $$inline: true });

	const block = {
		c: function create() {
			create_component(icons_bookmarks.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(icons_bookmarks, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icons_bookmarks.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icons_bookmarks.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icons_bookmarks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(162:4) <Header name=\\\"bookmarks\\\">",
		ctx
	});

	return block;
}

// (1:0) <style>    .wrapper {      display: flex;      flex-direction: column;      position: fixed;      height: 100%;      width: 100%;    }
function create_catch_block(ctx) {
	const block = {
		c: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(1:0) <style>    .wrapper {      display: flex;      flex-direction: column;      position: fixed;      height: 100%;      width: 100%;    }",
		ctx
	});

	return block;
}

// (166:25)       <main style:height="calc(100% - {headerHeight}
function create_then_block(ctx) {
	let main;
	let aside;
	let textblock;
	let t0;
	let br;
	let t1;
	let t2;
	let div0;
	let t3;
	let current_block_type_index;
	let if_block;
	let t4;
	let div2;
	let div1;
	let folderview;
	let updating_selectedFolder;
	let style_height = `calc(100% - ${/*headerHeight*/ ctx[6]}px)`;
	let current;

	textblock = new TextBlock({
			props: {
				variant: "subtitle",
				style: "margin-bottom: 20px; padding-left: 17px",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value = /*folders*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*newFolder*/ ctx[3]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	function folderview_selectedFolder_binding(value) {
		/*folderview_selectedFolder_binding*/ ctx[20](value);
	}

	let folderview_props = {
		tt: /*tt*/ ctx[10],
		localizedName: /*getFolderName*/ ctx[11](/*selectedFolder*/ ctx[2]),
		update: /*update*/ ctx[12],
		isInFolders: /*folders*/ ctx[1].includes.bind(/*folders*/ ctx[1])
	};

	if (/*selectedFolder*/ ctx[2] !== void 0) {
		folderview_props.selectedFolder = /*selectedFolder*/ ctx[2];
	}

	folderview = new FolderView({ props: folderview_props, $$inline: true });
	binding_callbacks.push(() => bind(folderview, 'selectedFolder', folderview_selectedFolder_binding));

	const block = {
		c: function create() {
			main = element("main");
			aside = element("aside");
			create_component(textblock.$$.fragment);
			t0 = space();
			br = element("br");
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			div0 = element("div");
			t3 = space();
			if_block.c();
			t4 = space();
			div2 = element("div");
			div1 = element("div");
			create_component(folderview.$$.fragment);
			add_location(br, file, 169, 8, 4059);
			attr_dev(div0, "class", "separator");
			add_location(div0, file, 178, 8, 4338);
			attr_dev(aside, "class", "svelte-1kke6sy");
			add_location(aside, file, 167, 6, 3927);
			attr_dev(div1, "class", "content svelte-1kke6sy");
			add_location(div1, file, 200, 8, 5126);
			attr_dev(div2, "class", "contentwrapper svelte-1kke6sy");
			add_location(div2, file, 199, 6, 5088);
			attr_dev(main, "class", "svelte-1kke6sy");
			set_style(main, "height", style_height, false);
			add_location(main, file, 166, 4, 3868);
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, aside);
			mount_component(textblock, aside, null);
			append_dev(aside, t0);
			append_dev(aside, br);
			append_dev(aside, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(aside, null);
			}

			append_dev(aside, t2);
			append_dev(aside, div0);
			append_dev(aside, t3);
			if_blocks[current_block_type_index].m(aside, null);
			append_dev(main, t4);
			append_dev(main, div2);
			append_dev(div2, div1);
			mount_component(folderview, div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textblock_changes = {};

			if (dirty & /*$$scope*/ 33554432) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);

			if (dirty & /*selectedFolder, folders, getFolderName*/ 2054) {
				each_value = /*folders*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(aside, t2);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(aside, null);
			}

			const folderview_changes = {};
			if (dirty & /*selectedFolder*/ 4) folderview_changes.localizedName = /*getFolderName*/ ctx[11](/*selectedFolder*/ ctx[2]);
			if (dirty & /*folders*/ 2) folderview_changes.isInFolders = /*folders*/ ctx[1].includes.bind(/*folders*/ ctx[1]);

			if (!updating_selectedFolder && dirty & /*selectedFolder*/ 4) {
				updating_selectedFolder = true;
				folderview_changes.selectedFolder = /*selectedFolder*/ ctx[2];
				add_flush_callback(() => updating_selectedFolder = false);
			}

			folderview.$set(folderview_changes);

			if (dirty & /*headerHeight*/ 64 && style_height !== (style_height = `calc(100% - ${/*headerHeight*/ ctx[6]}px)`)) {
				set_style(main, "height", style_height, false);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(if_block);
			transition_in(folderview.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(if_block);
			transition_out(folderview.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			destroy_component(textblock);
			destroy_each(each_blocks, detaching);
			if_blocks[current_block_type_index].d();
			destroy_component(folderview);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(166:25)       <main style:height=\\\"calc(100% - {headerHeight}",
		ctx
	});

	return block;
}

// (169:8) <TextBlock variant="subtitle" style="margin-bottom: 20px; padding-left: 17px">
function create_default_slot_3(ctx) {
	let t_1_value = /*tt*/ ctx[10]('folders') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(169:8) <TextBlock variant=\\\"subtitle\\\" style=\\\"margin-bottom: 20px; padding-left: 17px\\\">",
		ctx
	});

	return block;
}

// (172:10) <ListItem              selected={selectedFolder == folderName}              on:click={() => selectedFolder = folderName}            >
function create_default_slot_2(ctx) {
	let t_1_value = /*getFolderName*/ ctx[11](/*folderName*/ ctx[22]) + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*folders*/ 2 && t_1_value !== (t_1_value = /*getFolderName*/ ctx[11](/*folderName*/ ctx[22]) + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(172:10) <ListItem              selected={selectedFolder == folderName}              on:click={() => selectedFolder = folderName}            >",
		ctx
	});

	return block;
}

// (171:8) {#each folders as folderName}
function create_each_block(ctx) {
	let listitem;
	let current;

	function click_handler() {
		return /*click_handler*/ ctx[16](/*folderName*/ ctx[22]);
	}

	listitem = new ListItem({
			props: {
				selected: /*selectedFolder*/ ctx[2] == /*folderName*/ ctx[22],
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	listitem.$on("click", click_handler);

	const block = {
		c: function create() {
			create_component(listitem.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(listitem, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const listitem_changes = {};
			if (dirty & /*selectedFolder, folders*/ 6) listitem_changes.selected = /*selectedFolder*/ ctx[2] == /*folderName*/ ctx[22];

			if (dirty & /*$$scope, folders*/ 33554434) {
				listitem_changes.$$scope = { dirty, ctx };
			}

			listitem.$set(listitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(listitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(listitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(listitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(171:8) {#each folders as folderName}",
		ctx
	});

	return block;
}

// (190:8) {:else}
function create_else_block(ctx) {
	let div1;
	let textbox;
	let updating_value;
	let updating_inputElement;
	let t0;
	let span;
	let t1;
	let t2;
	let div0;
	let button;
	let current;

	function textbox_value_binding(value) {
		/*textbox_value_binding*/ ctx[18](value);
	}

	function textbox_inputElement_binding(value) {
		/*textbox_inputElement_binding*/ ctx[19](value);
	}

	let textbox_props = {
		placeholder: /*tt*/ ctx[10]('addFolder.placeholder')
	};

	if (/*newFolderName*/ ctx[4] !== void 0) {
		textbox_props.value = /*newFolderName*/ ctx[4];
	}

	if (/*inputElement*/ ctx[7] !== void 0) {
		textbox_props.inputElement = /*inputElement*/ ctx[7];
	}

	textbox = new TextBox({ props: textbox_props, $$inline: true });
	binding_callbacks.push(() => bind(textbox, 'value', textbox_value_binding));
	binding_callbacks.push(() => bind(textbox, 'inputElement', textbox_inputElement_binding));

	button = new Button({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*addFolder*/ ctx[13]);

	const block = {
		c: function create() {
			div1 = element("div");
			create_component(textbox.$$.fragment);
			t0 = space();
			span = element("span");
			t1 = text(/*errorText*/ ctx[8]);
			t2 = space();
			div0 = element("div");
			create_component(button.$$.fragment);
			attr_dev(span, "class", "err svelte-1kke6sy");
			add_location(span, file, 192, 12, 4862);
			attr_dev(div0, "class", "end svelte-1kke6sy");
			add_location(div0, file, 193, 12, 4912);
			attr_dev(div1, "class", "addFolder svelte-1kke6sy");
			add_location(div1, file, 190, 10, 4713);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			mount_component(textbox, div1, null);
			append_dev(div1, t0);
			append_dev(div1, span);
			append_dev(span, t1);
			append_dev(div1, t2);
			append_dev(div1, div0);
			mount_component(button, div0, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const textbox_changes = {};

			if (!updating_value && dirty & /*newFolderName*/ 16) {
				updating_value = true;
				textbox_changes.value = /*newFolderName*/ ctx[4];
				add_flush_callback(() => updating_value = false);
			}

			if (!updating_inputElement && dirty & /*inputElement*/ 128) {
				updating_inputElement = true;
				textbox_changes.inputElement = /*inputElement*/ ctx[7];
				add_flush_callback(() => updating_inputElement = false);
			}

			textbox.$set(textbox_changes);
			if (!current || dirty & /*errorText*/ 256) set_data_dev(t1, /*errorText*/ ctx[8]);
			const button_changes = {};

			if (dirty & /*$$scope*/ 33554432) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textbox.$$.fragment, local);
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textbox.$$.fragment, local);
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(textbox);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(190:8) {:else}",
		ctx
	});

	return block;
}

// (180:8) {#if !newFolder}
function create_if_block(ctx) {
	let listitem;
	let current;

	listitem = new ListItem({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	listitem.$on("click", /*click_handler_1*/ ctx[17]);

	const block = {
		c: function create() {
			create_component(listitem.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(listitem, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const listitem_changes = {};

			if (dirty & /*$$scope*/ 33554432) {
				listitem_changes.$$scope = { dirty, ctx };
			}

			listitem.$set(listitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(listitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(listitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(listitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(180:8) {#if !newFolder}",
		ctx
	});

	return block;
}

// (195:14) <Button on:click={addFolder}>
function create_default_slot_1(ctx) {
	let t_1_value = /*tt*/ ctx[10]('addFolder.button-add') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(195:14) <Button on:click={addFolder}>",
		ctx
	});

	return block;
}

// (182:10) <ListItem on:click={() => {              newFolder = true;              requestAnimationFrame(() => {                inputElement.focus()              })            }}>
function create_default_slot(ctx) {
	let t_1_value = /*tt*/ ctx[10]('button-addFolder') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(182:10) <ListItem on:click={() => {              newFolder = true;              requestAnimationFrame(() => {                inputElement.focus()              })            }}>",
		ctx
	});

	return block;
}

// (1:0) <style>    .wrapper {      display: flex;      flex-direction: column;      position: fixed;      height: 100%;      width: 100%;    }
function create_pending_block(ctx) {
	const block = {
		c: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(1:0) <style>    .wrapper {      display: flex;      flex-direction: column;      position: fixed;      height: 100%;      width: 100%;    }",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let t1;
	let div;
	let header1;
	let header0;
	let t2;
	let promise_1;
	let current;
	let mounted;
	let dispose;
	document.title = title_value = /*t*/ ctx[9]('common.bookmarks');

	header0 = new Header({
			props: {
				name: "bookmarks",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: false,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 21,
		blocks: [,,,]
	};

	handle_promise(promise_1 = /*promise*/ ctx[0], info);

	const block = {
		c: function create() {
			t0 = space();
			t1 = space();
			div = element("div");
			header1 = element("header");
			create_component(header0.$$.fragment);
			t2 = space();
			info.block.c();
			add_location(header1, file, 160, 2, 3715);
			attr_dev(div, "class", "wrapper svelte-1kke6sy");
			add_location(div, file, 159, 0, 3690);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, header1);
			mount_component(header0, header1, null);
			/*header1_binding*/ ctx[15](header1);
			append_dev(div, t2);
			info.block.m(div, info.anchor = null);
			info.mount = () => div;
			info.anchor = null;
			current = true;

			if (!mounted) {
				dispose = listen_dev(document.body, "keydown", /*handleKeydown*/ ctx[14], false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;

			if ((!current || dirty & /*t*/ 512) && title_value !== (title_value = /*t*/ ctx[9]('common.bookmarks'))) {
				document.title = title_value;
			}

			const header0_changes = {};

			if (dirty & /*$$scope*/ 33554432) {
				header0_changes.$$scope = { dirty, ctx };
			}

			header0.$set(header0_changes);
			info.ctx = ctx;

			if (dirty & /*promise*/ 1 && promise_1 !== (promise_1 = /*promise*/ ctx[0]) && handle_promise(promise_1, info)) {
				
			} else {
				update_await_block_branch(info, ctx, dirty);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header0.$$.fragment, local);
			transition_in(info.block);
			current = true;
		},
		o: function outro(local) {
			transition_out(header0.$$.fragment, local);

			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div);
			destroy_component(header0);
			/*header1_binding*/ ctx[15](null);
			info.block.d();
			info.token = null;
			info = null;
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Bookmarks', slots, []);
	window.action = decodeURIComponent(location.hash.slice(1));
	location.hash = '';
	const { t } = window.nereid.i18n;

	function tt(str, ...args) {
		return t(`pages.bookmarks.${str}`, ...args);
	}

	function getFolderName(folderName) {
		if (folderName.startsWith('@')) {
			return t(`common.bookmarkFolders.${folderName.slice(1)}`);
		} else return folderName;
	}

	let promise;
	window.isFirstTime = true;

	function update() {
		$$invalidate(0, promise = new Promise(async y => {
				$$invalidate(1, folders = await window.nereid.userdata.bookmarks.getAllFolders());
				let actionFolder = window.action.split('/')[0];

				if (isFirstTime && folders.includes(actionFolder)) {
					$$invalidate(2, selectedFolder = actionFolder);
				} else {
					$$invalidate(2, selectedFolder = folders[0]);
				}

				y();
			}));
	}

	update();
	let folders = [];
	let selectedFolder = '';
	let newFolder = false;
	let newFolderName = '';
	let headerElement;
	let headerHeight = 0;

	requestAnimationFrame(() => {
		// im very sad that i had to use js, because css just didn't behave how i wanted it to
		$$invalidate(6, headerHeight = headerElement.getBoundingClientRect().height);
	});

	let inputElement;
	let errorText = '';

	async function addFolder() {
		update();
		await promise;

		if (newFolderName == '' || newFolderName.startsWith('@') || folders.includes(newFolderName)) {
			const flashTime = 150;

			// don't look at this ugly mess
			setTimeout(
				() => {
					inputElement?.focus();

					setTimeout(
						() => {
							inputElement?.blur();

							setTimeout(
								() => {
									inputElement?.focus();

									setTimeout(
										() => {
											inputElement?.blur();

											setTimeout(
												() => {
													inputElement?.focus();
												},
												flashTime
											);
										},
										flashTime
									);
								},
								flashTime
							);
						},
						flashTime
					);
				},
				flashTime
			);

			$$invalidate(8, errorText = newFolderName == ''
			? tt('addFolder.error-empty')
			: newFolderName.startsWith('@')
				? tt('addFolder.error-illegalName')
				: tt('addFolder.error-alreadyExists'));

			setTimeout(
				() => {
					$$invalidate(8, errorText = '');
				},
				2000
			);

			return;
		}

		try {
			await window.nereid.userdata.bookmarks.addFolder({ folder: newFolderName });
			update();
			$$invalidate(2, selectedFolder = newFolderName);
			$$invalidate(4, newFolderName = '');
			$$invalidate(3, newFolder = false);
		} catch(e) {
			$$invalidate(8, errorText = e);
		}
	}

	function handleKeydown({ key }) {
		if (key == 'Escape' && newFolder) {
			$$invalidate(4, newFolderName = '');
			$$invalidate(3, newFolder = false);
		}

		if (key == 'Enter' && newFolder) {
			addFolder();
		}
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Bookmarks> was created with unknown prop '${key}'`);
	});

	function header1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			headerElement = $$value;
			$$invalidate(5, headerElement);
		});
	}

	const click_handler = folderName => $$invalidate(2, selectedFolder = folderName);

	const click_handler_1 = () => {
		$$invalidate(3, newFolder = true);

		requestAnimationFrame(() => {
			inputElement.focus();
		});
	};

	function textbox_value_binding(value) {
		newFolderName = value;
		$$invalidate(4, newFolderName);
	}

	function textbox_inputElement_binding(value) {
		inputElement = value;
		$$invalidate(7, inputElement);
	}

	function folderview_selectedFolder_binding(value) {
		selectedFolder = value;
		$$invalidate(2, selectedFolder);
	}

	$$self.$capture_state = () => ({
		Button,
		ListItem,
		TextBlock,
		TextBox,
		FolderView,
		Header,
		Icons,
		t,
		tt,
		getFolderName,
		promise,
		update,
		folders,
		selectedFolder,
		newFolder,
		newFolderName,
		headerElement,
		headerHeight,
		inputElement,
		errorText,
		addFolder,
		handleKeydown
	});

	$$self.$inject_state = $$props => {
		if ('promise' in $$props) $$invalidate(0, promise = $$props.promise);
		if ('folders' in $$props) $$invalidate(1, folders = $$props.folders);
		if ('selectedFolder' in $$props) $$invalidate(2, selectedFolder = $$props.selectedFolder);
		if ('newFolder' in $$props) $$invalidate(3, newFolder = $$props.newFolder);
		if ('newFolderName' in $$props) $$invalidate(4, newFolderName = $$props.newFolderName);
		if ('headerElement' in $$props) $$invalidate(5, headerElement = $$props.headerElement);
		if ('headerHeight' in $$props) $$invalidate(6, headerHeight = $$props.headerHeight);
		if ('inputElement' in $$props) $$invalidate(7, inputElement = $$props.inputElement);
		if ('errorText' in $$props) $$invalidate(8, errorText = $$props.errorText);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		promise,
		folders,
		selectedFolder,
		newFolder,
		newFolderName,
		headerElement,
		headerHeight,
		inputElement,
		errorText,
		t,
		tt,
		getFolderName,
		update,
		addFolder,
		handleKeydown,
		header1_binding,
		click_handler,
		click_handler_1,
		textbox_value_binding,
		textbox_inputElement_binding,
		folderview_selectedFolder_binding
	];
}

class Bookmarks extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {}, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Bookmarks",
			options,
			id: create_fragment.name
		});
	}
}

export default Bookmarks;