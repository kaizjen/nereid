/* Header.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	append_styles,
	attr_dev,
	create_component,
	create_slot,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert_dev,
	mount_component,
	noop,
	not_equal,
	set_data_dev,
	space,
	text,
	transition_in,
	transition_out,
	update_slot_base,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import { IconButton, TextBlock, MenuFlyout, MenuFlyoutItem } from "../modules/fluent-svelte/index.js";
import * as Icons from "../icons.js";
const file = "Header.svelte";

function add_css(target) {
	append_styles(target, "svelte-9osp2m", "div.svelte-9osp2m{display:flex;padding:8px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGVhZGVyLnN2ZWx0ZSIsInNvdXJjZXMiOlsiSGVhZGVyLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c3R5bGU+XHJcbiAgZGl2IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBwYWRkaW5nOiA4cHg7XHJcbiAgfVxyXG48L3N0eWxlPlxyXG48c3ZlbHRlOm9wdGlvbnMgaW1tdXRhYmxlPXt0cnVlfSAvPlxyXG48c2NyaXB0PlxyXG4gIGltcG9ydCB7IEljb25CdXR0b24sIFRleHRCbG9jaywgTWVudUZseW91dCwgTWVudUZseW91dEl0ZW0gfSBmcm9tIFwiZmx1ZW50LXN2ZWx0ZVwiO1xyXG4gIGltcG9ydCAqIGFzIEljb25zIGZyb20gXCIuLi9pY29ucy5qc1wiO1xyXG5cclxuICBleHBvcnQgbGV0IG5hbWUgPSBcIjw/Pz8+XCI7XHJcblxyXG4gIGNvbnN0IHsgdCB9ID0gd2luZG93Lm5lcmVpZC5pMThuXHJcblxyXG4gIGZ1bmN0aW9uIGdvdG9GKHBhZ2UpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHdpbmRvdy5sb2NhdGlvbiA9ICduZXJlaWQ6Ly8nK3BhZ2VcclxuICAgIH1cclxuICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPGRpdj5cclxuICA8TWVudUZseW91dCBwbGFjZW1lbnQ9XCJib3R0b21cIiBhbGlnbm1lbnQ9XCJzdGFydFwiPlxyXG4gICAgPEljb25CdXR0b24gc3R5bGU9XCJtYXJnaW4tcmlnaHQ6IDEwcHhcIj5cclxuICAgICAgPHNsb3Q+PC9zbG90PlxyXG4gICAgPC9JY29uQnV0dG9uPlxyXG4gICAgPHN2ZWx0ZTpmcmFnbWVudCBzbG90PVwiZmx5b3V0XCI+XHJcblxyXG4gICAgICA8TWVudUZseW91dEl0ZW0gb246Y2xpY2s9e2dvdG9GKCdzZXR0aW5ncycpfT5cclxuICAgICAgICA8SWNvbnMuU2V0dGluZ3Mgc2xvdD1cImljb25cIiAvPlxyXG4gICAgICAgIHt0KCdjb21tb24uc2V0dGluZ3MnKX1cclxuICAgICAgPC9NZW51Rmx5b3V0SXRlbT5cclxuXHJcbiAgICAgIDxNZW51Rmx5b3V0SXRlbSBvbjpjbGljaz17Z290b0YoJ2hpc3RvcnknKX0+XHJcbiAgICAgICAgPEljb25zLkhpc3Rvcnkgc2xvdD1cImljb25cIiAvPlxyXG4gICAgICAgIHt0KCdjb21tb24uaGlzdG9yeScpfVxyXG4gICAgICA8L01lbnVGbHlvdXRJdGVtPlxyXG5cclxuICAgICAgPE1lbnVGbHlvdXRJdGVtIG9uOmNsaWNrPXtnb3RvRignYm9va21hcmtzJyl9PlxyXG4gICAgICAgIDxJY29ucy5Cb29rbWFya3Mgc2xvdD1cImljb25cIiAvPlxyXG4gICAgICAgIHt0KCdjb21tb24uYm9va21hcmtzJyl9XHJcbiAgICAgIDwvTWVudUZseW91dEl0ZW0+XHJcblxyXG4gICAgICA8TWVudUZseW91dEl0ZW0gb246Y2xpY2s9e2dvdG9GKCdhYm91dCcpfT5cclxuICAgICAgICA8SWNvbnMuQWJvdXQgc2xvdD1cImljb25cIiAvPlxyXG4gICAgICAgIHt0KCdjb21tb24uYWJvdXQnKX1cclxuICAgICAgPC9NZW51Rmx5b3V0SXRlbT5cclxuXHJcbiAgICA8L3N2ZWx0ZTpmcmFnbWVudD5cclxuICA8L01lbnVGbHlvdXQ+XHJcbiAgPFRleHRCbG9jayB2YXJpYW50PVwic3VidGl0bGVcIj5cclxuICAgIHt0KCdjb21tb24uJytuYW1lKX1cclxuICA8L1RleHRCbG9jaz5cclxuPC9kaXY+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNFLEdBQUcsY0FBQyxDQUFDLEFBQ0gsT0FBTyxDQUFFLElBQUksQ0FDYixPQUFPLENBQUUsR0FBRyxBQUNkLENBQUMifQ== */");
}

// (25:4) <IconButton style="margin-right: 10px">
function create_default_slot_6(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(25:4) <IconButton style=\\\"margin-right: 10px\\\">",
		ctx
	});

	return block;
}

// (24:2) <MenuFlyout placement="bottom" alignment="start">
function create_default_slot_5(ctx) {
	let iconbutton;
	let current;

	iconbutton = new IconButton({
			props: {
				style: "margin-right: 10px",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(iconbutton.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(iconbutton, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const iconbutton_changes = {};

			if (dirty & /*$$scope*/ 8) {
				iconbutton_changes.$$scope = { dirty, ctx };
			}

			iconbutton.$set(iconbutton_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(iconbutton, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(24:2) <MenuFlyout placement=\\\"bottom\\\" alignment=\\\"start\\\">",
		ctx
	});

	return block;
}

// (30:6) <MenuFlyoutItem on:click={gotoF('settings')}>
function create_default_slot_4(ctx) {
	let t_1_value = /*t*/ ctx[1]('common.settings') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(30:6) <MenuFlyoutItem on:click={gotoF('settings')}>",
		ctx
	});

	return block;
}

// (31:8) 
function create_icon_slot_3(ctx) {
	let icons_settings;
	let current;
	icons_settings = new Icons.Settings({ props: { slot: "icon" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(icons_settings.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(icons_settings, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icons_settings.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icons_settings.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icons_settings, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_icon_slot_3.name,
		type: "slot",
		source: "(31:8) ",
		ctx
	});

	return block;
}

// (35:6) <MenuFlyoutItem on:click={gotoF('history')}>
function create_default_slot_3(ctx) {
	let t_1_value = /*t*/ ctx[1]('common.history') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(35:6) <MenuFlyoutItem on:click={gotoF('history')}>",
		ctx
	});

	return block;
}

// (36:8) 
function create_icon_slot_2(ctx) {
	let icons_history;
	let current;
	icons_history = new Icons.History({ props: { slot: "icon" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(icons_history.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(icons_history, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icons_history.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icons_history.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icons_history, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_icon_slot_2.name,
		type: "slot",
		source: "(36:8) ",
		ctx
	});

	return block;
}

// (40:6) <MenuFlyoutItem on:click={gotoF('bookmarks')}>
function create_default_slot_2(ctx) {
	let t_1_value = /*t*/ ctx[1]('common.bookmarks') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(40:6) <MenuFlyoutItem on:click={gotoF('bookmarks')}>",
		ctx
	});

	return block;
}

// (41:8) 
function create_icon_slot_1(ctx) {
	let icons_bookmarks;
	let current;
	icons_bookmarks = new Icons.Bookmarks({ props: { slot: "icon" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(icons_bookmarks.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(icons_bookmarks, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icons_bookmarks.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icons_bookmarks.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icons_bookmarks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_icon_slot_1.name,
		type: "slot",
		source: "(41:8) ",
		ctx
	});

	return block;
}

// (45:6) <MenuFlyoutItem on:click={gotoF('about')}>
function create_default_slot_1(ctx) {
	let t_1_value = /*t*/ ctx[1]('common.about') + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(45:6) <MenuFlyoutItem on:click={gotoF('about')}>",
		ctx
	});

	return block;
}

// (46:8) 
function create_icon_slot(ctx) {
	let icons_about;
	let current;
	icons_about = new Icons.About({ props: { slot: "icon" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(icons_about.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(icons_about, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icons_about.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icons_about.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icons_about, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_icon_slot.name,
		type: "slot",
		source: "(46:8) ",
		ctx
	});

	return block;
}

// (28:4) <svelte:fragment slot="flyout">
function create_flyout_slot(ctx) {
	let menuflyoutitem0;
	let t0;
	let menuflyoutitem1;
	let t1;
	let menuflyoutitem2;
	let t2;
	let menuflyoutitem3;
	let current;

	menuflyoutitem0 = new MenuFlyoutItem({
			props: {
				$$slots: {
					icon: [create_icon_slot_3],
					default: [create_default_slot_4]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	menuflyoutitem0.$on("click", gotoF('settings'));

	menuflyoutitem1 = new MenuFlyoutItem({
			props: {
				$$slots: {
					icon: [create_icon_slot_2],
					default: [create_default_slot_3]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	menuflyoutitem1.$on("click", gotoF('history'));

	menuflyoutitem2 = new MenuFlyoutItem({
			props: {
				$$slots: {
					icon: [create_icon_slot_1],
					default: [create_default_slot_2]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	menuflyoutitem2.$on("click", gotoF('bookmarks'));

	menuflyoutitem3 = new MenuFlyoutItem({
			props: {
				$$slots: {
					icon: [create_icon_slot],
					default: [create_default_slot_1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	menuflyoutitem3.$on("click", gotoF('about'));

	const block = {
		c: function create() {
			create_component(menuflyoutitem0.$$.fragment);
			t0 = space();
			create_component(menuflyoutitem1.$$.fragment);
			t1 = space();
			create_component(menuflyoutitem2.$$.fragment);
			t2 = space();
			create_component(menuflyoutitem3.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(menuflyoutitem0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(menuflyoutitem1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(menuflyoutitem2, target, anchor);
			insert_dev(target, t2, anchor);
			mount_component(menuflyoutitem3, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const menuflyoutitem0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				menuflyoutitem0_changes.$$scope = { dirty, ctx };
			}

			menuflyoutitem0.$set(menuflyoutitem0_changes);
			const menuflyoutitem1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				menuflyoutitem1_changes.$$scope = { dirty, ctx };
			}

			menuflyoutitem1.$set(menuflyoutitem1_changes);
			const menuflyoutitem2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				menuflyoutitem2_changes.$$scope = { dirty, ctx };
			}

			menuflyoutitem2.$set(menuflyoutitem2_changes);
			const menuflyoutitem3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				menuflyoutitem3_changes.$$scope = { dirty, ctx };
			}

			menuflyoutitem3.$set(menuflyoutitem3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(menuflyoutitem0.$$.fragment, local);
			transition_in(menuflyoutitem1.$$.fragment, local);
			transition_in(menuflyoutitem2.$$.fragment, local);
			transition_in(menuflyoutitem3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(menuflyoutitem0.$$.fragment, local);
			transition_out(menuflyoutitem1.$$.fragment, local);
			transition_out(menuflyoutitem2.$$.fragment, local);
			transition_out(menuflyoutitem3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(menuflyoutitem0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(menuflyoutitem1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(menuflyoutitem2, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(menuflyoutitem3, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_flyout_slot.name,
		type: "slot",
		source: "(28:4) <svelte:fragment slot=\\\"flyout\\\">",
		ctx
	});

	return block;
}

// (52:2) <TextBlock variant="subtitle">
function create_default_slot(ctx) {
	let t_1_value = /*t*/ ctx[1]('common.' + /*name*/ ctx[0]) + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*name*/ 1 && t_1_value !== (t_1_value = /*t*/ ctx[1]('common.' + /*name*/ ctx[0]) + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(52:2) <TextBlock variant=\\\"subtitle\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let menuflyout;
	let t_1;
	let textblock;
	let current;

	menuflyout = new MenuFlyout({
			props: {
				placement: "bottom",
				alignment: "start",
				$$slots: {
					flyout: [create_flyout_slot],
					default: [create_default_slot_5]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	textblock = new TextBlock({
			props: {
				variant: "subtitle",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(menuflyout.$$.fragment);
			t_1 = space();
			create_component(textblock.$$.fragment);
			attr_dev(div, "class", "svelte-9osp2m");
			add_location(div, file, 22, 0, 437);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(menuflyout, div, null);
			append_dev(div, t_1);
			mount_component(textblock, div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const menuflyout_changes = {};

			if (dirty & /*$$scope*/ 8) {
				menuflyout_changes.$$scope = { dirty, ctx };
			}

			menuflyout.$set(menuflyout_changes);
			const textblock_changes = {};

			if (dirty & /*$$scope, name*/ 9) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(menuflyout.$$.fragment, local);
			transition_in(textblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(menuflyout.$$.fragment, local);
			transition_out(textblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(menuflyout);
			destroy_component(textblock);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function gotoF(page) {
	return function () {
		window.location = 'nereid://' + page;
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Header', slots, ['default']);
	let { name = "<???>" } = $$props;
	const { t } = window.nereid.i18n;
	const writable_props = ['name'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Header> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		IconButton,
		TextBlock,
		MenuFlyout,
		MenuFlyoutItem,
		Icons,
		name,
		t,
		gotoF
	});

	$$self.$inject_state = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [name, t, slots, $$scope];
}

class Header extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, not_equal, { name: 0 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Header",
			options,
			id: create_fragment.name
		});
	}

	get name() {
		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Header;