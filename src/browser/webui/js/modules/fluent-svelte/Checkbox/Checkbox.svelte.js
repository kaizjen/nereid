/* Checkbox.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	action_destroyer,
	add_location,
	add_render_callback,
	append_dev,
	append_styles,
	assign,
	attr_dev,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_slot,
	detach_dev,
	dispatch_dev,
	element,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	group_outros,
	init,
	insert_dev,
	listen_dev,
	run_all,
	safe_not_equal,
	set_attributes,
	space,
	svg_element,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import { get_current_component } from "nereid://.svelte/internal/index.mjs";
import { createEventForwarder } from "../internal.js";
const file = "Checkbox.svelte";

function add_css(target) {
	append_styles(target, "svelte-4ss5hf", ".checkbox.svelte-4ss5hf.svelte-4ss5hf{-webkit-appearance:none;-moz-appearance:none;appearance:none;background-clip:padding-box;background-color:var(--fds-control-alt-fill-secondary);block-size:20px;border:1px solid var(--fds-control-strong-stroke-default);border-radius:var(--fds-control-corner-radius);font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;inline-size:20px;line-height:20px;margin:0;outline:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.checkbox.svelte-4ss5hf.svelte-4ss5hf:focus-visible{box-shadow:var(--fds-focus-stroke)}.checkbox.svelte-4ss5hf.svelte-4ss5hf:hover{background-color:var(--fds-control-alt-fill-tertiary)}.checkbox.svelte-4ss5hf.svelte-4ss5hf:active{background-color:var(--fds-control-alt-fill-quarternary);border-color:var(--fds-control-strong-stroke-disabled)}.checkbox.svelte-4ss5hf:active+.checkbox-glyph.svelte-4ss5hf{color:var(--fds-text-on-accent-secondary)}.checkbox.svelte-4ss5hf.svelte-4ss5hf:disabled{background-color:var(--fds-control-alt-fill-disabled);border-color:var(--fds-control-strong-stroke-disabled);pointer-events:none}.checkbox.svelte-4ss5hf.svelte-4ss5hf:checked,.checkbox.svelte-4ss5hf.svelte-4ss5hf:indeterminate{background-color:var(--fds-accent-default);border:none}.checkbox.svelte-4ss5hf.svelte-4ss5hf:checked:hover,.checkbox.svelte-4ss5hf.svelte-4ss5hf:indeterminate:hover{background-color:var(--fds-accent-secondary)}.checkbox.svelte-4ss5hf.svelte-4ss5hf:checked:active,.checkbox.svelte-4ss5hf.svelte-4ss5hf:indeterminate:active{background-color:var(--fds-accent-tertiary)}.checkbox.svelte-4ss5hf.svelte-4ss5hf:checked:disabled,.checkbox.svelte-4ss5hf.svelte-4ss5hf:indeterminate:disabled{background-color:var(--fds-accent-disabled);border-color:var(--fds-control-strong-stroke-disabled)}.checkbox.svelte-4ss5hf:checked:disabled+.checkbox-glyph.svelte-4ss5hf,.checkbox.svelte-4ss5hf:indeterminate:disabled+.checkbox-glyph.svelte-4ss5hf{color:var(--fds-text-on-accent-disabled)}.checkbox:checked+.checkbox-glyph.svelte-4ss5hf .path-checkmark.svelte-4ss5hf,.checkbox:indeterminate+.checkbox-glyph.svelte-4ss5hf .path-checkmark.svelte-4ss5hf{stroke-dashoffset:0;transition:var(--fds-control-normal-duration) cubic-bezier(.55,0,0,1) stroke-dashoffset}.checkbox-container.svelte-4ss5hf.svelte-4ss5hf{align-items:center;color:var(--fds-text-primary);display:inline-flex;font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;line-height:20px;min-block-size:32px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.checkbox-container.svelte-4ss5hf>span.svelte-4ss5hf{-webkit-padding-start:8px;padding-inline-start:8px}.checkbox-container.disabled.svelte-4ss5hf>span.svelte-4ss5hf{color:var(--fds-text-disabled)}.checkbox-inner.svelte-4ss5hf.svelte-4ss5hf{align-items:center;display:flex;justify-content:center;position:relative}.checkbox-glyph.svelte-4ss5hf.svelte-4ss5hf{block-size:12px;color:inherit;color:var(--fds-text-on-accent-primary);inline-size:12px;position:absolute}.checkbox-glyph.svelte-4ss5hf path.svelte-4ss5hf{transform-origin:center}.checkbox-glyph.svelte-4ss5hf .path-checkmark.svelte-4ss5hf{stroke:currentColor;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:20.5;stroke-dashoffset:20.5;transform:scale(1.2)}.checkbox-glyph.svelte-4ss5hf .path-indeterminate.svelte-4ss5hf{fill:currentColor;transform:scale(.6666666667) translateX(80px) translateY(240px)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
}

// (54:3) {:else}
function create_else_block(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			attr_dev(path, "class", "path-checkmark svelte-4ss5hf");
			attr_dev(path, "d", "M 4.5303 12.9697 L 8.5 16.9393 L 18.9697 6.4697");
			attr_dev(path, "fill", "none");
			add_location(path, file, 54, 4, 2594);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(54:3) {:else}",
		ctx
	});

	return block;
}

// (49:3) {#if indeterminate}
function create_if_block_1(ctx) {
	let path;

	const block = {
		c: function create() {
			path = svg_element("path");
			attr_dev(path, "class", "path-indeterminate svelte-4ss5hf");
			attr_dev(path, "d", "M213.5,554.5C207.5,554.5 201.917,553.417 196.75,551.25C191.583,549.083 187.083,546.083 183.25,542.25C179.417,538.417 176.333,533.917 174,528.75C171.667,523.583 170.5,518 170.5,512C170.5,506 171.667,500.417 174,495.25C176.333,490.083 179.417,485.583 183.25,481.75C187.083,477.917 191.583,474.917 196.75,472.75C201.917,470.583 207.5,469.5 213.5,469.5L810.5,469.5C816.5,469.5 822.083,470.583 827.25,472.75C832.417,474.917 836.917,477.917 840.75,481.75C844.583,485.583 847.667,490.083 850,495.25C852.333,500.417 853.5,506 853.5,512C853.5,518 852.333,523.583 850,528.75C847.667,533.917 844.583,538.417 840.75,542.25C836.917,546.083 832.417,549.083 827.25,551.25C822.083,553.417 816.5,554.5 810.5,554.5Z");
			add_location(path, file, 49, 4, 1827);
		},
		m: function mount(target, anchor) {
			insert_dev(target, path, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(path);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(49:3) {#if indeterminate}",
		ctx
	});

	return block;
}

// (63:1) {#if $$slots.default}
function create_if_block(ctx) {
	let span;
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	const block = {
		c: function create() {
			span = element("span");
			if (default_slot) default_slot.c();
			attr_dev(span, "class", "svelte-4ss5hf");
			add_location(span, file, 63, 2, 2760);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(63:1) {#if $$slots.default}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let label;
	let div;
	let input;
	let input_class_value;
	let forwardEvents_action;
	let t0;
	let svg;
	let svg_viewBox_value;
	let t1;
	let current;
	let mounted;
	let dispose;

	let input_levels = [
		{ type: "checkbox" },
		{
			class: input_class_value = "checkbox " + /*className*/ ctx[6]
		},
		{ __value: /*value*/ ctx[4] },
		{ disabled: /*disabled*/ ctx[5] },
		/*$$restProps*/ ctx[8]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	function select_block_type(ctx, dirty) {
		if (/*indeterminate*/ ctx[1]) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*$$slots*/ ctx[9].default && create_if_block(ctx);

	const block = {
		c: function create() {
			label = element("label");
			div = element("div");
			input = element("input");
			t0 = space();
			svg = svg_element("svg");
			if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			set_attributes(input, input_data);
			if (/*checked*/ ctx[0] === void 0 || /*indeterminate*/ ctx[1] === void 0) add_render_callback(() => /*input_change_handler*/ ctx[12].call(input));
			toggle_class(input, "svelte-4ss5hf", true);
			add_location(input, file, 32, 2, 1486);
			attr_dev(svg, "aria-hidden", "true");
			attr_dev(svg, "class", "checkbox-glyph svelte-4ss5hf");

			attr_dev(svg, "viewBox", svg_viewBox_value = /*indeterminate*/ ctx[1]
			? "171 470 683 85"
			: "0 0 24 24");

			add_location(svg, file, 43, 2, 1683);
			attr_dev(div, "class", "checkbox-inner svelte-4ss5hf");
			add_location(div, file, 31, 1, 1455);
			attr_dev(label, "class", "checkbox-container svelte-4ss5hf");
			toggle_class(label, "disabled", /*disabled*/ ctx[5]);
			toggle_class(label, "indeterminate", /*indeterminate*/ ctx[1]);
			add_location(label, file, 30, 0, 1355);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, label, anchor);
			append_dev(label, div);
			append_dev(div, input);
			if (input.autofocus) input.focus();
			input.checked = /*checked*/ ctx[0];
			input.indeterminate = /*indeterminate*/ ctx[1];
			/*input_binding*/ ctx[13](input);
			append_dev(div, t0);
			append_dev(div, svg);
			if_block0.m(svg, null);
			append_dev(label, t1);
			if (if_block1) if_block1.m(label, null);
			/*label_binding*/ ctx[14](label);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[7].call(null, input)),
					listen_dev(input, "change", /*input_change_handler*/ ctx[12])
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "checkbox" },
				(!current || dirty & /*className*/ 64 && input_class_value !== (input_class_value = "checkbox " + /*className*/ ctx[6])) && { class: input_class_value },
				(!current || dirty & /*value*/ 16) && { __value: /*value*/ ctx[4] },
				(!current || dirty & /*disabled*/ 32) && { disabled: /*disabled*/ ctx[5] },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
			]));

			if (dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (dirty & /*indeterminate*/ 2) {
				input.indeterminate = /*indeterminate*/ ctx[1];
			}

			toggle_class(input, "svelte-4ss5hf", true);

			if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(svg, null);
				}
			}

			if (!current || dirty & /*indeterminate*/ 2 && svg_viewBox_value !== (svg_viewBox_value = /*indeterminate*/ ctx[1]
			? "171 470 683 85"
			: "0 0 24 24")) {
				attr_dev(svg, "viewBox", svg_viewBox_value);
			}

			if (/*$$slots*/ ctx[9].default) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*$$slots*/ 512) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(label, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (dirty & /*disabled*/ 32) {
				toggle_class(label, "disabled", /*disabled*/ ctx[5]);
			}

			if (dirty & /*indeterminate*/ 2) {
				toggle_class(label, "indeterminate", /*indeterminate*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label);
			/*input_binding*/ ctx[13](null);
			if_block0.d();
			if (if_block1) if_block1.d();
			/*label_binding*/ ctx[14](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"checked","indeterminate","value","disabled","class","inputElement","containerElement"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Checkbox', slots, ['default']);
	const $$slots = compute_slots(slots);
	let { checked = false } = $$props;
	let { indeterminate = false } = $$props;
	let { value = undefined } = $$props;
	let { disabled = false } = $$props;
	let { class: className = "" } = $$props;
	let { inputElement = null } = $$props;
	let { containerElement = null } = $$props;
	const forwardEvents = createEventForwarder(get_current_component());

	function input_change_handler() {
		checked = this.checked;
		indeterminate = this.indeterminate;
		$$invalidate(0, checked);
		$$invalidate(1, indeterminate);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(2, inputElement);
		});
	}

	function label_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			containerElement = $$value;
			$$invalidate(3, containerElement);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('checked' in $$new_props) $$invalidate(0, checked = $$new_props.checked);
		if ('indeterminate' in $$new_props) $$invalidate(1, indeterminate = $$new_props.indeterminate);
		if ('value' in $$new_props) $$invalidate(4, value = $$new_props.value);
		if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
		if ('class' in $$new_props) $$invalidate(6, className = $$new_props.class);
		if ('inputElement' in $$new_props) $$invalidate(2, inputElement = $$new_props.inputElement);
		if ('containerElement' in $$new_props) $$invalidate(3, containerElement = $$new_props.containerElement);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		get_current_component,
		createEventForwarder,
		checked,
		indeterminate,
		value,
		disabled,
		className,
		inputElement,
		containerElement,
		forwardEvents
	});

	$$self.$inject_state = $$new_props => {
		if ('checked' in $$props) $$invalidate(0, checked = $$new_props.checked);
		if ('indeterminate' in $$props) $$invalidate(1, indeterminate = $$new_props.indeterminate);
		if ('value' in $$props) $$invalidate(4, value = $$new_props.value);
		if ('disabled' in $$props) $$invalidate(5, disabled = $$new_props.disabled);
		if ('className' in $$props) $$invalidate(6, className = $$new_props.className);
		if ('inputElement' in $$props) $$invalidate(2, inputElement = $$new_props.inputElement);
		if ('containerElement' in $$props) $$invalidate(3, containerElement = $$new_props.containerElement);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		checked,
		indeterminate,
		inputElement,
		containerElement,
		value,
		disabled,
		className,
		forwardEvents,
		$$restProps,
		$$slots,
		$$scope,
		slots,
		input_change_handler,
		input_binding,
		label_binding
	];
}

class Checkbox extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				checked: 0,
				indeterminate: 1,
				value: 4,
				disabled: 5,
				class: 6,
				inputElement: 2,
				containerElement: 3
			},
			add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Checkbox",
			options,
			id: create_fragment.name
		});
	}

	get checked() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set checked(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get indeterminate() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set indeterminate(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get inputElement() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inputElement(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get containerElement() {
		throw new Error("<Checkbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set containerElement(value) {
		throw new Error("<Checkbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Checkbox;