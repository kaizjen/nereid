/* ContextMenu.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	action_destroyer,
	add_flush_callback,
	add_location,
	append_dev,
	append_styles,
	assign,
	attr_dev,
	bind,
	binding_callbacks,
	bubble,
	check_outros,
	compute_rest_props,
	create_component,
	create_slot,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_object,
	get_spread_update,
	globals,
	group_outros,
	init,
	insert_dev,
	listen_dev,
	mount_component,
	prevent_default,
	run_all,
	safe_not_equal,
	set_style,
	space,
	stop_propagation,
	transition_in,
	transition_out,
	update_slot_base,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

const { window: window_1 } = globals;
import { createEventDispatcher, setContext } from "nereid://.svelte/index.mjs";
import { externalMouseEvents, arrowNavigation } from "../internal.js";
import { tabbable } from "../../tabbable/dist/index.esm.js";
import MenuFlyoutSurface from "../MenuFlyout/MenuFlyoutSurface.svelte.js";
const file = "ContextMenu.svelte";

function add_css(target) {
	append_styles(target, "svelte-s5j1tt", ".context-menu-wrapper.svelte-s5j1tt{display:contents}.context-menu-anchor.svelte-s5j1tt{position:fixed;z-index:10000}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udGV4dE1lbnUuc3ZlbHRlIiwic291cmNlcyI6WyJDb250ZXh0TWVudS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCA+aW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyLCBzZXRDb250ZXh0IH0gZnJvbSBcInN2ZWx0ZVwiO1xyXG5pbXBvcnQgeyBleHRlcm5hbE1vdXNlRXZlbnRzLCBhcnJvd05hdmlnYXRpb24gfSBmcm9tIFwiLi4vaW50ZXJuYWxcIjtcclxuaW1wb3J0IHsgdGFiYmFibGUgfSBmcm9tIFwidGFiYmFibGVcIjtcclxuaW1wb3J0IE1lbnVGbHlvdXRTdXJmYWNlIGZyb20gXCIuLi9NZW51Rmx5b3V0L01lbnVGbHlvdXRTdXJmYWNlLnN2ZWx0ZVwiO1xyXG4vKiogQ29udHJvbHMgaWYgdGhlIGZseW91dCB3aWxsIGJlIGNsb3NlZCB3aGVuIGNsaWNraW5nIGEgc3RhbmRhcmQgdmFyaWFudCBpdGVtLiBPbmx5IGFwcGxpZXMgaWYgYGNsb3NhYmxlYCBpcyBzZXQgdG8gYHRydWVgLiAqL1xyXG5leHBvcnQgbGV0IGNsb3NlT25TZWxlY3QgPSB0cnVlO1xyXG4vKiogVGhlIGN1cnJlbnQgdmlzaWJpbGl0eSBzdGF0ZSBvZiB0aGUgY29udGV4dCBtZW51LiAqL1xyXG5leHBvcnQgbGV0IG9wZW4gPSBmYWxzZTtcclxuLyoqIE9idGFpbnMgYSBib3VuZCBET00gcmVmZXJlbmNlIHRvIHRoZSBjb250ZW50IHdyYXBwZXIgZWxlbWVudC4gKi9cclxuZXhwb3J0IGxldCB3cmFwcGVyRWxlbWVudCA9IG51bGw7XHJcbi8qKiBPYnRhaW5zIGEgYm91bmQgRE9NIHJlZmVyZW5jZSB0byB0aGUgbWVudSdzIHBvc2l0aW9uaW5nIGFuY2hvciBlbGVtZW50LiAqL1xyXG5leHBvcnQgbGV0IGFuY2hvckVsZW1lbnQgPSBudWxsO1xyXG4vKiogT2J0YWlucyBhIGJvdW5kIERPTSByZWZlcmVuY2UgdG8gdGhlIGlubmVyIG1lbnUgZWxlbWVudC4gKi9cclxuZXhwb3J0IGxldCBtZW51RWxlbWVudCA9IG51bGw7XHJcbmNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XHJcbmxldCBtZW51O1xyXG5sZXQgbWVudVBvc2l0aW9uID0ge1xyXG4gICAgeDogMCxcclxuICAgIHk6IDBcclxufTtcclxubGV0IG1vdXNlUG9zaXRpb24gPSB7XHJcbiAgICB4OiAwLFxyXG4gICAgeTogMFxyXG59O1xyXG4kOiBkaXNwYXRjaChvcGVuID8gXCJvcGVuXCIgOiBcImNsb3NlXCIpO1xyXG4kOiBpZiAobWVudSAmJiB0YWJiYWJsZShtZW51RWxlbWVudCkubGVuZ3RoID4gMClcclxuICAgIHRhYmJhYmxlKG1lbnVFbGVtZW50KVswXS5mb2N1cygpO1xyXG4kOiBpZiAoYW5jaG9yRWxlbWVudCkge1xyXG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBhbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgbWVudVBvc2l0aW9uLnggPSBNYXRoLm1pbih3aW5kb3cuaW5uZXJXaWR0aCAtIHdpZHRoLCBtb3VzZVBvc2l0aW9uLngpO1xyXG4gICAgbWVudVBvc2l0aW9uLnkgPVxyXG4gICAgICAgIG1vdXNlUG9zaXRpb24ueSA+IHdpbmRvdy5pbm5lckhlaWdodCAtIGhlaWdodFxyXG4gICAgICAgICAgICA/IChtb3VzZVBvc2l0aW9uLnkgLT0gaGVpZ2h0KVxyXG4gICAgICAgICAgICA6IG1vdXNlUG9zaXRpb24ueTtcclxuICAgIGlmIChtZW51UG9zaXRpb24ueSA8IDApXHJcbiAgICAgICAgbWVudVBvc2l0aW9uLnkgPSAwO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUNvbnRleHRNZW51KHsgY2xpZW50WCwgY2xpZW50WSB9KSB7XHJcbiAgICBvcGVuID0gdHJ1ZTtcclxuICAgIG1vdXNlUG9zaXRpb24gPSB7XHJcbiAgICAgICAgeDogY2xpZW50WCxcclxuICAgICAgICB5OiBjbGllbnRZXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZUVzY2FwZUtleSh7IGtleSB9KSB7XHJcbiAgICBpZiAoa2V5ID09PSBcIkVzY2FwZVwiKVxyXG4gICAgICAgIG9wZW4gPSBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBtb3VudE1lbnUobm9kZSkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChub2RlKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGVzdHJveTogKCkgPT4gbm9kZS5yZW1vdmUoKVxyXG4gICAgfTtcclxufVxyXG5zZXRDb250ZXh0KFwiY2xvc2VGbHlvdXRcIiwgZXZlbnQgPT4ge1xyXG4gICAgZGlzcGF0Y2goXCJzZWxlY3RcIik7XHJcbiAgICBpZiAoY2xvc2VPblNlbGVjdClcclxuICAgICAgICBvcGVuID0gZmFsc2U7XHJcbn0pO1xyXG48L3NjcmlwdD5cblxuPHN2ZWx0ZTp3aW5kb3cgb246a2V5ZG93bj17aGFuZGxlRXNjYXBlS2V5fSAvPlxuXG48ZGl2XG5cdGNsYXNzPVwiY29udGV4dC1tZW51LXdyYXBwZXJcIlxuXHRvbjpjb250ZXh0bWVudXxwcmV2ZW50RGVmYXVsdHxzdG9wUHJvcGFnYXRpb249e2hhbmRsZUNvbnRleHRNZW51fVxuXHRvbjpjb250ZXh0bWVudVxuXHRiaW5kOnRoaXM9e3dyYXBwZXJFbGVtZW50fVxuPlxuXHQ8c2xvdCAvPlxuXHR7I2lmIG9wZW59XG5cdFx0PGRpdlxuXHRcdFx0dXNlOm1vdW50TWVudVxuXHRcdFx0dXNlOmFycm93TmF2aWdhdGlvbj17eyBwcmV2ZW50VGFiOiB0cnVlIH19XG5cdFx0XHR1c2U6ZXh0ZXJuYWxNb3VzZUV2ZW50cz17eyB0eXBlOiBcIm1vdXNlZG93blwiIH19XG5cdFx0XHRvbjpjb250ZXh0bWVudXxzdG9wUHJvcGFnYXRpb249e2UgPT4gZS5wcmV2ZW50RGVmYXVsdCgpfVxuXHRcdFx0YmluZDp0aGlzPXthbmNob3JFbGVtZW50fVxuXHRcdFx0b246b3V0ZXJtb3VzZWRvd249eygpID0+IChvcGVuID0gZmFsc2UpfVxuXHRcdFx0Y2xhc3M9XCJjb250ZXh0LW1lbnUtYW5jaG9yXCJcblx0XHRcdHN0eWxlPVwidG9wOiB7bWVudVBvc2l0aW9uLnl9cHg7IGxlZnQ6IHttZW51UG9zaXRpb24ueH1weDtcIlxuXHRcdD5cblx0XHRcdDxNZW51Rmx5b3V0U3VyZmFjZSBiaW5kOnRoaXM9e21lbnV9IGJpbmQ6ZWxlbWVudD17bWVudUVsZW1lbnR9IHsuLi4kJHJlc3RQcm9wc30+XG5cdFx0XHRcdDxzbG90IG5hbWU9XCJmbHlvdXRcIiAvPlxuXHRcdFx0PC9NZW51Rmx5b3V0U3VyZmFjZT5cblx0XHQ8L2Rpdj5cblx0ey9pZn1cbjwvZGl2PlxuXG48c3R5bGUgPi5jb250ZXh0LW1lbnUtd3JhcHBlcntkaXNwbGF5OmNvbnRlbnRzfS5jb250ZXh0LW1lbnUtYW5jaG9ye3Bvc2l0aW9uOmZpeGVkO3otaW5kZXg6MTAwMDB9PC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3RlEsbUNBQXFCLENBQUMsUUFBUSxRQUFRLENBQUMsa0NBQW9CLENBQUMsU0FBUyxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMifQ== */");
}

const get_flyout_slot_changes = dirty => ({});
const get_flyout_slot_context = ctx => ({});

// (71:1) {#if open}
function create_if_block(ctx) {
	let div;
	let menuflyoutsurface;
	let updating_element;
	let mountMenu_action;
	let arrowNavigation_action;
	let externalMouseEvents_action;
	let current;
	let mounted;
	let dispose;
	const menuflyoutsurface_spread_levels = [/*$$restProps*/ ctx[8]];

	function menuflyoutsurface_element_binding(value) {
		/*menuflyoutsurface_element_binding*/ ctx[14](value);
	}

	let menuflyoutsurface_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < menuflyoutsurface_spread_levels.length; i += 1) {
		menuflyoutsurface_props = assign(menuflyoutsurface_props, menuflyoutsurface_spread_levels[i]);
	}

	if (/*menuElement*/ ctx[2] !== void 0) {
		menuflyoutsurface_props.element = /*menuElement*/ ctx[2];
	}

	menuflyoutsurface = new MenuFlyoutSurface({
			props: menuflyoutsurface_props,
			$$inline: true
		});

	/*menuflyoutsurface_binding*/ ctx[13](menuflyoutsurface);
	binding_callbacks.push(() => bind(menuflyoutsurface, 'element', menuflyoutsurface_element_binding));

	const block = {
		c: function create() {
			div = element("div");
			create_component(menuflyoutsurface.$$.fragment);
			attr_dev(div, "class", "context-menu-anchor svelte-s5j1tt");
			set_style(div, "top", /*menuPosition*/ ctx[5].y + "px");
			set_style(div, "left", /*menuPosition*/ ctx[5].x + "px");
			add_location(div, file, 71, 2, 2191);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(menuflyoutsurface, div, null);
			/*div_binding*/ ctx[15](div);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(mountMenu_action = mountMenu.call(null, div)),
					action_destroyer(arrowNavigation_action = arrowNavigation.call(null, div, { preventTab: true })),
					action_destroyer(externalMouseEvents_action = externalMouseEvents.call(null, div, { type: "mousedown" })),
					listen_dev(div, "contextmenu", stop_propagation(contextmenu_handler_1), false, false, true),
					listen_dev(div, "outermousedown", /*outermousedown_handler*/ ctx[16], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			const menuflyoutsurface_changes = (dirty & /*$$restProps*/ 256)
			? get_spread_update(menuflyoutsurface_spread_levels, [get_spread_object(/*$$restProps*/ ctx[8])])
			: {};

			if (dirty & /*$$scope*/ 262144) {
				menuflyoutsurface_changes.$$scope = { dirty, ctx };
			}

			if (!updating_element && dirty & /*menuElement*/ 4) {
				updating_element = true;
				menuflyoutsurface_changes.element = /*menuElement*/ ctx[2];
				add_flush_callback(() => updating_element = false);
			}

			menuflyoutsurface.$set(menuflyoutsurface_changes);

			if (!current || dirty & /*menuPosition*/ 32) {
				set_style(div, "top", /*menuPosition*/ ctx[5].y + "px");
			}

			if (!current || dirty & /*menuPosition*/ 32) {
				set_style(div, "left", /*menuPosition*/ ctx[5].x + "px");
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(menuflyoutsurface.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(menuflyoutsurface.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			/*menuflyoutsurface_binding*/ ctx[13](null);
			destroy_component(menuflyoutsurface);
			/*div_binding*/ ctx[15](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(71:1) {#if open}",
		ctx
	});

	return block;
}

// (82:3) <MenuFlyoutSurface bind:this={menu} bind:element={menuElement} {...$$restProps}>
function create_default_slot(ctx) {
	let current;
	const flyout_slot_template = /*#slots*/ ctx[11].flyout;
	const flyout_slot = create_slot(flyout_slot_template, ctx, /*$$scope*/ ctx[18], get_flyout_slot_context);

	const block = {
		c: function create() {
			if (flyout_slot) flyout_slot.c();
		},
		m: function mount(target, anchor) {
			if (flyout_slot) {
				flyout_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (flyout_slot) {
				if (flyout_slot.p && (!current || dirty & /*$$scope*/ 262144)) {
					update_slot_base(
						flyout_slot,
						flyout_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(flyout_slot_template, /*$$scope*/ ctx[18], dirty, get_flyout_slot_changes),
						get_flyout_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(flyout_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(flyout_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (flyout_slot) flyout_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(82:3) <MenuFlyoutSurface bind:this={menu} bind:element={menuElement} {...$$restProps}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let t;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[18], null);
	let if_block = /*open*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			attr_dev(div, "class", "context-menu-wrapper svelte-s5j1tt");
			add_location(div, file, 63, 0, 2019);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append_dev(div, t);
			if (if_block) if_block.m(div, null);
			/*div_binding_1*/ ctx[17](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(window_1, "keydown", /*handleEscapeKey*/ ctx[7], false, false, false),
					listen_dev(div, "contextmenu", stop_propagation(prevent_default(/*handleContextMenu*/ ctx[6])), false, true, true),
					listen_dev(div, "contextmenu", /*contextmenu_handler*/ ctx[12], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 262144)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[18], dirty, null),
						null
					);
				}
			}

			if (/*open*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*open*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			/*div_binding_1*/ ctx[17](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function mountMenu(node) {
	document.body.appendChild(node);
	return { destroy: () => node.remove() };
}

const contextmenu_handler_1 = e => e.preventDefault();

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["closeOnSelect","open","wrapperElement","anchorElement","menuElement"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ContextMenu', slots, ['default','flyout']);
	let { closeOnSelect = true } = $$props;
	let { open = false } = $$props;
	let { wrapperElement = null } = $$props;
	let { anchorElement = null } = $$props;
	let { menuElement = null } = $$props;
	const dispatch = createEventDispatcher();
	let menu;
	let menuPosition = { x: 0, y: 0 };
	let mousePosition = { x: 0, y: 0 };

	async function handleContextMenu({ clientX, clientY }) {
		$$invalidate(0, open = true);
		$$invalidate(10, mousePosition = { x: clientX, y: clientY });
	}

	function handleEscapeKey({ key }) {
		if (key === "Escape") $$invalidate(0, open = false);
	}

	setContext("closeFlyout", event => {
		dispatch("select");
		if (closeOnSelect) $$invalidate(0, open = false);
	});

	function contextmenu_handler(event) {
		bubble.call(this, $$self, event);
	}

	function menuflyoutsurface_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			menu = $$value;
			$$invalidate(4, menu);
		});
	}

	function menuflyoutsurface_element_binding(value) {
		menuElement = value;
		$$invalidate(2, menuElement);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			anchorElement = $$value;
			$$invalidate(1, anchorElement);
		});
	}

	const outermousedown_handler = () => $$invalidate(0, open = false);

	function div_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			wrapperElement = $$value;
			$$invalidate(3, wrapperElement);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('closeOnSelect' in $$new_props) $$invalidate(9, closeOnSelect = $$new_props.closeOnSelect);
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('wrapperElement' in $$new_props) $$invalidate(3, wrapperElement = $$new_props.wrapperElement);
		if ('anchorElement' in $$new_props) $$invalidate(1, anchorElement = $$new_props.anchorElement);
		if ('menuElement' in $$new_props) $$invalidate(2, menuElement = $$new_props.menuElement);
		if ('$$scope' in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		setContext,
		externalMouseEvents,
		arrowNavigation,
		tabbable,
		MenuFlyoutSurface,
		closeOnSelect,
		open,
		wrapperElement,
		anchorElement,
		menuElement,
		dispatch,
		menu,
		menuPosition,
		mousePosition,
		handleContextMenu,
		handleEscapeKey,
		mountMenu
	});

	$$self.$inject_state = $$new_props => {
		if ('closeOnSelect' in $$props) $$invalidate(9, closeOnSelect = $$new_props.closeOnSelect);
		if ('open' in $$props) $$invalidate(0, open = $$new_props.open);
		if ('wrapperElement' in $$props) $$invalidate(3, wrapperElement = $$new_props.wrapperElement);
		if ('anchorElement' in $$props) $$invalidate(1, anchorElement = $$new_props.anchorElement);
		if ('menuElement' in $$props) $$invalidate(2, menuElement = $$new_props.menuElement);
		if ('menu' in $$props) $$invalidate(4, menu = $$new_props.menu);
		if ('menuPosition' in $$props) $$invalidate(5, menuPosition = $$new_props.menuPosition);
		if ('mousePosition' in $$props) $$invalidate(10, mousePosition = $$new_props.mousePosition);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*open*/ 1) {
			$: dispatch(open ? "open" : "close");
		}

		if ($$self.$$.dirty & /*menu, menuElement*/ 20) {
			$: if (menu && tabbable(menuElement).length > 0) tabbable(menuElement)[0].focus();
		}

		if ($$self.$$.dirty & /*anchorElement, mousePosition, menuPosition*/ 1058) {
			$: if (anchorElement) {
				const { width, height } = anchorElement.getBoundingClientRect();
				$$invalidate(5, menuPosition.x = Math.min(window.innerWidth - width, mousePosition.x), menuPosition);

				$$invalidate(
					5,
					menuPosition.y = mousePosition.y > window.innerHeight - height
					? $$invalidate(10, mousePosition.y -= height, mousePosition)
					: mousePosition.y,
					menuPosition
				);

				if (menuPosition.y < 0) $$invalidate(5, menuPosition.y = 0, menuPosition);
			}
		}
	};

	return [
		open,
		anchorElement,
		menuElement,
		wrapperElement,
		menu,
		menuPosition,
		handleContextMenu,
		handleEscapeKey,
		$$restProps,
		closeOnSelect,
		mousePosition,
		slots,
		contextmenu_handler,
		menuflyoutsurface_binding,
		menuflyoutsurface_element_binding,
		div_binding,
		outermousedown_handler,
		div_binding_1,
		$$scope
	];
}

class ContextMenu extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				closeOnSelect: 9,
				open: 0,
				wrapperElement: 3,
				anchorElement: 1,
				menuElement: 2
			},
			add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ContextMenu",
			options,
			id: create_fragment.name
		});
	}

	get closeOnSelect() {
		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set closeOnSelect(value) {
		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get open() {
		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set open(value) {
		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get wrapperElement() {
		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set wrapperElement(value) {
		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get anchorElement() {
		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set anchorElement(value) {
		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get menuElement() {
		throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set menuElement(value) {
		throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default ContextMenu;