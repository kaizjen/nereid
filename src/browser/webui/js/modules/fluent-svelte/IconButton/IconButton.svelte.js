/* IconButton.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	action_destroyer,
	add_location,
	append_styles,
	assign,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	detach_dev,
	dispatch_dev,
	element as element_1,
	empty,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	init,
	insert_dev,
	safe_not_equal,
	set_attributes,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base,
	validate_dynamic_element,
	validate_slots,
	validate_void_dynamic_element
} from "nereid://.svelte/internal/index.mjs";

import { get_current_component } from "nereid://.svelte/internal/index.mjs";
import { createEventForwarder } from "../internal.js";
const file = "IconButton.svelte";

function add_css(target) {
	append_styles(target, "svelte-1iys5lx", ".icon-button.svelte-1iys5lx{align-items:center;background-color:var(--fds-subtle-fill-transparent);border:none;border-radius:var(--fds-control-corner-radius);box-sizing:border-box;color:var(--fds-text-primary);display:inline-flex;justify-content:center;min-block-size:30px;min-inline-size:30px;outline:none;padding:8px}.icon-button.svelte-1iys5lx:focus-visible{box-shadow:var(--fds-focus-stroke)}.icon-button.svelte-1iys5lx:hover{background-color:var(--fds-subtle-fill-secondary)}.icon-button.svelte-1iys5lx:active{background-color:var(--fds-subtle-fill-tertiary);color:var(--fds-text-secondary)}.icon-button.svelte-1iys5lx:disabled{background-color:var(--fds-subtle-fill-disabled);color:var(--fds-text-disabled)}.icon-button.svelte-1iys5lx svg{fill:currentColor;block-size:auto;inline-size:16px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSWNvbkJ1dHRvbi5zdmVsdGUiLCJzb3VyY2VzIjpbIkljb25CdXR0b24uc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQgPmltcG9ydCB7IGdldF9jdXJyZW50X2NvbXBvbmVudCB9IGZyb20gXCJzdmVsdGUvaW50ZXJuYWxcIjtcclxuaW1wb3J0IHsgY3JlYXRlRXZlbnRGb3J3YXJkZXIgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIjtcclxuLyoqIEByZXN0UHJvcHMge2J1dHRvbiB8IGF9ICovXHJcbi8qKiBTZXRzIGFuIGhyZWYgdmFsdWUgYW5kIGNvbnZlcnRzIHRoZSBidXR0b24gZWxlbWVudCBpbnRvIGFuIGFuY2hvci4gKi9cclxuZXhwb3J0IGxldCBocmVmID0gXCJcIjtcclxuLyoqIENvbnRyb2xzIHdoZXRoZXIgdGhlIGJ1dHRvbiBpcyBpbnRlbmRlZCBmb3IgdXNlciBpbnRlcmFjdGlvbiwgYW5kIHN0eWxlcyBpdCBhY2NvcmRpbmdseS4gKi9cclxuZXhwb3J0IGxldCBkaXNhYmxlZCA9IGZhbHNlO1xyXG4vKiogU3BlY2lmaWVzIGEgY3VzdG9tIGNsYXNzIG5hbWUgZm9yIHRoZSBidXR0b24uICovXHJcbmxldCBjbGFzc05hbWUgPSBcIlwiO1xyXG5leHBvcnQgeyBjbGFzc05hbWUgYXMgY2xhc3MgfTtcclxuLyoqIE9idGFpbnMgYSBib3VuZCBET00gcmVmZXJlbmNlIHRvIHRoZSBidXR0b24gb3IgYW5jaG9yIGVsZW1lbnQuICovXHJcbmV4cG9ydCBsZXQgZWxlbWVudCA9IG51bGw7XHJcbmNvbnN0IGZvcndhcmRFdmVudHMgPSBjcmVhdGVFdmVudEZvcndhcmRlcihnZXRfY3VycmVudF9jb21wb25lbnQoKSk7XHJcbjwvc2NyaXB0PlxuXG48IS0tXG5AY29tcG9uZW50XG5BbiBJY29uIEJ1dHRvbiBpcyBhIGNsaWNrYWJsZSBjb250cm9sIHRoYXQgdHJpZ2dlcnMgYW4gaW1tZWRpYXRlIGFjdGlvbi4gVW5saWtlIHRoZSBCdXR0b24gY29udHJvbCwgaXQgc2VydmVzIHRoZSBwdXJwb3NlIG9mIGVuY2Fwc3VsYXRpbmcgYW4gaWNvbiBnbHlwaCBhcyBpdOKAmXMgY29udGVudC4gW0RvY3NdKGh0dHBzOi8vZmx1ZW50LXN2ZWx0ZS52ZXJjZWwuYXBwL2RvY3MvY29tcG9uZW50cy9pY29uYnV0dG9uKVxuLSBVc2FnZTpcbiAgICBgYGB0c3hcbiAgICA8SWNvbkJ1dHRvbj5cbiAgICAgICAgPHN2ZyB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAwIDE2IDE2XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICAgPHBhdGggZD1cIk04IDE0QTYgNiAwIDEwOCAyYTYgNiAwIDAwMCAxMnptMC0xQTUgNSAwIDExOCAzYTUgNSAwIDAxMCAxMHpcIiAvPlxuICAgICAgICA8L3N2Zz5cbiAgICA8L0ljb25CdXR0b24+XG4gICAgYGBgXG4tLT5cbjxzdmVsdGU6ZWxlbWVudFxuXHR0aGlzPXtocmVmICYmICFkaXNhYmxlZCA/IFwiYVwiIDogXCJidXR0b25cIn1cblx0dXNlOmZvcndhcmRFdmVudHNcblx0YmluZDp0aGlzPXtlbGVtZW50fVxuXHRyb2xlPXtocmVmICYmICFkaXNhYmxlZCA/IFwiYnV0dG9uXCIgOiB1bmRlZmluZWR9XG5cdGhyZWY9e2hyZWYgJiYgIWRpc2FibGVkID8gaHJlZiA6IHVuZGVmaW5lZH1cblx0Y2xhc3M9XCJpY29uLWJ1dHRvbiB7Y2xhc3NOYW1lfVwiXG5cdGNsYXNzOmRpc2FibGVkXG5cdHsuLi4kJHJlc3RQcm9wc31cbj5cblx0PHNsb3QgLz5cbjwvc3ZlbHRlOmVsZW1lbnQ+XG5cbjxzdHlsZSA+Lmljb24tYnV0dG9ue2FsaWduLWl0ZW1zOmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWZkcy1zdWJ0bGUtZmlsbC10cmFuc3BhcmVudCk7Ym9yZGVyOm5vbmU7Ym9yZGVyLXJhZGl1czp2YXIoLS1mZHMtY29udHJvbC1jb3JuZXItcmFkaXVzKTtib3gtc2l6aW5nOmJvcmRlci1ib3g7Y29sb3I6dmFyKC0tZmRzLXRleHQtcHJpbWFyeSk7ZGlzcGxheTppbmxpbmUtZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21pbi1ibG9jay1zaXplOjMwcHg7bWluLWlubGluZS1zaXplOjMwcHg7b3V0bGluZTpub25lO3BhZGRpbmc6OHB4fS5pY29uLWJ1dHRvbjpmb2N1cy12aXNpYmxle2JveC1zaGFkb3c6dmFyKC0tZmRzLWZvY3VzLXN0cm9rZSl9Lmljb24tYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6dmFyKC0tZmRzLXN1YnRsZS1maWxsLXNlY29uZGFyeSl9Lmljb24tYnV0dG9uOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWZkcy1zdWJ0bGUtZmlsbC10ZXJ0aWFyeSk7Y29sb3I6dmFyKC0tZmRzLXRleHQtc2Vjb25kYXJ5KX0uaWNvbi1idXR0b246ZGlzYWJsZWR7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1mZHMtc3VidGxlLWZpbGwtZGlzYWJsZWQpO2NvbG9yOnZhcigtLWZkcy10ZXh0LWRpc2FibGVkKX0uaWNvbi1idXR0b24gOmdsb2JhbChzdmcpe2ZpbGw6Y3VycmVudENvbG9yO2Jsb2NrLXNpemU6YXV0bztpbmxpbmUtc2l6ZToxNnB4fTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0NRLDJCQUFZLENBQUMsWUFBWSxNQUFNLENBQUMsaUJBQWlCLElBQUksNkJBQTZCLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxjQUFjLElBQUksMkJBQTJCLENBQUMsQ0FBQyxXQUFXLFVBQVUsQ0FBQyxNQUFNLElBQUksa0JBQWtCLENBQUMsQ0FBQyxRQUFRLFdBQVcsQ0FBQyxnQkFBZ0IsTUFBTSxDQUFDLGVBQWUsSUFBSSxDQUFDLGdCQUFnQixJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsMkJBQVksY0FBYyxDQUFDLFdBQVcsSUFBSSxrQkFBa0IsQ0FBQyxDQUFDLDJCQUFZLE1BQU0sQ0FBQyxpQkFBaUIsSUFBSSwyQkFBMkIsQ0FBQyxDQUFDLDJCQUFZLE9BQU8sQ0FBQyxpQkFBaUIsSUFBSSwwQkFBMEIsQ0FBQyxDQUFDLE1BQU0sSUFBSSxvQkFBb0IsQ0FBQyxDQUFDLDJCQUFZLFNBQVMsQ0FBQyxpQkFBaUIsSUFBSSwwQkFBMEIsQ0FBQyxDQUFDLE1BQU0sSUFBSSxtQkFBbUIsQ0FBQyxDQUFDLDJCQUFZLENBQUMsQUFBUSxHQUFHLEFBQUMsQ0FBQyxLQUFLLFlBQVksQ0FBQyxXQUFXLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyJ9 */");
}

// (28:0) <svelte:element  this={href && !disabled ? "a" : "button"}  use:forwardEvents  bind:this={element}  role={href && !disabled ? "button" : undefined}  href={href && !disabled ? href : undefined}  class="icon-button {className}"  class:disabled  {...$$restProps} >
function create_dynamic_element(ctx) {
	let svelte_element;
	let svelte_element_role_value;
	let svelte_element_href_value;
	let svelte_element_class_value;
	let forwardEvents_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[7].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	let svelte_element_levels = [
		{
			role: svelte_element_role_value = /*href*/ ctx[1] && !/*disabled*/ ctx[2]
			? "button"
			: undefined
		},
		{
			href: svelte_element_href_value = /*href*/ ctx[1] && !/*disabled*/ ctx[2]
			? /*href*/ ctx[1]
			: undefined
		},
		{
			class: svelte_element_class_value = "icon-button " + /*className*/ ctx[3]
		},
		/*$$restProps*/ ctx[5]
	];

	let svelte_element_data = {};

	for (let i = 0; i < svelte_element_levels.length; i += 1) {
		svelte_element_data = assign(svelte_element_data, svelte_element_levels[i]);
	}

	const block = {
		c: function create() {
			svelte_element = element_1(/*href*/ ctx[1] && !/*disabled*/ ctx[2] ? "a" : "button");
			if (default_slot) default_slot.c();
			set_attributes(svelte_element, svelte_element_data);
			toggle_class(svelte_element, "disabled", /*disabled*/ ctx[2]);
			toggle_class(svelte_element, "svelte-1iys5lx", true);
			add_location(svelte_element, file, 27, 0, 1179);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svelte_element, anchor);

			if (default_slot) {
				default_slot.m(svelte_element, null);
			}

			/*svelte_element_binding*/ ctx[8](svelte_element);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[4].call(null, svelte_element));
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
						null
					);
				}
			}

			set_attributes(svelte_element, svelte_element_data = get_spread_update(svelte_element_levels, [
				(!current || dirty & /*href, disabled*/ 6 && svelte_element_role_value !== (svelte_element_role_value = /*href*/ ctx[1] && !/*disabled*/ ctx[2]
				? "button"
				: undefined)) && { role: svelte_element_role_value },
				(!current || dirty & /*href, disabled*/ 6 && svelte_element_href_value !== (svelte_element_href_value = /*href*/ ctx[1] && !/*disabled*/ ctx[2]
				? /*href*/ ctx[1]
				: undefined)) && { href: svelte_element_href_value },
				(!current || dirty & /*className*/ 8 && svelte_element_class_value !== (svelte_element_class_value = "icon-button " + /*className*/ ctx[3])) && { class: svelte_element_class_value },
				dirty & /*$$restProps*/ 32 && /*$$restProps*/ ctx[5]
			]));

			toggle_class(svelte_element, "disabled", /*disabled*/ ctx[2]);
			toggle_class(svelte_element, "svelte-1iys5lx", true);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svelte_element);
			if (default_slot) default_slot.d(detaching);
			/*svelte_element_binding*/ ctx[8](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_dynamic_element.name,
		type: "child_dynamic_element",
		source: "(28:0) <svelte:element  this={href && !disabled ? \\\"a\\\" : \\\"button\\\"}  use:forwardEvents  bind:this={element}  role={href && !disabled ? \\\"button\\\" : undefined}  href={href && !disabled ? href : undefined}  class=\\\"icon-button {className}\\\"  class:disabled  {...$$restProps} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let previous_tag = /*href*/ ctx[1] && !/*disabled*/ ctx[2] ? "a" : "button";
	let svelte_element_anchor;
	let current;
	validate_dynamic_element(/*href*/ ctx[1] && !/*disabled*/ ctx[2] ? "a" : "button");
	validate_void_dynamic_element(/*href*/ ctx[1] && !/*disabled*/ ctx[2] ? "a" : "button");
	let svelte_element = (/*href*/ ctx[1] && !/*disabled*/ ctx[2] ? "a" : "button") && create_dynamic_element(ctx);

	const block = {
		c: function create() {
			if (svelte_element) svelte_element.c();
			svelte_element_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (svelte_element) svelte_element.m(target, anchor);
			insert_dev(target, svelte_element_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*href*/ ctx[1] && !/*disabled*/ ctx[2] ? "a" : "button") {
				if (!previous_tag) {
					svelte_element = create_dynamic_element(ctx);
					svelte_element.c();
					svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
				} else if (safe_not_equal(previous_tag, /*href*/ ctx[1] && !/*disabled*/ ctx[2] ? "a" : "button")) {
					svelte_element.d(1);
					validate_dynamic_element(/*href*/ ctx[1] && !/*disabled*/ ctx[2] ? "a" : "button");
					validate_void_dynamic_element(/*href*/ ctx[1] && !/*disabled*/ ctx[2] ? "a" : "button");
					svelte_element = create_dynamic_element(ctx);
					svelte_element.c();
					svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
				} else {
					svelte_element.p(ctx, dirty);
				}
			} else if (previous_tag) {
				svelte_element.d(1);
				svelte_element = null;
			}

			previous_tag = /*href*/ ctx[1] && !/*disabled*/ ctx[2] ? "a" : "button";
		},
		i: function intro(local) {
			if (current) return;
			transition_in(svelte_element);
			current = true;
		},
		o: function outro(local) {
			transition_out(svelte_element);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svelte_element_anchor);
			if (svelte_element) svelte_element.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["href","disabled","class","element"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('IconButton', slots, ['default']);
	let { href = "" } = $$props;
	let { disabled = false } = $$props;
	let { class: className = "" } = $$props;
	let { element = null } = $$props;
	const forwardEvents = createEventForwarder(get_current_component());

	function svelte_element_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(0, element);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('href' in $$new_props) $$invalidate(1, href = $$new_props.href);
		if ('disabled' in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
		if ('element' in $$new_props) $$invalidate(0, element = $$new_props.element);
		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		get_current_component,
		createEventForwarder,
		href,
		disabled,
		className,
		element,
		forwardEvents
	});

	$$self.$inject_state = $$new_props => {
		if ('href' in $$props) $$invalidate(1, href = $$new_props.href);
		if ('disabled' in $$props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
		if ('element' in $$props) $$invalidate(0, element = $$new_props.element);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		element,
		href,
		disabled,
		className,
		forwardEvents,
		$$restProps,
		$$scope,
		slots,
		svelte_element_binding
	];
}

class IconButton extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				href: 1,
				disabled: 2,
				class: 3,
				element: 0
			},
			add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "IconButton",
			options,
			id: create_fragment.name
		});
	}

	get href() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<IconButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<IconButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default IconButton;