/* ListItem.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	action_destroyer,
	add_location,
	append_dev,
	append_styles,
	assign,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	create_component,
	create_slot,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element as element_1,
	empty,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	group_outros,
	init,
	insert_dev,
	listen_dev,
	mount_component,
	run_all,
	safe_not_equal,
	set_attributes,
	space,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import { createEventDispatcher } from "nereid://.svelte/index.mjs";
import { get_current_component } from "nereid://.svelte/internal/index.mjs";
import { createEventForwarder } from "../internal.js";
import TextBlock from "../TextBlock/TextBlock.svelte.js";
const file = "ListItem.svelte";

function add_css(target) {
	append_styles(target, "svelte-1ye4o7x", ".list-item.svelte-1ye4o7x{align-items:center;background-color:var(--fds-subtle-fill-transparent);block-size:34px;border-radius:var(--fds-control-corner-radius);box-sizing:border-box;color:var(--fds-text-primary);cursor:default;display:flex;flex:0 0 auto;inline-size:calc(100% - 10px);margin:3px 5px;outline:none;padding-inline:12px;position:relative;text-decoration:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.list-item.svelte-1ye4o7x:before{background-color:var(--fds-accent-default);block-size:16px;border-radius:3px;content:\"\";inline-size:3px;inset-inline-start:0;opacity:0;position:absolute;transform:scaleY(0);transition:transform var(--fds-control-fast-duration) var(--fds-control-fast-out-slow-in-easing)}.list-item.selected.svelte-1ye4o7x:before{opacity:1;transform:scaleY(1)}.list-item.svelte-1ye4o7x:focus-visible{box-shadow:var(--fds-focus-stroke)}.list-item.selected.svelte-1ye4o7x,.list-item.svelte-1ye4o7x:hover{background-color:var(--fds-subtle-fill-secondary)}.list-item.svelte-1ye4o7x:active{background-color:var(--fds-subtle-fill-tertiary);color:var(--fds-text-secondary)}.list-item.svelte-1ye4o7x:active:before{transform:scaleY(.625)}.list-item.disabled.svelte-1ye4o7x{background-color:var(--fds-subtle-fill-transparent);color:var(--fds-text-disabled);pointer-events:none}.list-item.disabled.selected.svelte-1ye4o7x{background-color:var(--fds-subtle-fill-secondary)}.list-item.disabled.selected.svelte-1ye4o7x:before{background-color:var(--fds-accent-disabled)}.list-item.svelte-1ye4o7x>svg{fill:currentColor;-webkit-margin-end:16px;block-size:auto;inline-size:16px;margin-inline-end:16px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdEl0ZW0uc3ZlbHRlIiwic291cmNlcyI6WyJMaXN0SXRlbS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCA+aW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInN2ZWx0ZVwiO1xyXG5pbXBvcnQgeyBnZXRfY3VycmVudF9jb21wb25lbnQgfSBmcm9tIFwic3ZlbHRlL2ludGVybmFsXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUV2ZW50Rm9yd2FyZGVyIH0gZnJvbSBcIi4uL2ludGVybmFsXCI7XHJcbmltcG9ydCBUZXh0QmxvY2sgZnJvbSBcIi4uL1RleHRCbG9jay9UZXh0QmxvY2suc3ZlbHRlXCI7XHJcbi8qKiBAcmVzdFByb3BzIHtidXR0b24gfCBhfSAqL1xyXG4vKiogQ29udHJvbHMgd2hldGhlciB0aGUgaXRlbSBpcyBzZWxlY3RlZCBvciBub3QuICovXHJcbmV4cG9ydCBsZXQgc2VsZWN0ZWQgPSBmYWxzZTtcclxuLyoqIENvbnRyb2xzIHdoZXRoZXIgdGhlIGl0ZW0gaXMgaW50ZW5kZWQgZm9yIHVzZXIgaW50ZXJhY3Rpb24sIGFuZCBzdHlsZXMgaXQgYWNjb3JkaW5nbHkuICovXHJcbmV4cG9ydCBsZXQgZGlzYWJsZWQgPSBmYWxzZTtcclxuLyoqIFNldHMgYW4gaHJlZiB2YWx1ZSBhbmQgY29udmVydHMgdGhlIGxpc3QgZWxlbWVudCBpbnRvIGFuIGFuY2hvci4gKi9cclxuZXhwb3J0IGxldCBocmVmID0gXCJcIjtcclxuLyoqIFNwZWNpZmllcyBhbiBBUklBIHJvbGUgZm9yIHRoZSBpdGVtLiAqL1xyXG5leHBvcnQgbGV0IHJvbGUgPSBcImxpc3RpdGVtXCI7XHJcbi8qKiBTcGVjaWZpZXMgYSBjdXN0b20gY2xhc3MgbmFtZSBmb3IgdGhlIGl0ZW0uICovXHJcbmxldCBjbGFzc05hbWUgPSBcIlwiO1xyXG5leHBvcnQgeyBjbGFzc05hbWUgYXMgY2xhc3MgfTtcclxuLyoqIE9idGFpbnMgYSBib3VuZCBET00gcmVmZXJlbmNlIHRvIHRoZSBpdGVtJ3MgZWxlbWVudC4gKi9cclxuZXhwb3J0IGxldCBlbGVtZW50ID0gbnVsbDtcclxuY29uc3QgZm9yd2FyZEV2ZW50cyA9IGNyZWF0ZUV2ZW50Rm9yd2FyZGVyKGdldF9jdXJyZW50X2NvbXBvbmVudCgpLCBbXCJzZWxlY3RcIl0pO1xyXG5jb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xyXG4kOiBpZiAoc2VsZWN0ZWQpXHJcbiAgICBkaXNwYXRjaChcInNlbGVjdFwiKTtcclxuZnVuY3Rpb24gaGFuZGxlS2V5RG93bih7IGtleSwgdGFyZ2V0IH0pIHtcclxuICAgIGlmIChrZXkgPT09IFwiRW50ZXJcIilcclxuICAgICAgICB0YXJnZXQuY2xpY2soKTtcclxufVxyXG48L3NjcmlwdD5cblxuPCEtLVxuQGNvbXBvbmVudFxuTGlzdCBJdGVtcyBkaXNwbGF5IGRhdGEgc3RhY2tlZCB2ZXJ0aWNhbGx5IGluIGEgc2luZ2xlIGNvbHVtbi4gTGlzdCBJdGVtcyB3b3JrIGJldHRlciBmb3IgaXRlbXMgdGhhdCBoYXZlIHRleHQgYXMgYSBmb2NhbCBwb2ludCwgYW5kIGZvciBjb2xsZWN0aW9ucyB0aGF0IGFyZSBtZWFudCB0byBiZSByZWFkIHRvcCB0byBib3R0b20gKGkuZS4gYWxwaGFiZXRpY2FsbHkgb3JkZXJlZCkuIEEgZmV3IGNvbW1vbiB1c2UgY2FzZXMgZm9yIExpc3QgSXRlbXMgaW5jbHVkZSBsaXN0cyBvZiBtZXNzYWdlcyBhbmQgc2VhcmNoIHJlc3VsdHMuIFtEb2NzXShodHRwczovL2ZsdWVudC1zdmVsdGUudmVyY2VsLmFwcC9kb2NzL2NvbXBvbmVudHMvbGlzdGl0ZW0pXG4tIFVzYWdlOlxuICAgIGBgYHRzeFxuICAgIDxMaXN0SXRlbT5UZXh0PC9MaXN0SXRlbT5cbiAgICBgYGBcbi0tPlxueyNpZiBocmVmICYmICFkaXNhYmxlZH1cblx0PGFcblx0XHR1c2U6Zm9yd2FyZEV2ZW50c1xuXHRcdG9uOmtleWRvd249e2hhbmRsZUtleURvd259XG5cdFx0YmluZDp0aGlzPXtlbGVtZW50fVxuXHRcdHRhYmluZGV4PXtkaXNhYmxlZCA/IC0xIDogMH1cblx0XHRhcmlhLXNlbGVjdGVkPXtzZWxlY3RlZH1cblx0XHRjbGFzcz1cImxpc3QtaXRlbSB7Y2xhc3NOYW1lfVwiXG5cdFx0Y2xhc3M6c2VsZWN0ZWRcblx0XHRjbGFzczpkaXNhYmxlZFxuXHRcdHtocmVmfVxuXHRcdHtyb2xlfVxuXHRcdHsuLi4kJHJlc3RQcm9wc31cblx0PlxuXHRcdDxzbG90IG5hbWU9XCJpY29uXCIgLz5cblx0XHQ8VGV4dEJsb2NrPlxuXHRcdFx0PHNsb3QgLz5cblx0XHQ8L1RleHRCbG9jaz5cblx0PC9hPlxuezplbHNlfVxuXHQ8bGlcblx0XHR1c2U6Zm9yd2FyZEV2ZW50c1xuXHRcdG9uOmtleWRvd249e2hhbmRsZUtleURvd259XG5cdFx0YmluZDp0aGlzPXtlbGVtZW50fVxuXHRcdHRhYmluZGV4PXtkaXNhYmxlZCA/IC0xIDogMH1cblx0XHRhcmlhLXNlbGVjdGVkPXtzZWxlY3RlZH1cblx0XHRjbGFzcz1cImxpc3QtaXRlbSB7Y2xhc3NOYW1lfVwiXG5cdFx0Y2xhc3M6c2VsZWN0ZWRcblx0XHRjbGFzczpkaXNhYmxlZFxuXHRcdHtocmVmfVxuXHRcdHtyb2xlfVxuXHRcdHsuLi4kJHJlc3RQcm9wc31cblx0PlxuXHRcdDxzbG90IG5hbWU9XCJpY29uXCIgLz5cblx0XHQ8VGV4dEJsb2NrPlxuXHRcdFx0PHNsb3QgLz5cblx0XHQ8L1RleHRCbG9jaz5cblx0PC9saT5cbnsvaWZ9XG5cbjxzdHlsZSA+Lmxpc3QtaXRlbXthbGlnbi1pdGVtczpjZW50ZXI7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1mZHMtc3VidGxlLWZpbGwtdHJhbnNwYXJlbnQpO2Jsb2NrLXNpemU6MzRweDtib3JkZXItcmFkaXVzOnZhcigtLWZkcy1jb250cm9sLWNvcm5lci1yYWRpdXMpO2JveC1zaXppbmc6Ym9yZGVyLWJveDtjb2xvcjp2YXIoLS1mZHMtdGV4dC1wcmltYXJ5KTtjdXJzb3I6ZGVmYXVsdDtkaXNwbGF5OmZsZXg7ZmxleDowIDAgYXV0bztpbmxpbmUtc2l6ZTpjYWxjKDEwMCUgLSAxMHB4KTttYXJnaW46M3B4IDVweDtvdXRsaW5lOm5vbmU7cGFkZGluZy1pbmxpbmU6MTJweDtwb3NpdGlvbjpyZWxhdGl2ZTt0ZXh0LWRlY29yYXRpb246bm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmV9Lmxpc3QtaXRlbTpiZWZvcmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1mZHMtYWNjZW50LWRlZmF1bHQpO2Jsb2NrLXNpemU6MTZweDtib3JkZXItcmFkaXVzOjNweDtjb250ZW50OlwiXCI7aW5saW5lLXNpemU6M3B4O2luc2V0LWlubGluZS1zdGFydDowO29wYWNpdHk6MDtwb3NpdGlvbjphYnNvbHV0ZTt0cmFuc2Zvcm06c2NhbGVZKDApO3RyYW5zaXRpb246dHJhbnNmb3JtIHZhcigtLWZkcy1jb250cm9sLWZhc3QtZHVyYXRpb24pIHZhcigtLWZkcy1jb250cm9sLWZhc3Qtb3V0LXNsb3ctaW4tZWFzaW5nKX0ubGlzdC1pdGVtLnNlbGVjdGVkOmJlZm9yZXtvcGFjaXR5OjE7dHJhbnNmb3JtOnNjYWxlWSgxKX0ubGlzdC1pdGVtOmZvY3VzLXZpc2libGV7Ym94LXNoYWRvdzp2YXIoLS1mZHMtZm9jdXMtc3Ryb2tlKX0ubGlzdC1pdGVtLnNlbGVjdGVkLC5saXN0LWl0ZW06aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1mZHMtc3VidGxlLWZpbGwtc2Vjb25kYXJ5KX0ubGlzdC1pdGVtOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWZkcy1zdWJ0bGUtZmlsbC10ZXJ0aWFyeSk7Y29sb3I6dmFyKC0tZmRzLXRleHQtc2Vjb25kYXJ5KX0ubGlzdC1pdGVtOmFjdGl2ZTpiZWZvcmV7dHJhbnNmb3JtOnNjYWxlWSguNjI1KX0ubGlzdC1pdGVtLmRpc2FibGVke2JhY2tncm91bmQtY29sb3I6dmFyKC0tZmRzLXN1YnRsZS1maWxsLXRyYW5zcGFyZW50KTtjb2xvcjp2YXIoLS1mZHMtdGV4dC1kaXNhYmxlZCk7cG9pbnRlci1ldmVudHM6bm9uZX0ubGlzdC1pdGVtLmRpc2FibGVkLnNlbGVjdGVke2JhY2tncm91bmQtY29sb3I6dmFyKC0tZmRzLXN1YnRsZS1maWxsLXNlY29uZGFyeSl9Lmxpc3QtaXRlbS5kaXNhYmxlZC5zZWxlY3RlZDpiZWZvcmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1mZHMtYWNjZW50LWRpc2FibGVkKX0ubGlzdC1pdGVtPjpnbG9iYWwoc3ZnKXtmaWxsOmN1cnJlbnRDb2xvcjstd2Via2l0LW1hcmdpbi1lbmQ6MTZweDtibG9jay1zaXplOmF1dG87aW5saW5lLXNpemU6MTZweDttYXJnaW4taW5saW5lLWVuZDoxNnB4fTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNEVRLHlCQUFVLENBQUMsWUFBWSxNQUFNLENBQUMsaUJBQWlCLElBQUksNkJBQTZCLENBQUMsQ0FBQyxXQUFXLElBQUksQ0FBQyxjQUFjLElBQUksMkJBQTJCLENBQUMsQ0FBQyxXQUFXLFVBQVUsQ0FBQyxNQUFNLElBQUksa0JBQWtCLENBQUMsQ0FBQyxPQUFPLE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyxTQUFTLFFBQVEsQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLG9CQUFvQixJQUFJLENBQUMsaUJBQWlCLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLHlCQUFVLE9BQU8sQ0FBQyxpQkFBaUIsSUFBSSxvQkFBb0IsQ0FBQyxDQUFDLFdBQVcsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLFlBQVksR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxRQUFRLENBQUMsVUFBVSxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsU0FBUyxDQUFDLElBQUksMkJBQTJCLENBQUMsQ0FBQyxJQUFJLHFDQUFxQyxDQUFDLENBQUMsVUFBVSx3QkFBUyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxPQUFPLENBQUMsQ0FBQyxDQUFDLHlCQUFVLGNBQWMsQ0FBQyxXQUFXLElBQUksa0JBQWtCLENBQUMsQ0FBQyxVQUFVLHdCQUFTLENBQUMseUJBQVUsTUFBTSxDQUFDLGlCQUFpQixJQUFJLDJCQUEyQixDQUFDLENBQUMseUJBQVUsT0FBTyxDQUFDLGlCQUFpQixJQUFJLDBCQUEwQixDQUFDLENBQUMsTUFBTSxJQUFJLG9CQUFvQixDQUFDLENBQUMseUJBQVUsT0FBTyxPQUFPLENBQUMsVUFBVSxPQUFPLElBQUksQ0FBQyxDQUFDLFVBQVUsd0JBQVMsQ0FBQyxpQkFBaUIsSUFBSSw2QkFBNkIsQ0FBQyxDQUFDLE1BQU0sSUFBSSxtQkFBbUIsQ0FBQyxDQUFDLGVBQWUsSUFBSSxDQUFDLFVBQVUsU0FBUyx3QkFBUyxDQUFDLGlCQUFpQixJQUFJLDJCQUEyQixDQUFDLENBQUMsVUFBVSxTQUFTLHdCQUFTLE9BQU8sQ0FBQyxpQkFBaUIsSUFBSSxxQkFBcUIsQ0FBQyxDQUFDLHlCQUFVLENBQUMsQUFBUSxHQUFHLEFBQUMsQ0FBQyxLQUFLLFlBQVksQ0FBQyxtQkFBbUIsSUFBSSxDQUFDLFdBQVcsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLGtCQUFrQixJQUFJLENBQUMifQ== */");
}

const get_icon_slot_changes_1 = dirty => ({});
const get_icon_slot_context_1 = ctx => ({});
const get_icon_slot_changes = dirty => ({});
const get_icon_slot_context = ctx => ({});

// (56:0) {:else}
function create_else_block(ctx) {
	let li;
	let t;
	let textblock;
	let li_tabindex_value;
	let li_class_value;
	let forwardEvents_action;
	let current;
	let mounted;
	let dispose;
	const icon_slot_template = /*#slots*/ ctx[8].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[11], get_icon_slot_context_1);

	textblock = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let li_levels = [
		{
			tabindex: li_tabindex_value = /*disabled*/ ctx[2] ? -1 : 0
		},
		{ "aria-selected": /*selected*/ ctx[1] },
		{
			class: li_class_value = "list-item " + /*className*/ ctx[5]
		},
		{ href: /*href*/ ctx[3] },
		{ role: /*role*/ ctx[4] },
		/*$$restProps*/ ctx[7]
	];

	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	const block = {
		c: function create() {
			li = element_1("li");
			if (icon_slot) icon_slot.c();
			t = space();
			create_component(textblock.$$.fragment);
			set_attributes(li, li_data);
			toggle_class(li, "selected", /*selected*/ ctx[1]);
			toggle_class(li, "disabled", /*disabled*/ ctx[2]);
			toggle_class(li, "svelte-1ye4o7x", true);
			add_location(li, file, 56, 1, 1898);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);

			if (icon_slot) {
				icon_slot.m(li, null);
			}

			append_dev(li, t);
			mount_component(textblock, li, null);
			/*li_binding*/ ctx[10](li);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[6].call(null, li)),
					listen_dev(li, "keydown", handleKeyDown, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (icon_slot) {
				if (icon_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[11], dirty, get_icon_slot_changes_1),
						get_icon_slot_context_1
					);
				}
			}

			const textblock_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);

			set_attributes(li, li_data = get_spread_update(li_levels, [
				(!current || dirty & /*disabled*/ 4 && li_tabindex_value !== (li_tabindex_value = /*disabled*/ ctx[2] ? -1 : 0)) && { tabindex: li_tabindex_value },
				(!current || dirty & /*selected*/ 2) && { "aria-selected": /*selected*/ ctx[1] },
				(!current || dirty & /*className*/ 32 && li_class_value !== (li_class_value = "list-item " + /*className*/ ctx[5])) && { class: li_class_value },
				(!current || dirty & /*href*/ 8) && { href: /*href*/ ctx[3] },
				(!current || dirty & /*role*/ 16) && { role: /*role*/ ctx[4] },
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]
			]));

			toggle_class(li, "selected", /*selected*/ ctx[1]);
			toggle_class(li, "disabled", /*disabled*/ ctx[2]);
			toggle_class(li, "svelte-1ye4o7x", true);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon_slot, local);
			transition_in(textblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon_slot, local);
			transition_out(textblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (icon_slot) icon_slot.d(detaching);
			destroy_component(textblock);
			/*li_binding*/ ctx[10](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(56:0) {:else}",
		ctx
	});

	return block;
}

// (37:0) {#if href && !disabled}
function create_if_block(ctx) {
	let a;
	let t;
	let textblock;
	let a_tabindex_value;
	let a_class_value;
	let forwardEvents_action;
	let current;
	let mounted;
	let dispose;
	const icon_slot_template = /*#slots*/ ctx[8].icon;
	const icon_slot = create_slot(icon_slot_template, ctx, /*$$scope*/ ctx[11], get_icon_slot_context);

	textblock = new TextBlock({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let a_levels = [
		{
			tabindex: a_tabindex_value = /*disabled*/ ctx[2] ? -1 : 0
		},
		{ "aria-selected": /*selected*/ ctx[1] },
		{
			class: a_class_value = "list-item " + /*className*/ ctx[5]
		},
		{ href: /*href*/ ctx[3] },
		{ role: /*role*/ ctx[4] },
		/*$$restProps*/ ctx[7]
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const block = {
		c: function create() {
			a = element_1("a");
			if (icon_slot) icon_slot.c();
			t = space();
			create_component(textblock.$$.fragment);
			set_attributes(a, a_data);
			toggle_class(a, "selected", /*selected*/ ctx[1]);
			toggle_class(a, "disabled", /*disabled*/ ctx[2]);
			toggle_class(a, "svelte-1ye4o7x", true);
			add_location(a, file, 37, 1, 1581);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);

			if (icon_slot) {
				icon_slot.m(a, null);
			}

			append_dev(a, t);
			mount_component(textblock, a, null);
			/*a_binding*/ ctx[9](a);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[6].call(null, a)),
					listen_dev(a, "keydown", handleKeyDown, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (icon_slot) {
				if (icon_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						icon_slot,
						icon_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(icon_slot_template, /*$$scope*/ ctx[11], dirty, get_icon_slot_changes),
						get_icon_slot_context
					);
				}
			}

			const textblock_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty & /*disabled*/ 4 && a_tabindex_value !== (a_tabindex_value = /*disabled*/ ctx[2] ? -1 : 0)) && { tabindex: a_tabindex_value },
				(!current || dirty & /*selected*/ 2) && { "aria-selected": /*selected*/ ctx[1] },
				(!current || dirty & /*className*/ 32 && a_class_value !== (a_class_value = "list-item " + /*className*/ ctx[5])) && { class: a_class_value },
				(!current || dirty & /*href*/ 8) && { href: /*href*/ ctx[3] },
				(!current || dirty & /*role*/ 16) && { role: /*role*/ ctx[4] },
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]
			]));

			toggle_class(a, "selected", /*selected*/ ctx[1]);
			toggle_class(a, "disabled", /*disabled*/ ctx[2]);
			toggle_class(a, "svelte-1ye4o7x", true);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon_slot, local);
			transition_in(textblock.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon_slot, local);
			transition_out(textblock.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if (icon_slot) icon_slot.d(detaching);
			destroy_component(textblock);
			/*a_binding*/ ctx[9](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(37:0) {#if href && !disabled}",
		ctx
	});

	return block;
}

// (71:2) <TextBlock>
function create_default_slot_1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(71:2) <TextBlock>",
		ctx
	});

	return block;
}

// (52:2) <TextBlock>
function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(52:2) <TextBlock>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[3] && !/*disabled*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function handleKeyDown({ key, target }) {
	if (key === "Enter") target.click();
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["selected","disabled","href","role","class","element"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ListItem', slots, ['icon','default']);
	let { selected = false } = $$props;
	let { disabled = false } = $$props;
	let { href = "" } = $$props;
	let { role = "listitem" } = $$props;
	let { class: className = "" } = $$props;
	let { element = null } = $$props;
	const forwardEvents = createEventForwarder(get_current_component(), ["select"]);
	const dispatch = createEventDispatcher();

	function a_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(0, element);
		});
	}

	function li_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(0, element);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('selected' in $$new_props) $$invalidate(1, selected = $$new_props.selected);
		if ('disabled' in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('href' in $$new_props) $$invalidate(3, href = $$new_props.href);
		if ('role' in $$new_props) $$invalidate(4, role = $$new_props.role);
		if ('class' in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ('element' in $$new_props) $$invalidate(0, element = $$new_props.element);
		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		get_current_component,
		createEventForwarder,
		TextBlock,
		selected,
		disabled,
		href,
		role,
		className,
		element,
		forwardEvents,
		dispatch,
		handleKeyDown
	});

	$$self.$inject_state = $$new_props => {
		if ('selected' in $$props) $$invalidate(1, selected = $$new_props.selected);
		if ('disabled' in $$props) $$invalidate(2, disabled = $$new_props.disabled);
		if ('href' in $$props) $$invalidate(3, href = $$new_props.href);
		if ('role' in $$props) $$invalidate(4, role = $$new_props.role);
		if ('className' in $$props) $$invalidate(5, className = $$new_props.className);
		if ('element' in $$props) $$invalidate(0, element = $$new_props.element);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selected*/ 2) {
			$: if (selected) dispatch("select");
		}
	};

	return [
		element,
		selected,
		disabled,
		href,
		role,
		className,
		forwardEvents,
		$$restProps,
		slots,
		a_binding,
		li_binding,
		$$scope
	];
}

class ListItem extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				selected: 1,
				disabled: 2,
				href: 3,
				role: 4,
				class: 5,
				element: 0
			},
			add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ListItem",
			options,
			id: create_fragment.name
		});
	}

	get selected() {
		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set selected(value) {
		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get href() {
		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get role() {
		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set role(value) {
		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<ListItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<ListItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default ListItem;