/* MenuBar.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_location,
	append_styles,
	assign,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	detach_dev,
	dispatch_dev,
	element as element_1,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	init,
	insert_dev,
	safe_not_equal,
	set_attributes,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import { setContext } from "nereid://.svelte/index.mjs";
import { isTabbable } from "../../tabbable/dist/index.esm.js";
const file = "MenuBar.svelte";

function add_css(target) {
	append_styles(target, "svelte-7u58hw", ".menu-bar.svelte-7u58hw{align-items:center;block-size:40px;cursor:default;display:flex;margin:0;padding:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVudUJhci5zdmVsdGUiLCJzb3VyY2VzIjpbIk1lbnVCYXIuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQgPmltcG9ydCB7IHNldENvbnRleHQgfSBmcm9tIFwic3ZlbHRlXCI7XHJcbmltcG9ydCB7IGlzVGFiYmFibGUgfSBmcm9tIFwidGFiYmFibGVcIjtcclxuLyoqIFNwZWNpZmllcyBhIGN1c3RvbSBjbGFzcyBuYW1lIGZvciB0aGUgYmFyLiAqL1xyXG5sZXQgY2xhc3NOYW1lID0gXCJcIjtcclxuZXhwb3J0IHsgY2xhc3NOYW1lIGFzIGNsYXNzIH07XHJcbi8qKiBPYnRhaW5zIGEgYm91bmQgRE9NIHJlZmVyZW5jZSB0byB0aGUgYmFyJ3Mgb3V0ZXIgY29udGFpbmVyIGVsZW1lbnQuICovXHJcbmV4cG9ydCBsZXQgZWxlbWVudCA9IG51bGw7XHJcbnNldENvbnRleHQoXCJzaWRlTmF2aWdhdGlvblwiLCAoZXZlbnQsIGFjdGl2ZUl0ZW0pID0+IHtcclxuICAgIGNvbnN0IHsga2V5IH0gPSBldmVudDtcclxuICAgIGxldCB0YWJPcmRlciA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgaWYgKGlzVGFiYmFibGUoY2hpbGQpKVxyXG4gICAgICAgICAgICB0YWJPcmRlci5wdXNoKGNoaWxkKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gdGFiT3JkZXIuaW5kZXhPZihhY3RpdmVJdGVtKTtcclxuICAgIGlmICh0YWJPcmRlci5sZW5ndGggPCAwKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGlmIChrZXkgPT09IFwiQXJyb3dMZWZ0XCIgfHwga2V5ID09PSBcIkFycm93UmlnaHRcIilcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYgKGtleSA9PT0gXCJBcnJvd0xlZnRcIikge1xyXG4gICAgICAgIGlmICh0YWJPcmRlclswXSA9PT0gYWN0aXZlSXRlbSkge1xyXG4gICAgICAgICAgICB0YWJPcmRlclt0YWJPcmRlci5sZW5ndGggLSAxXS5mb2N1cygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0YWJPcmRlci5pbmNsdWRlcyhhY3RpdmVJdGVtKSkge1xyXG4gICAgICAgICAgICB0YWJPcmRlclthY3RpdmVJbmRleCAtIDFdLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoa2V5ID09PSBcIkFycm93UmlnaHRcIikge1xyXG4gICAgICAgIGlmICh0YWJPcmRlclt0YWJPcmRlci5sZW5ndGggLSAxXSA9PT0gYWN0aXZlSXRlbSkge1xyXG4gICAgICAgICAgICB0YWJPcmRlclswXS5mb2N1cygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0YWJPcmRlci5pbmNsdWRlcyhhY3RpdmVJdGVtKSkge1xyXG4gICAgICAgICAgICB0YWJPcmRlclthY3RpdmVJbmRleCArIDFdLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuPC9zY3JpcHQ+XG5cbjx1bCBjbGFzcz1cIm1lbnUtYmFyIHtjbGFzc05hbWV9XCIgcm9sZT1cIm1lbnViYXJcIiBiaW5kOnRoaXM9e2VsZW1lbnR9IHsuLi4kJHJlc3RQcm9wc30+XG5cdDxzbG90IC8+XG48L3VsPlxuXG48c3R5bGUgPi5tZW51LWJhcnthbGlnbi1pdGVtczpjZW50ZXI7YmxvY2stc2l6ZTo0MHB4O2N1cnNvcjpkZWZhdWx0O2Rpc3BsYXk6ZmxleDttYXJnaW46MDtwYWRkaW5nOjA7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMENRLHVCQUFTLENBQUMsWUFBWSxNQUFNLENBQUMsV0FBVyxJQUFJLENBQUMsT0FBTyxPQUFPLENBQUMsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsb0JBQW9CLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLGdCQUFnQixJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMifQ== */");
}

function create_fragment(ctx) {
	let ul;
	let ul_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	let ul_levels = [
		{
			class: ul_class_value = "menu-bar " + /*className*/ ctx[1]
		},
		{ role: "menubar" },
		/*$$restProps*/ ctx[2]
	];

	let ul_data = {};

	for (let i = 0; i < ul_levels.length; i += 1) {
		ul_data = assign(ul_data, ul_levels[i]);
	}

	const block = {
		c: function create() {
			ul = element_1("ul");
			if (default_slot) default_slot.c();
			set_attributes(ul, ul_data);
			toggle_class(ul, "svelte-7u58hw", true);
			add_location(ul, file, 38, 0, 1254);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			if (default_slot) {
				default_slot.m(ul, null);
			}

			/*ul_binding*/ ctx[5](ul);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}

			set_attributes(ul, ul_data = get_spread_update(ul_levels, [
				(!current || dirty & /*className*/ 2 && ul_class_value !== (ul_class_value = "menu-bar " + /*className*/ ctx[1])) && { class: ul_class_value },
				{ role: "menubar" },
				dirty & /*$$restProps*/ 4 && /*$$restProps*/ ctx[2]
			]));

			toggle_class(ul, "svelte-7u58hw", true);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			if (default_slot) default_slot.d(detaching);
			/*ul_binding*/ ctx[5](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["class","element"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('MenuBar', slots, ['default']);
	let { class: className = "" } = $$props;
	let { element = null } = $$props;

	setContext("sideNavigation", (event, activeItem) => {
		const { key } = event;
		let tabOrder = [];

		for (const child of Array.from(element.children)) {
			if (isTabbable(child)) tabOrder.push(child);
		}

		const activeIndex = tabOrder.indexOf(activeItem);
		if (tabOrder.length < 0) return;
		if (key === "ArrowLeft" || key === "ArrowRight") event.preventDefault();

		if (key === "ArrowLeft") {
			if (tabOrder[0] === activeItem) {
				tabOrder[tabOrder.length - 1].focus();
			} else if (tabOrder.includes(activeItem)) {
				tabOrder[activeIndex - 1].focus();
			}
		} else if (key === "ArrowRight") {
			if (tabOrder[tabOrder.length - 1] === activeItem) {
				tabOrder[0].focus();
			} else if (tabOrder.includes(activeItem)) {
				tabOrder[activeIndex + 1].focus();
			}
		}
	});

	function ul_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(0, element);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(2, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
		if ('element' in $$new_props) $$invalidate(0, element = $$new_props.element);
		if ('$$scope' in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		setContext,
		isTabbable,
		className,
		element
	});

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
		if ('element' in $$props) $$invalidate(0, element = $$new_props.element);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [element, className, $$restProps, $$scope, slots, ul_binding];
}

class MenuBar extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { class: 1, element: 0 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MenuBar",
			options,
			id: create_fragment.name
		});
	}

	get class() {
		throw new Error("<MenuBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<MenuBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<MenuBar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<MenuBar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default MenuBar;