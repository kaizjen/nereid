/* MenuBarItem.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	action_destroyer,
	add_flush_callback,
	add_location,
	append_dev,
	append_styles,
	assign,
	attr_dev,
	bind,
	binding_callbacks,
	check_outros,
	component_subscribe,
	compute_rest_props,
	compute_slots,
	create_component,
	create_slot,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element as element_1,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	group_outros,
	init,
	insert_dev,
	listen_dev,
	mount_component,
	run_all,
	safe_not_equal,
	self,
	set_attributes,
	set_store_value,
	space,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base,
	validate_slots,
	validate_store
} from "nereid://.svelte/internal/index.mjs";

import { currentMenu } from "./flyoutState.js";
import { tabbable } from "../../tabbable/dist/index.esm.js";
import { createEventDispatcher, getContext, setContext } from "nereid://.svelte/index.mjs";
import { get_current_component } from "nereid://.svelte/internal/index.mjs";

import {
	createEventForwarder,
	arrowNavigation,
	externalMouseEvents,
	uid
} from "../internal.js";

import MenuFlyoutSurface from "../MenuFlyout/MenuFlyoutSurface.svelte.js";
const file = "MenuBarItem.svelte";

function add_css(target) {
	append_styles(target, "svelte-1r3ld34", ".menu-bar-item.svelte-1r3ld34{align-items:center;background-color:var(--fds-subtle-fill-transparent);border-radius:var(--fds-control-corner-radius);color:var(--fds-text-primary);cursor:default;display:inline-flex;font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;line-height:20px;margin:4px;padding:5px 11px;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.menu-bar-item.svelte-1r3ld34:hover{background-color:var(--fds-subtle-fill-secondary)}.menu-bar-item.svelte-1r3ld34:active,.menu-bar-item[aria-expanded=true].svelte-1r3ld34{background-color:var(--fds-subtle-fill-tertiary)}.menu-bar-item.svelte-1r3ld34:active:hover,.menu-bar-item[aria-expanded=true].svelte-1r3ld34:hover{background-color:var(--fds-subtle-fill-secondary)}.menu-bar-item.svelte-1r3ld34:active{color:var(--fds-text-secondary)}.menu-bar-item.disabled.svelte-1r3ld34{background-color:var(--fds-subtle-fill-disabled)!important;color:var(--fds-text-disabled)}.menu-flyout-anchor.svelte-1r3ld34{inset-block-start:100%;inset-inline-start:0;position:absolute;z-index:10000}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVudUJhckl0ZW0uc3ZlbHRlIiwic291cmNlcyI6WyJNZW51QmFySXRlbS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCA+aW1wb3J0IHsgY3VycmVudE1lbnUgfSBmcm9tIFwiLi9mbHlvdXRTdGF0ZVwiO1xyXG5pbXBvcnQgeyB0YWJiYWJsZSB9IGZyb20gXCJ0YWJiYWJsZVwiO1xyXG5pbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIsIGdldENvbnRleHQsIHNldENvbnRleHQgfSBmcm9tIFwic3ZlbHRlXCI7XHJcbmltcG9ydCB7IGdldF9jdXJyZW50X2NvbXBvbmVudCB9IGZyb20gXCJzdmVsdGUvaW50ZXJuYWxcIjtcclxuaW1wb3J0IHsgY3JlYXRlRXZlbnRGb3J3YXJkZXIsIGFycm93TmF2aWdhdGlvbiwgZXh0ZXJuYWxNb3VzZUV2ZW50cywgdWlkIH0gZnJvbSBcIi4uL2ludGVybmFsXCI7XHJcbmltcG9ydCBNZW51Rmx5b3V0U3VyZmFjZSBmcm9tIFwiLi4vTWVudUZseW91dC9NZW51Rmx5b3V0U3VyZmFjZS5zdmVsdGVcIjtcclxuLyoqIFRoZSBjdXJyZW50IHZpc2liaWxpdHkgc3RhdGUgb2YgdGhlIGl0ZW0ncyBtZW51LiAqL1xyXG5leHBvcnQgbGV0IG9wZW4gPSBmYWxzZTtcclxuLyoqIENvbnRyb2xzIHdoZXRoZXIgdGhlIGl0ZW0gaXMgaW50ZW5kZWQgZm9yIHVzZXIgaW50ZXJhY3Rpb24sIGFuZCBzdHlsZXMgaXQgYWNjb3JkaW5nbHkuICovXHJcbmV4cG9ydCBsZXQgZGlzYWJsZWQgPSBmYWxzZTtcclxuLyoqIFNwZWNpZmllcyBhIGN1c3RvbSBjbGFzcyBuYW1lIGZvciB0aGUgaXRlbS4gKi9cclxubGV0IGNsYXNzTmFtZSA9IFwiXCI7XHJcbmV4cG9ydCB7IGNsYXNzTmFtZSBhcyBjbGFzcyB9O1xyXG4vKiogT2J0YWlucyBhIGJvdW5kIERPTSByZWZlcmVuY2UgdG8gdGhlIGl0ZW0uICovXHJcbmV4cG9ydCBsZXQgZWxlbWVudCA9IG51bGw7XHJcbi8qKiBPYnRhaW5zIGEgYm91bmQgRE9NIHJlZmVyZW5jZSB0byB0aGUgbWVudSdzIHBvc2l0aW9uaW5nIGFuY2hvciBlbGVtZW50LiAqL1xyXG5leHBvcnQgbGV0IGFuY2hvckVsZW1lbnQgPSBudWxsO1xyXG4vKiogT2J0YWlucyBhIGJvdW5kIERPTSByZWZlcmVuY2UgdG8gdGhlIGlubmVyIG1lbnUgZWxlbWVudC4gKi9cclxuZXhwb3J0IGxldCBtZW51RWxlbWVudCA9IG51bGw7XHJcbmxldCBtZW51O1xyXG5jb25zdCBmb3J3YXJkRXZlbnRzID0gY3JlYXRlRXZlbnRGb3J3YXJkZXIoZ2V0X2N1cnJlbnRfY29tcG9uZW50KCksIFtcclxuICAgIFwib3BlblwiLFxyXG4gICAgXCJjbG9zZVwiLFxyXG4gICAgXCJzZWxlY3RcIlxyXG5dKTtcclxuY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcclxuY29uc3QgbWVudUlkID0gdWlkKFwiZmRzLW1lbnUtZmx5b3V0LWFuY2hvci1cIik7XHJcbmNvbnN0IGhhbmRsZVNpZGVOYXZpZ2F0aW9uID0gZ2V0Q29udGV4dChcInNpZGVOYXZpZ2F0aW9uXCIpO1xyXG4kOiBpZiAoJGN1cnJlbnRNZW51ICE9PSBtZW51KVxyXG4gICAgb3BlbiA9IGZhbHNlO1xyXG4kOiBpZiAoIW1lbnUgJiYgZWxlbWVudClcclxuICAgIGVsZW1lbnQuZm9jdXMoKTtcclxuJDogaWYgKG1lbnUpIHtcclxuICAgIGZvY3VzRmlyc3RJdGVtKCk7XHJcbiAgICAkY3VycmVudE1lbnUgPSBtZW51O1xyXG59XHJcbmVsc2Uge1xyXG4gICAgJGN1cnJlbnRNZW51ID0gbnVsbDtcclxufVxyXG4kOiBpZiAoJCRzbG90cy5mbHlvdXQgJiYgb3BlbiAmJiAhZGlzYWJsZWQpIHtcclxuICAgIGlmIChvcGVuKSB7XHJcbiAgICAgICAgZGlzcGF0Y2goXCJvcGVuXCIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZGlzcGF0Y2goXCJjbG9zZVwiKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBmb2N1c0ZpcnN0SXRlbSgpIHtcclxuICAgIGlmIChvcGVuICYmIG1lbnUgJiYgdGFiYmFibGUobWVudUVsZW1lbnQpLmxlbmd0aCA+IDApXHJcbiAgICAgICAgdGFiYmFibGUobWVudUVsZW1lbnQpWzBdLmZvY3VzKCk7XHJcbn1cclxuZnVuY3Rpb24gaGFuZGxlRXNjYXBlS2V5KHsga2V5IH0pIHtcclxuICAgIGlmIChrZXkgPT09IFwiRXNjYXBlXCIpXHJcbiAgICAgICAgb3BlbiA9IGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZU1vdXNlRW50ZXIoKSB7XHJcbiAgICBpZiAoJGN1cnJlbnRNZW51ICYmICQkc2xvdHMuZmx5b3V0KSB7XHJcbiAgICAgICAgJGN1cnJlbnRNZW51ID0gbWVudTtcclxuICAgICAgICBvcGVuID0gdHJ1ZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBoYW5kbGVLZXlEb3duKHsga2V5IH0pIHtcclxuICAgIGlmIChrZXkgPT09IFwiRW50ZXJcIiB8fCBrZXkgPT09IFwiIFwiKSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBvcGVuID0gIW9wZW47XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaGFuZGxlRm9jdXMoKSB7XHJcbiAgICBpZiAob3Blbikge1xyXG4gICAgICAgIGZvY3VzRmlyc3RJdGVtKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgkY3VycmVudE1lbnUpIHtcclxuICAgICAgICAkY3VycmVudE1lbnUgPSBtZW51O1xyXG4gICAgICAgIG9wZW4gPSB0cnVlO1xyXG4gICAgfVxyXG59XHJcbnNldENvbnRleHQoXCJjbG9zZUZseW91dFwiLCBldmVudCA9PiB7XHJcbiAgICBkaXNwYXRjaChcInNlbGVjdFwiKTtcclxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgb3BlbiA9IGZhbHNlO1xyXG59KTtcclxuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6d2luZG93IG9uOmtleWRvd249e2hhbmRsZUVzY2FwZUtleX0gLz5cblxuPGxpXG5cdHVzZTpmb3J3YXJkRXZlbnRzXG5cdGNsYXNzPVwibWVudS1iYXItaXRlbSB7Y2xhc3NOYW1lfVwiXG5cdGNsYXNzOmRpc2FibGVkXG5cdHJvbGU9XCJtZW51aXRlbVwiXG5cdHRhYmluZGV4PXtkaXNhYmxlZCA/IC0xIDogMH1cblx0YXJpYS1leHBhbmRlZD17JCRzbG90cy5mbHlvdXQgJiYgIWRpc2FibGVkICYmIG9wZW59XG5cdGFyaWEtaGFzcG9wdXA9eyQkc2xvdHMuZmx5b3V0ICYmICFkaXNhYmxlZCAmJiBvcGVufVxuXHRhcmlhLWNvbnRyb2xzPXskJHNsb3RzLmZseW91dCAmJiAhZGlzYWJsZWQgJiYgbWVudUlkfVxuXHRiaW5kOnRoaXM9e2VsZW1lbnR9XG5cdG9uOmtleWRvd249e2V2ZW50ID0+IGhhbmRsZVNpZGVOYXZpZ2F0aW9uKGV2ZW50LCBlbGVtZW50KX1cblx0b246a2V5ZG93bnxzZWxmPXtoYW5kbGVLZXlEb3dufVxuXHRvbjpmb2N1cz17aGFuZGxlRm9jdXN9XG5cdG9uOm1vdXNlZG93bj17KCkgPT4gKG9wZW4gPSAhb3Blbil9XG5cdG9uOm1vdXNlZW50ZXI9e2hhbmRsZU1vdXNlRW50ZXJ9XG5cdHsuLi4kJHJlc3RQcm9wc31cbj5cblx0PHNsb3QgLz5cblx0eyNpZiAkJHNsb3RzLmZseW91dCAmJiBvcGVuICYmICFkaXNhYmxlZH1cblx0XHQ8ZGl2XG5cdFx0XHRjbGFzcz1cIm1lbnUtZmx5b3V0LWFuY2hvclwiXG5cdFx0XHR1c2U6YXJyb3dOYXZpZ2F0aW9uPXt7IHByZXZlbnRUYWI6IHRydWUgfX1cblx0XHRcdHVzZTpleHRlcm5hbE1vdXNlRXZlbnRzPXt7IHR5cGU6IFwibW91c2Vkb3duXCIsIHN0b3BQcm9wYWdhdGlvbjogdHJ1ZSB9fVxuXHRcdFx0b246b3V0ZXJtb3VzZWRvd249eygpID0+IChvcGVuID0gZmFsc2UpfVxuXHRcdFx0YmluZDp0aGlzPXthbmNob3JFbGVtZW50fVxuXHRcdD5cblx0XHRcdDxNZW51Rmx5b3V0U3VyZmFjZSBiaW5kOmVsZW1lbnQ9e21lbnVFbGVtZW50fSBiaW5kOnRoaXM9e21lbnV9PlxuXHRcdFx0XHQ8c2xvdCBuYW1lPVwiZmx5b3V0XCIgLz5cblx0XHRcdDwvTWVudUZseW91dFN1cmZhY2U+XG5cdFx0PC9kaXY+XG5cdHsvaWZ9XG48L2xpPlxuXG48c3R5bGUgPi5tZW51LWJhci1pdGVte2FsaWduLWl0ZW1zOmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWZkcy1zdWJ0bGUtZmlsbC10cmFuc3BhcmVudCk7Ym9yZGVyLXJhZGl1czp2YXIoLS1mZHMtY29udHJvbC1jb3JuZXItcmFkaXVzKTtjb2xvcjp2YXIoLS1mZHMtdGV4dC1wcmltYXJ5KTtjdXJzb3I6ZGVmYXVsdDtkaXNwbGF5OmlubGluZS1mbGV4O2ZvbnQtZmFtaWx5OnZhcigtLWZkcy1mb250LWZhbWlseS10ZXh0KTtmb250LXNpemU6dmFyKC0tZmRzLWJvZHktZm9udC1zaXplKTtmb250LXdlaWdodDo0MDA7bGluZS1oZWlnaHQ6MjBweDttYXJnaW46NHB4O3BhZGRpbmc6NXB4IDExcHg7cG9zaXRpb246cmVsYXRpdmU7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5tZW51LWJhci1pdGVtOmhvdmVye2JhY2tncm91bmQtY29sb3I6dmFyKC0tZmRzLXN1YnRsZS1maWxsLXNlY29uZGFyeSl9Lm1lbnUtYmFyLWl0ZW06YWN0aXZlLC5tZW51LWJhci1pdGVtW2FyaWEtZXhwYW5kZWQ9dHJ1ZV17YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1mZHMtc3VidGxlLWZpbGwtdGVydGlhcnkpfS5tZW51LWJhci1pdGVtOmFjdGl2ZTpob3ZlciwubWVudS1iYXItaXRlbVthcmlhLWV4cGFuZGVkPXRydWVdOmhvdmVye2JhY2tncm91bmQtY29sb3I6dmFyKC0tZmRzLXN1YnRsZS1maWxsLXNlY29uZGFyeSl9Lm1lbnUtYmFyLWl0ZW06YWN0aXZle2NvbG9yOnZhcigtLWZkcy10ZXh0LXNlY29uZGFyeSl9Lm1lbnUtYmFyLWl0ZW0uZGlzYWJsZWR7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1mZHMtc3VidGxlLWZpbGwtZGlzYWJsZWQpIWltcG9ydGFudDtjb2xvcjp2YXIoLS1mZHMtdGV4dC1kaXNhYmxlZCl9Lm1lbnUtZmx5b3V0LWFuY2hvcntpbnNldC1ibG9jay1zdGFydDoxMDAlO2luc2V0LWlubGluZS1zdGFydDowO3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6MTAwMDB9PC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzSFEsNkJBQWMsQ0FBQyxZQUFZLE1BQU0sQ0FBQyxpQkFBaUIsSUFBSSw2QkFBNkIsQ0FBQyxDQUFDLGNBQWMsSUFBSSwyQkFBMkIsQ0FBQyxDQUFDLE1BQU0sSUFBSSxrQkFBa0IsQ0FBQyxDQUFDLE9BQU8sT0FBTyxDQUFDLFFBQVEsV0FBVyxDQUFDLFlBQVksSUFBSSxzQkFBc0IsQ0FBQyxDQUFDLFVBQVUsSUFBSSxvQkFBb0IsQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLFlBQVksSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLFFBQVEsQ0FBQyxvQkFBb0IsSUFBSSxDQUFDLGlCQUFpQixJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyw2QkFBYyxNQUFNLENBQUMsaUJBQWlCLElBQUksMkJBQTJCLENBQUMsQ0FBQyw2QkFBYyxPQUFPLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxJQUFJLGdCQUFDLENBQUMsaUJBQWlCLElBQUksMEJBQTBCLENBQUMsQ0FBQyw2QkFBYyxPQUFPLE1BQU0sQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLElBQUksZ0JBQUMsTUFBTSxDQUFDLGlCQUFpQixJQUFJLDJCQUEyQixDQUFDLENBQUMsNkJBQWMsT0FBTyxDQUFDLE1BQU0sSUFBSSxvQkFBb0IsQ0FBQyxDQUFDLGNBQWMsd0JBQVMsQ0FBQyxpQkFBaUIsSUFBSSwwQkFBMEIsQ0FBQyxVQUFVLENBQUMsTUFBTSxJQUFJLG1CQUFtQixDQUFDLENBQUMsa0NBQW1CLENBQUMsa0JBQWtCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFNBQVMsUUFBUSxDQUFDLFFBQVEsS0FBSyxDQUFDIn0= */");
}

const get_flyout_slot_changes = dirty => ({});
const get_flyout_slot_context = ctx => ({});

// (104:1) {#if $$slots.flyout && open && !disabled}
function create_if_block(ctx) {
	let div;
	let menuflyoutsurface;
	let updating_element;
	let arrowNavigation_action;
	let externalMouseEvents_action;
	let current;
	let mounted;
	let dispose;

	function menuflyoutsurface_element_binding(value) {
		/*menuflyoutsurface_element_binding*/ ctx[18](value);
	}

	let menuflyoutsurface_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*menuElement*/ ctx[3] !== void 0) {
		menuflyoutsurface_props.element = /*menuElement*/ ctx[3];
	}

	menuflyoutsurface = new MenuFlyoutSurface({
			props: menuflyoutsurface_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(menuflyoutsurface, 'element', menuflyoutsurface_element_binding));
	/*menuflyoutsurface_binding*/ ctx[19](menuflyoutsurface);

	const block = {
		c: function create() {
			div = element_1("div");
			create_component(menuflyoutsurface.$$.fragment);
			attr_dev(div, "class", "menu-flyout-anchor svelte-1r3ld34");
			add_location(div, file, 104, 2, 3041);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(menuflyoutsurface, div, null);
			/*div_binding*/ ctx[21](div);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(arrowNavigation_action = arrowNavigation.call(null, div, { preventTab: true })),
					action_destroyer(externalMouseEvents_action = externalMouseEvents.call(null, div, { type: "mousedown", stopPropagation: true })),
					listen_dev(div, "outermousedown", /*outermousedown_handler*/ ctx[20], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			const menuflyoutsurface_changes = {};

			if (dirty & /*$$scope*/ 33554432) {
				menuflyoutsurface_changes.$$scope = { dirty, ctx };
			}

			if (!updating_element && dirty & /*menuElement*/ 8) {
				updating_element = true;
				menuflyoutsurface_changes.element = /*menuElement*/ ctx[3];
				add_flush_callback(() => updating_element = false);
			}

			menuflyoutsurface.$set(menuflyoutsurface_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(menuflyoutsurface.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(menuflyoutsurface.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			/*menuflyoutsurface_binding*/ ctx[19](null);
			destroy_component(menuflyoutsurface);
			/*div_binding*/ ctx[21](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(104:1) {#if $$slots.flyout && open && !disabled}",
		ctx
	});

	return block;
}

// (112:3) <MenuFlyoutSurface bind:element={menuElement} bind:this={menu}>
function create_default_slot(ctx) {
	let current;
	const flyout_slot_template = /*#slots*/ ctx[17].flyout;
	const flyout_slot = create_slot(flyout_slot_template, ctx, /*$$scope*/ ctx[25], get_flyout_slot_context);

	const block = {
		c: function create() {
			if (flyout_slot) flyout_slot.c();
		},
		m: function mount(target, anchor) {
			if (flyout_slot) {
				flyout_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (flyout_slot) {
				if (flyout_slot.p && (!current || dirty & /*$$scope*/ 33554432)) {
					update_slot_base(
						flyout_slot,
						flyout_slot_template,
						ctx,
						/*$$scope*/ ctx[25],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[25])
						: get_slot_changes(flyout_slot_template, /*$$scope*/ ctx[25], dirty, get_flyout_slot_changes),
						get_flyout_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(flyout_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(flyout_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (flyout_slot) flyout_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(112:3) <MenuFlyoutSurface bind:element={menuElement} bind:this={menu}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let li;
	let t;
	let li_class_value;
	let li_tabindex_value;
	let li_aria_expanded_value;
	let li_aria_haspopup_value;
	let li_aria_controls_value;
	let forwardEvents_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[25], null);
	let if_block = /*$$slots*/ ctx[14].flyout && /*open*/ ctx[0] && !/*disabled*/ ctx[4] && create_if_block(ctx);

	let li_levels = [
		{
			class: li_class_value = "menu-bar-item " + /*className*/ ctx[5]
		},
		{ role: "menuitem" },
		{
			tabindex: li_tabindex_value = /*disabled*/ ctx[4] ? -1 : 0
		},
		{
			"aria-expanded": li_aria_expanded_value = /*$$slots*/ ctx[14].flyout && !/*disabled*/ ctx[4] && /*open*/ ctx[0]
		},
		{
			"aria-haspopup": li_aria_haspopup_value = /*$$slots*/ ctx[14].flyout && !/*disabled*/ ctx[4] && /*open*/ ctx[0]
		},
		{
			"aria-controls": li_aria_controls_value = /*$$slots*/ ctx[14].flyout && !/*disabled*/ ctx[4] && /*menuId*/ ctx[8]
		},
		/*$$restProps*/ ctx[15]
	];

	let li_data = {};

	for (let i = 0; i < li_levels.length; i += 1) {
		li_data = assign(li_data, li_levels[i]);
	}

	const block = {
		c: function create() {
			li = element_1("li");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			set_attributes(li, li_data);
			toggle_class(li, "disabled", /*disabled*/ ctx[4]);
			toggle_class(li, "svelte-1r3ld34", true);
			add_location(li, file, 85, 0, 2475);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);

			if (default_slot) {
				default_slot.m(li, null);
			}

			append_dev(li, t);
			if (if_block) if_block.m(li, null);
			/*li_binding*/ ctx[22](li);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(window, "keydown", /*handleEscapeKey*/ ctx[10], false, false, false),
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[7].call(null, li)),
					listen_dev(li, "keydown", /*keydown_handler*/ ctx[23], false, false, false),
					listen_dev(li, "keydown", self(/*handleKeyDown*/ ctx[12]), false, false, false),
					listen_dev(li, "focus", /*handleFocus*/ ctx[13], false, false, false),
					listen_dev(li, "mousedown", /*mousedown_handler*/ ctx[24], false, false, false),
					listen_dev(li, "mouseenter", /*handleMouseEnter*/ ctx[11], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 33554432)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[25],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[25])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[25], dirty, null),
						null
					);
				}
			}

			if (/*$$slots*/ ctx[14].flyout && /*open*/ ctx[0] && !/*disabled*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$$slots, open, disabled*/ 16401) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(li, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			set_attributes(li, li_data = get_spread_update(li_levels, [
				(!current || dirty & /*className*/ 32 && li_class_value !== (li_class_value = "menu-bar-item " + /*className*/ ctx[5])) && { class: li_class_value },
				{ role: "menuitem" },
				(!current || dirty & /*disabled*/ 16 && li_tabindex_value !== (li_tabindex_value = /*disabled*/ ctx[4] ? -1 : 0)) && { tabindex: li_tabindex_value },
				(!current || dirty & /*$$slots, disabled, open*/ 16401 && li_aria_expanded_value !== (li_aria_expanded_value = /*$$slots*/ ctx[14].flyout && !/*disabled*/ ctx[4] && /*open*/ ctx[0])) && { "aria-expanded": li_aria_expanded_value },
				(!current || dirty & /*$$slots, disabled, open*/ 16401 && li_aria_haspopup_value !== (li_aria_haspopup_value = /*$$slots*/ ctx[14].flyout && !/*disabled*/ ctx[4] && /*open*/ ctx[0])) && { "aria-haspopup": li_aria_haspopup_value },
				(!current || dirty & /*$$slots, disabled*/ 16400 && li_aria_controls_value !== (li_aria_controls_value = /*$$slots*/ ctx[14].flyout && !/*disabled*/ ctx[4] && /*menuId*/ ctx[8])) && { "aria-controls": li_aria_controls_value },
				dirty & /*$$restProps*/ 32768 && /*$$restProps*/ ctx[15]
			]));

			toggle_class(li, "disabled", /*disabled*/ ctx[4]);
			toggle_class(li, "svelte-1r3ld34", true);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			/*li_binding*/ ctx[22](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["open","disabled","class","element","anchorElement","menuElement"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let $currentMenu;
	validate_store(currentMenu, 'currentMenu');
	component_subscribe($$self, currentMenu, $$value => $$invalidate(16, $currentMenu = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('MenuBarItem', slots, ['default','flyout']);
	const $$slots = compute_slots(slots);
	let { open = false } = $$props;
	let { disabled = false } = $$props;
	let { class: className = "" } = $$props;
	let { element = null } = $$props;
	let { anchorElement = null } = $$props;
	let { menuElement = null } = $$props;
	let menu;
	const forwardEvents = createEventForwarder(get_current_component(), ["open", "close", "select"]);
	const dispatch = createEventDispatcher();
	const menuId = uid("fds-menu-flyout-anchor-");
	const handleSideNavigation = getContext("sideNavigation");

	function focusFirstItem() {
		if (open && menu && tabbable(menuElement).length > 0) tabbable(menuElement)[0].focus();
	}

	function handleEscapeKey({ key }) {
		if (key === "Escape") $$invalidate(0, open = false);
	}

	function handleMouseEnter() {
		if ($currentMenu && $$slots.flyout) {
			set_store_value(currentMenu, $currentMenu = menu, $currentMenu);
			$$invalidate(0, open = true);
		}
	}

	function handleKeyDown({ key }) {
		if (key === "Enter" || key === " ") {
			event.preventDefault();
			$$invalidate(0, open = !open);
		}
	}

	function handleFocus() {
		if (open) {
			focusFirstItem();
		} else if ($currentMenu) {
			set_store_value(currentMenu, $currentMenu = menu, $currentMenu);
			$$invalidate(0, open = true);
		}
	}

	setContext("closeFlyout", event => {
		dispatch("select");
		event.stopPropagation();
		$$invalidate(0, open = false);
	});

	function menuflyoutsurface_element_binding(value) {
		menuElement = value;
		$$invalidate(3, menuElement);
	}

	function menuflyoutsurface_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			menu = $$value;
			$$invalidate(6, menu);
		});
	}

	const outermousedown_handler = () => $$invalidate(0, open = false);

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			anchorElement = $$value;
			$$invalidate(2, anchorElement);
		});
	}

	function li_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(1, element);
		});
	}

	const keydown_handler = event => handleSideNavigation(event, element);
	const mousedown_handler = () => $$invalidate(0, open = !open);

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(15, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('open' in $$new_props) $$invalidate(0, open = $$new_props.open);
		if ('disabled' in $$new_props) $$invalidate(4, disabled = $$new_props.disabled);
		if ('class' in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ('element' in $$new_props) $$invalidate(1, element = $$new_props.element);
		if ('anchorElement' in $$new_props) $$invalidate(2, anchorElement = $$new_props.anchorElement);
		if ('menuElement' in $$new_props) $$invalidate(3, menuElement = $$new_props.menuElement);
		if ('$$scope' in $$new_props) $$invalidate(25, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		currentMenu,
		tabbable,
		createEventDispatcher,
		getContext,
		setContext,
		get_current_component,
		createEventForwarder,
		arrowNavigation,
		externalMouseEvents,
		uid,
		MenuFlyoutSurface,
		open,
		disabled,
		className,
		element,
		anchorElement,
		menuElement,
		menu,
		forwardEvents,
		dispatch,
		menuId,
		handleSideNavigation,
		focusFirstItem,
		handleEscapeKey,
		handleMouseEnter,
		handleKeyDown,
		handleFocus,
		$currentMenu
	});

	$$self.$inject_state = $$new_props => {
		if ('open' in $$props) $$invalidate(0, open = $$new_props.open);
		if ('disabled' in $$props) $$invalidate(4, disabled = $$new_props.disabled);
		if ('className' in $$props) $$invalidate(5, className = $$new_props.className);
		if ('element' in $$props) $$invalidate(1, element = $$new_props.element);
		if ('anchorElement' in $$props) $$invalidate(2, anchorElement = $$new_props.anchorElement);
		if ('menuElement' in $$props) $$invalidate(3, menuElement = $$new_props.menuElement);
		if ('menu' in $$props) $$invalidate(6, menu = $$new_props.menu);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*menu*/ 64) {
			$: if (menu) {
				focusFirstItem();
				set_store_value(currentMenu, $currentMenu = menu, $currentMenu);
			} else {
				set_store_value(currentMenu, $currentMenu = null, $currentMenu);
			}
		}

		if ($$self.$$.dirty & /*$currentMenu, menu*/ 65600) {
			$: if ($currentMenu !== menu) $$invalidate(0, open = false);
		}

		if ($$self.$$.dirty & /*menu, element*/ 66) {
			$: if (!menu && element) element.focus();
		}

		if ($$self.$$.dirty & /*open, disabled*/ 17) {
			$: if ($$slots.flyout && open && !disabled) {
				if (open) {
					dispatch("open");
				} else {
					dispatch("close");
				}
			}
		}
	};

	return [
		open,
		element,
		anchorElement,
		menuElement,
		disabled,
		className,
		menu,
		forwardEvents,
		menuId,
		handleSideNavigation,
		handleEscapeKey,
		handleMouseEnter,
		handleKeyDown,
		handleFocus,
		$$slots,
		$$restProps,
		$currentMenu,
		slots,
		menuflyoutsurface_element_binding,
		menuflyoutsurface_binding,
		outermousedown_handler,
		div_binding,
		li_binding,
		keydown_handler,
		mousedown_handler,
		$$scope
	];
}

class MenuBarItem extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				open: 0,
				disabled: 4,
				class: 5,
				element: 1,
				anchorElement: 2,
				menuElement: 3
			},
			add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MenuBarItem",
			options,
			id: create_fragment.name
		});
	}

	get open() {
		throw new Error("<MenuBarItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set open(value) {
		throw new Error("<MenuBarItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<MenuBarItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<MenuBarItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<MenuBarItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<MenuBarItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<MenuBarItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<MenuBarItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get anchorElement() {
		throw new Error("<MenuBarItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set anchorElement(value) {
		throw new Error("<MenuBarItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get menuElement() {
		throw new Error("<MenuBarItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set menuElement(value) {
		throw new Error("<MenuBarItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default MenuBarItem;