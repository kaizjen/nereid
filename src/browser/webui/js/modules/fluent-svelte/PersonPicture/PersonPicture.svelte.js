/* PersonPicture.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	append_styles,
	assign,
	attr_dev,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_slot,
	detach_dev,
	dispatch_dev,
	element as element_1,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	group_outros,
	init,
	insert_dev,
	listen_dev,
	noop,
	safe_not_equal,
	set_attributes,
	set_data_dev,
	set_style,
	space,
	src_url_equal,
	text,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

const file = "PersonPicture.svelte";

function add_css(target) {
	append_styles(target, "svelte-p3ps28", ".person-picture.svelte-p3ps28{align-items:center;background-clip:padding-box;background-color:var(--fds-control-alt-fill-quarternary);block-size:100%;border:1px solid var(--fds-card-stroke-default);border-radius:50%;box-sizing:border-box;display:flex;flex:0 0 auto;font-family:var(--fds-font-family-display);font-size:calc(var(--fds-person-picture-size)*.41667);font-weight:600;inline-size:100%;justify-content:center;overflow:hidden;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.person-picture-container.svelte-p3ps28{block-size:var(--fds-person-picture-size);display:flex;inline-size:var(--fds-person-picture-size);position:relative}.person-picture-badge.svelte-p3ps28{align-items:flex-end;block-size:100%;display:flex;flex-direction:column;inline-size:100%;inset-block-start:0;inset-inline-start:0;position:absolute}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGVyc29uUGljdHVyZS5zdmVsdGUiLCJzb3VyY2VzIjpbIlBlcnNvblBpY3R1cmUuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQgPi8qKiBUaGUgc2l6ZSBvZiB0aGUgcGljdHVyZSBpbiBwaXhlbHMuICovXHJcbmV4cG9ydCBsZXQgc2l6ZSA9IDcyO1xyXG4vKiogU291cmNlIFVSTCB1c2VkIGZvciB0aGUgcGljdHVyZS4gKi9cclxuZXhwb3J0IGxldCBzcmMgPSB1bmRlZmluZWQ7XHJcbi8qKiBEZWZpbmVzIHRoZSBhbHQgdGV4dCB1c2VkIGlmIGFuIGBzcmNgIGF0dHJpYnV0ZSBpcyBzcGVjaWZpZWQuIEFsc28gdXNlZCBhcyBmYWxsYmFjayB0ZXh0IGlmIG5vIGBzcmNgIG9yIHNsb3QgdGV4dCBpcyBwcm92aWRlZC4gKi9cclxuZXhwb3J0IGxldCBhbHQgPSB1bmRlZmluZWQ7XHJcbi8qKiBTcGVjaWZpZXMgYSBjdXN0b20gY2xhc3MgbmFtZSBmb3IgdGhlIGlubmVyIHBpY3R1cmUuICovXHJcbmxldCBjbGFzc05hbWUgPSBcIlwiO1xyXG5leHBvcnQgeyBjbGFzc05hbWUgYXMgY2xhc3MgfTtcclxuLyoqIE9idGFpbnMgYSBib3VuZCBET00gcmVmZXJlbmNlIHRvIHRoZSBpbm5lciBwaWN0dXJlIGVsZW1lbnQuICovXHJcbmV4cG9ydCBsZXQgZWxlbWVudCA9IG51bGw7XHJcbi8qKiBPYnRhaW5zIGEgYm91bmQgRE9NIHJlZmVyZW5jZSB0byB0aGUgb3V0ZXIgcGljdHVyZSBjb250YWluZXIuICovXHJcbmV4cG9ydCBsZXQgY29udGFpbmVyRWxlbWVudCA9IG51bGw7XHJcbmxldCBlcnJvciA9IGZhbHNlO1xyXG4kOiBpZiAoc3JjKVxyXG4gICAgZXJyb3IgPSBmYWxzZTtcclxuPC9zY3JpcHQ+XG5cbjxkaXZcblx0Y2xhc3M9XCJwZXJzb24tcGljdHVyZS1jb250YWluZXJcIlxuXHRzdHlsZT1cIi0tZmRzLXBlcnNvbi1waWN0dXJlLXNpemU6IHtzaXplfXB4XCJcblx0YmluZDp0aGlzPXtjb250YWluZXJFbGVtZW50fVxuPlxuXHR7I2lmIHNyYyAmJiAhZXJyb3J9XG5cdFx0PGltZ1xuXHRcdFx0YmluZDp0aGlzPXtlbGVtZW50fVxuXHRcdFx0b246ZXJyb3I9eygpID0+IChlcnJvciA9IHRydWUpfVxuXHRcdFx0Y2xhc3M9XCJwZXJzb24tcGljdHVyZSB7Y2xhc3NOYW1lfVwiXG5cdFx0XHR3aWR0aD17c2l6ZX1cblx0XHRcdGhlaWdodD17c2l6ZX1cblx0XHRcdHtzcmN9XG5cdFx0XHR7YWx0fVxuXHRcdFx0ey4uLiQkcmVzdFByb3BzfVxuXHRcdC8+XG5cdHs6ZWxzZX1cblx0XHQ8ZGl2IGJpbmQ6dGhpcz17ZWxlbWVudH0gY2xhc3M9XCJwZXJzb24tcGljdHVyZSB7Y2xhc3NOYW1lfVwiIHsuLi4kJHJlc3RQcm9wc30+XG5cdFx0XHQ8c2xvdD5cblx0XHRcdFx0e2FsdFxuXHRcdFx0XHRcdD8uc3BsaXQoXCIgXCIpXG5cdFx0XHRcdFx0Lm1hcChpID0+IGkuY2hhckF0KDApKVxuXHRcdFx0XHRcdC5qb2luKFwiXCIpXG5cdFx0XHRcdFx0LnRvVXBwZXJDYXNlKCkgPz8gXCJcIn1cblx0XHRcdDwvc2xvdD5cblx0XHQ8L2Rpdj5cblx0ey9pZn1cblx0eyNpZiAkJHNsb3RzLmJhZGdlfVxuXHRcdDxzcGFuIGNsYXNzPVwicGVyc29uLXBpY3R1cmUtYmFkZ2VcIj5cblx0XHRcdDxzbG90IG5hbWU9XCJiYWRnZVwiIC8+XG5cdFx0PC9zcGFuPlxuXHR7L2lmfVxuPC9kaXY+XG5cbjxzdHlsZSA+LnBlcnNvbi1waWN0dXJle2FsaWduLWl0ZW1zOmNlbnRlcjtiYWNrZ3JvdW5kLWNsaXA6cGFkZGluZy1ib3g7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1mZHMtY29udHJvbC1hbHQtZmlsbC1xdWFydGVybmFyeSk7YmxvY2stc2l6ZToxMDAlO2JvcmRlcjoxcHggc29saWQgdmFyKC0tZmRzLWNhcmQtc3Ryb2tlLWRlZmF1bHQpO2JvcmRlci1yYWRpdXM6NTAlO2JveC1zaXppbmc6Ym9yZGVyLWJveDtkaXNwbGF5OmZsZXg7ZmxleDowIDAgYXV0bztmb250LWZhbWlseTp2YXIoLS1mZHMtZm9udC1mYW1pbHktZGlzcGxheSk7Zm9udC1zaXplOmNhbGModmFyKC0tZmRzLXBlcnNvbi1waWN0dXJlLXNpemUpKi40MTY2Nyk7Zm9udC13ZWlnaHQ6NjAwO2lubGluZS1zaXplOjEwMCU7anVzdGlmeS1jb250ZW50OmNlbnRlcjtvdmVyZmxvdzpoaWRkZW47dGV4dC1hbGlnbjpjZW50ZXI7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5wZXJzb24tcGljdHVyZS1jb250YWluZXJ7YmxvY2stc2l6ZTp2YXIoLS1mZHMtcGVyc29uLXBpY3R1cmUtc2l6ZSk7ZGlzcGxheTpmbGV4O2lubGluZS1zaXplOnZhcigtLWZkcy1wZXJzb24tcGljdHVyZS1zaXplKTtwb3NpdGlvbjpyZWxhdGl2ZX0ucGVyc29uLXBpY3R1cmUtYmFkZ2V7YWxpZ24taXRlbXM6ZmxleC1lbmQ7YmxvY2stc2l6ZToxMDAlO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47aW5saW5lLXNpemU6MTAwJTtpbnNldC1ibG9jay1zdGFydDowO2luc2V0LWlubGluZS1zdGFydDowO3Bvc2l0aW9uOmFic29sdXRlfTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0RRLDZCQUFlLENBQUMsWUFBWSxNQUFNLENBQUMsZ0JBQWdCLFdBQVcsQ0FBQyxpQkFBaUIsSUFBSSxrQ0FBa0MsQ0FBQyxDQUFDLFdBQVcsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLHlCQUF5QixDQUFDLENBQUMsY0FBYyxHQUFHLENBQUMsV0FBVyxVQUFVLENBQUMsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUkseUJBQXlCLENBQUMsQ0FBQyxVQUFVLEtBQUssSUFBSSx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLFlBQVksSUFBSSxDQUFDLGdCQUFnQixNQUFNLENBQUMsU0FBUyxNQUFNLENBQUMsV0FBVyxNQUFNLENBQUMsb0JBQW9CLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLGdCQUFnQixJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsdUNBQXlCLENBQUMsV0FBVyxJQUFJLHlCQUF5QixDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsWUFBWSxJQUFJLHlCQUF5QixDQUFDLENBQUMsU0FBUyxRQUFRLENBQUMsbUNBQXFCLENBQUMsWUFBWSxRQUFRLENBQUMsV0FBVyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsZUFBZSxNQUFNLENBQUMsWUFBWSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFNBQVMsUUFBUSxDQUFDIn0= */");
}

const get_badge_slot_changes = dirty => ({});
const get_badge_slot_context = ctx => ({});

// (35:1) {:else}
function create_else_block(ctx) {
	let div;
	let div_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	let div_levels = [
		{
			class: div_class_value = "person-picture " + /*className*/ ctx[5]
		},
		/*$$restProps*/ ctx[7]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element_1("div");
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			set_attributes(div, div_data);
			toggle_class(div, "svelte-p3ps28", true);
			add_location(div, file, 35, 2, 1017);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(div, null);
			}

			/*div_binding*/ ctx[13](div);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			} else {
				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*alt*/ 16)) {
					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*className*/ 32 && div_class_value !== (div_class_value = "person-picture " + /*className*/ ctx[5])) && { class: div_class_value },
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]
			]));

			toggle_class(div, "svelte-p3ps28", true);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
			/*div_binding*/ ctx[13](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(35:1) {:else}",
		ctx
	});

	return block;
}

// (24:1) {#if src && !error}
function create_if_block_1(ctx) {
	let img;
	let img_class_value;
	let img_src_value;
	let mounted;
	let dispose;

	let img_levels = [
		{
			class: img_class_value = "person-picture " + /*className*/ ctx[5]
		},
		{ width: /*size*/ ctx[2] },
		{ height: /*size*/ ctx[2] },
		{ src: img_src_value = /*src*/ ctx[3] },
		{ alt: /*alt*/ ctx[4] },
		/*$$restProps*/ ctx[7]
	];

	let img_data = {};

	for (let i = 0; i < img_levels.length; i += 1) {
		img_data = assign(img_data, img_levels[i]);
	}

	const block = {
		c: function create() {
			img = element_1("img");
			set_attributes(img, img_data);
			toggle_class(img, "svelte-p3ps28", true);
			add_location(img, file, 24, 2, 829);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			/*img_binding*/ ctx[11](img);

			if (!mounted) {
				dispose = listen_dev(img, "error", /*error_handler*/ ctx[12], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			set_attributes(img, img_data = get_spread_update(img_levels, [
				dirty & /*className*/ 32 && img_class_value !== (img_class_value = "person-picture " + /*className*/ ctx[5]) && { class: img_class_value },
				dirty & /*size*/ 4 && { width: /*size*/ ctx[2] },
				dirty & /*size*/ 4 && { height: /*size*/ ctx[2] },
				dirty & /*src*/ 8 && !src_url_equal(img.src, img_src_value = /*src*/ ctx[3]) && { src: img_src_value },
				dirty & /*alt*/ 16 && { alt: /*alt*/ ctx[4] },
				dirty & /*$$restProps*/ 128 && /*$$restProps*/ ctx[7]
			]));

			toggle_class(img, "svelte-p3ps28", true);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			/*img_binding*/ ctx[11](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(24:1) {#if src && !error}",
		ctx
	});

	return block;
}

// (37:9)      
function fallback_block(ctx) {
	let t_value = (/*alt*/ ctx[4]?.split(" ").map(func).join("").toUpperCase() ?? "") + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*alt*/ 16 && t_value !== (t_value = (/*alt*/ ctx[4]?.split(" ").map(func).join("").toUpperCase() ?? "") + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(37:9)      ",
		ctx
	});

	return block;
}

// (46:1) {#if $$slots.badge}
function create_if_block(ctx) {
	let span;
	let current;
	const badge_slot_template = /*#slots*/ ctx[10].badge;
	const badge_slot = create_slot(badge_slot_template, ctx, /*$$scope*/ ctx[9], get_badge_slot_context);

	const block = {
		c: function create() {
			span = element_1("span");
			if (badge_slot) badge_slot.c();
			attr_dev(span, "class", "person-picture-badge svelte-p3ps28");
			add_location(span, file, 46, 2, 1252);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);

			if (badge_slot) {
				badge_slot.m(span, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (badge_slot) {
				if (badge_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						badge_slot,
						badge_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(badge_slot_template, /*$$scope*/ ctx[9], dirty, get_badge_slot_changes),
						get_badge_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(badge_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(badge_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (badge_slot) badge_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(46:1) {#if $$slots.badge}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let current_block_type_index;
	let if_block0;
	let t;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*src*/ ctx[3] && !/*error*/ ctx[6]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*$$slots*/ ctx[8].badge && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element_1("div");
			if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			attr_dev(div, "class", "person-picture-container svelte-p3ps28");
			set_style(div, "--fds-person-picture-size", /*size*/ ctx[2] + "px");
			add_location(div, file, 18, 0, 690);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			append_dev(div, t);
			if (if_block1) if_block1.m(div, null);
			/*div_binding_1*/ ctx[14](div);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(div, t);
			}

			if (/*$$slots*/ ctx[8].badge) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*$$slots*/ 256) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*size*/ 4) {
				set_style(div, "--fds-person-picture-size", /*size*/ ctx[2] + "px");
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
			/*div_binding_1*/ ctx[14](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const func = i => i.charAt(0);

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["size","src","alt","class","element","containerElement"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('PersonPicture', slots, ['default','badge']);
	const $$slots = compute_slots(slots);
	let { size = 72 } = $$props;
	let { src = undefined } = $$props;
	let { alt = undefined } = $$props;
	let { class: className = "" } = $$props;
	let { element = null } = $$props;
	let { containerElement = null } = $$props;
	let error = false;

	function img_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(0, element);
		});
	}

	const error_handler = () => $$invalidate(6, error = true);

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(0, element);
		});
	}

	function div_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			containerElement = $$value;
			$$invalidate(1, containerElement);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(7, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('size' in $$new_props) $$invalidate(2, size = $$new_props.size);
		if ('src' in $$new_props) $$invalidate(3, src = $$new_props.src);
		if ('alt' in $$new_props) $$invalidate(4, alt = $$new_props.alt);
		if ('class' in $$new_props) $$invalidate(5, className = $$new_props.class);
		if ('element' in $$new_props) $$invalidate(0, element = $$new_props.element);
		if ('containerElement' in $$new_props) $$invalidate(1, containerElement = $$new_props.containerElement);
		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		size,
		src,
		alt,
		className,
		element,
		containerElement,
		error
	});

	$$self.$inject_state = $$new_props => {
		if ('size' in $$props) $$invalidate(2, size = $$new_props.size);
		if ('src' in $$props) $$invalidate(3, src = $$new_props.src);
		if ('alt' in $$props) $$invalidate(4, alt = $$new_props.alt);
		if ('className' in $$props) $$invalidate(5, className = $$new_props.className);
		if ('element' in $$props) $$invalidate(0, element = $$new_props.element);
		if ('containerElement' in $$props) $$invalidate(1, containerElement = $$new_props.containerElement);
		if ('error' in $$props) $$invalidate(6, error = $$new_props.error);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*src*/ 8) {
			$: if (src) $$invalidate(6, error = false);
		}
	};

	return [
		element,
		containerElement,
		size,
		src,
		alt,
		className,
		error,
		$$restProps,
		$$slots,
		$$scope,
		slots,
		img_binding,
		error_handler,
		div_binding,
		div_binding_1
	];
}

class PersonPicture extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				size: 2,
				src: 3,
				alt: 4,
				class: 5,
				element: 0,
				containerElement: 1
			},
			add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "PersonPicture",
			options,
			id: create_fragment.name
		});
	}

	get size() {
		throw new Error("<PersonPicture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<PersonPicture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get src() {
		throw new Error("<PersonPicture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set src(value) {
		throw new Error("<PersonPicture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alt() {
		throw new Error("<PersonPicture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alt(value) {
		throw new Error("<PersonPicture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<PersonPicture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<PersonPicture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<PersonPicture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<PersonPicture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get containerElement() {
		throw new Error("<PersonPicture>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set containerElement(value) {
		throw new Error("<PersonPicture>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default PersonPicture;