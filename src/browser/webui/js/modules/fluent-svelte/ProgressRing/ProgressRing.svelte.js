/* ProgressRing.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	action_destroyer,
	add_location,
	append_dev,
	append_styles,
	assign,
	attr_dev,
	binding_callbacks,
	compute_rest_props,
	detach_dev,
	dispatch_dev,
	exclude_internal_props,
	get_spread_update,
	init,
	insert_dev,
	noop,
	safe_not_equal,
	set_svg_attributes,
	svg_element,
	toggle_class,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import { createEventForwarder } from "../internal.js";
import { createEventDispatcher } from "nereid://.svelte/index.mjs";
import { get_current_component } from "nereid://.svelte/internal/index.mjs";
const file = "ProgressRing.svelte";

function add_css(target) {
	append_styles(target, "svelte-32f9k0", "@-webkit-keyframes svelte-32f9k0-progress-ring-indeterminate{0%{stroke-dasharray:.01px 43.97px;transform:rotate(0)}50%{stroke-dasharray:21.99px 21.99px;transform:rotate(450deg)}to{stroke-dasharray:.01px 43.97px;transform:rotate(3turn)}}@keyframes svelte-32f9k0-progress-ring-indeterminate{0%{stroke-dasharray:.01px 43.97px;transform:rotate(0)}50%{stroke-dasharray:21.99px 21.99px;transform:rotate(450deg)}to{stroke-dasharray:.01px 43.97px;transform:rotate(3turn)}}.progress-ring.svelte-32f9k0.svelte-32f9k0{min-block-size:16px;min-inline-size:16px;outline:none}.progress-ring.svelte-32f9k0 circle.svelte-32f9k0{fill:none;stroke:var(--fds-accent-default);stroke-width:1.5;stroke-linecap:round;stroke-dasharray:43.97;transform:rotate(-90deg);transform-origin:50% 50%;transition:all var(--fds-control-normal-duration) linear}.progress-ring.indeterminate.svelte-32f9k0 circle.svelte-32f9k0{-webkit-animation:svelte-32f9k0-progress-ring-indeterminate 2s linear infinite;animation:svelte-32f9k0-progress-ring-indeterminate 2s linear infinite}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvZ3Jlc3NSaW5nLnN2ZWx0ZSIsInNvdXJjZXMiOlsiUHJvZ3Jlc3NSaW5nLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0ID5pbXBvcnQgeyBjcmVhdGVFdmVudEZvcndhcmRlciB9IGZyb20gXCIuLi9pbnRlcm5hbFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XHJcbmltcG9ydCB7IGdldF9jdXJyZW50X2NvbXBvbmVudCB9IGZyb20gXCJzdmVsdGUvaW50ZXJuYWxcIjtcclxuLyoqIERldGVybWluZXMgYSBjb21wbGV0aW9uIGFtb3VudCBpbiBwZXJjZW50YWdlICgwLTEwMCkuIElmIG5vIHZhbHVlIG9yIGFuIGludmFsaWQgdmFsdWUgaXMgcHJvdmlkZWQsIHRoZSByaW5nIHdpbGwgYmUgaW5kZXRlcm1pbmF0ZS4gKi9cclxuZXhwb3J0IGxldCB2YWx1ZSA9IHVuZGVmaW5lZDtcclxuLyoqIFRoZSBzaXplIChkaWFtZXRlcikgb2YgdGhlIHJpbmcgaW4gcGl4ZWxzLiAqL1xyXG5leHBvcnQgbGV0IHNpemUgPSAzMjtcclxuLyoqIFNwZWNpZmllcyBhIGN1c3RvbSBjbGFzcyBuYW1lIGZvciB0aGUgcmluZy4gKi9cclxubGV0IGNsYXNzTmFtZSA9IFwiXCI7XHJcbmV4cG9ydCB7IGNsYXNzTmFtZSBhcyBjbGFzcyB9O1xyXG4vKiogT2J0YWlucyBhIGJvdW5kIERPTSByZWZlcmVuY2UgdG8gdGhlIHJpbmcncyBTVkcgZWxlbWVudC4gKi9cclxuZXhwb3J0IGxldCBlbGVtZW50ID0gbnVsbDtcclxuLyoqIE9idGFpbnMgYSBib3VuZCBET00gcmVmZXJlbmNlIHRvIHRoZSByaW5nJ3MgZmlsbCBjaXJjbGUgZWxlbWVudC4gKi9cclxuZXhwb3J0IGxldCBjaXJjbGVFbGVtZW50ID0gbnVsbDtcclxuY29uc3QgZm9yd2FyZEV2ZW50cyA9IGNyZWF0ZUV2ZW50Rm9yd2FyZGVyKGdldF9jdXJyZW50X2NvbXBvbmVudCgpLCBbXCJjaGFuZ2VcIl0pO1xyXG5jb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xyXG5sZXQgY2lyY3VtZmVyZW5jZTtcclxuJDogaW5kZXRlcm1pbmF0ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCBOdW1iZXIuaXNOYU4odmFsdWUpO1xyXG4kOiBkaXNwYXRjaChcImNoYW5nZVwiLCB2YWx1ZSk7XHJcbiQ6IGlmIChjaXJjbGVFbGVtZW50KVxyXG4gICAgY2lyY3VtZmVyZW5jZSA9IE1hdGguUEkgKiAoY2lyY2xlRWxlbWVudC5yLmJhc2VWYWwudmFsdWUgKiAyKTtcclxuJDogaWYgKHZhbHVlIDwgMCkge1xyXG4gICAgdmFsdWUgPSAwO1xyXG59XHJcbmVsc2UgaWYgKHZhbHVlID4gMTAwKSB7XHJcbiAgICB2YWx1ZSA9IDEwMDtcclxufVxyXG48L3NjcmlwdD5cblxuPCEtLVxuQGNvbXBvbmVudFxuUHJvZ3Jlc3NSaW5nIHByb3ZpZGVzIHZpc3VhbCBmZWVkYmFjayB0byB0byB0aGUgdXNlciB0aGF0IGEgbG9uZy1ydW5uaW5nIG9wZXJhdGlvbiBpcyB1bmRlcndheS4gSXQgY2FuIG1lYW4gdGhhdCB0aGUgdXNlciBjYW5ub3QgaW50ZXJhY3Qgd2l0aCB0aGUgYXBwIHdoZW4gdGhlIHByb2dyZXNzIGluZGljYXRvciBpcyB2aXNpYmxlLCBhbmQgY2FuIGFsc28gaW5kaWNhdGUgaG93IGxvbmcgdGhlIHdhaXQgdGltZSBtaWdodCBiZS4gW0RvY3NdKGh0dHBzOi8vZmx1ZW50LXN2ZWx0ZS52ZXJjZWwuYXBwL2RvY3MvY29tcG9uZW50cy9wcm9ncmVzc3JpbmcpXG4tIFVzYWdlOlxuICAgIGBgYHRzeFxuICAgIDxQcm9ncmVzc1JpbmcgLz5cbiAgICA8UHJvZ3Jlc3NSaW5nIHZhbHVlPXs1MH0gLz5cbiAgICBgYGBcbi0tPlxuPHN2Z1xuXHR1c2U6Zm9yd2FyZEV2ZW50c1xuXHRiaW5kOnRoaXM9e2VsZW1lbnR9XG5cdHRhYmluZGV4PVwiLTFcIlxuXHRjbGFzcz1cInByb2dyZXNzLXJpbmcge2NsYXNzTmFtZX1cIlxuXHRjbGFzczppbmRldGVybWluYXRlXG5cdHdpZHRoPXtzaXplfVxuXHRoZWlnaHQ9e3NpemV9XG5cdHZpZXdCb3g9XCIwIDAgMTYgMTZcIlxuXHRyb2xlPXt2YWx1ZSA/IFwicHJvZ3Jlc3NiYXJcIiA6IFwic3RhdHVzXCJ9XG5cdGFyaWEtdmFsdWVtaW49eyFpbmRldGVybWluYXRlID8gMCA6IHVuZGVmaW5lZH1cblx0YXJpYS12YWx1ZW1heD17IWluZGV0ZXJtaW5hdGUgPyAxMDAgOiB1bmRlZmluZWR9XG5cdGFyaWEtdmFsdWVub3c9e3ZhbHVlfVxuXHR7Li4uJCRyZXN0UHJvcHN9XG4+XG5cdDxjaXJjbGVcblx0XHRiaW5kOnRoaXM9e2NpcmNsZUVsZW1lbnR9XG5cdFx0Y3g9XCI1MCVcIlxuXHRcdGN5PVwiNTAlXCJcblx0XHRyPVwiN1wiXG5cdFx0c3Ryb2tlLWRhc2hhcnJheT1cIjNcIlxuXHRcdHN0cm9rZS1kYXNob2Zmc2V0PXsoKDEwMCAtIHZhbHVlKSAvIDEwMCkgKiBjaXJjdW1mZXJlbmNlfVxuXHQvPlxuPC9zdmc+XG5cbjxzdHlsZSA+QC13ZWJraXQta2V5ZnJhbWVzIHByb2dyZXNzLXJpbmctaW5kZXRlcm1pbmF0ZXswJXtzdHJva2UtZGFzaGFycmF5Oi4wMXB4IDQzLjk3cHg7dHJhbnNmb3JtOnJvdGF0ZSgwKX01MCV7c3Ryb2tlLWRhc2hhcnJheToyMS45OXB4IDIxLjk5cHg7dHJhbnNmb3JtOnJvdGF0ZSg0NTBkZWcpfXRve3N0cm9rZS1kYXNoYXJyYXk6LjAxcHggNDMuOTdweDt0cmFuc2Zvcm06cm90YXRlKDN0dXJuKX19QGtleWZyYW1lcyBwcm9ncmVzcy1yaW5nLWluZGV0ZXJtaW5hdGV7MCV7c3Ryb2tlLWRhc2hhcnJheTouMDFweCA0My45N3B4O3RyYW5zZm9ybTpyb3RhdGUoMCl9NTAle3N0cm9rZS1kYXNoYXJyYXk6MjEuOTlweCAyMS45OXB4O3RyYW5zZm9ybTpyb3RhdGUoNDUwZGVnKX10b3tzdHJva2UtZGFzaGFycmF5Oi4wMXB4IDQzLjk3cHg7dHJhbnNmb3JtOnJvdGF0ZSgzdHVybil9fS5wcm9ncmVzcy1yaW5ne21pbi1ibG9jay1zaXplOjE2cHg7bWluLWlubGluZS1zaXplOjE2cHg7b3V0bGluZTpub25lfS5wcm9ncmVzcy1yaW5nIGNpcmNsZXtmaWxsOm5vbmU7c3Ryb2tlOnZhcigtLWZkcy1hY2NlbnQtZGVmYXVsdCk7c3Ryb2tlLXdpZHRoOjEuNTtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtZGFzaGFycmF5OjQzLjk3O3RyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTt0cmFuc2Zvcm0tb3JpZ2luOjUwJSA1MCU7dHJhbnNpdGlvbjphbGwgdmFyKC0tZmRzLWNvbnRyb2wtbm9ybWFsLWR1cmF0aW9uKSBsaW5lYXJ9LnByb2dyZXNzLXJpbmcuaW5kZXRlcm1pbmF0ZSBjaXJjbGV7LXdlYmtpdC1hbmltYXRpb246cHJvZ3Jlc3MtcmluZy1pbmRldGVybWluYXRlIDJzIGxpbmVhciBpbmZpbml0ZTthbmltYXRpb246cHJvZ3Jlc3MtcmluZy1pbmRldGVybWluYXRlIDJzIGxpbmVhciBpbmZpbml0ZX08L3N0eWxlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStEUSxtQkFBbUIseUNBQTJCLENBQUMsRUFBRSxDQUFDLGlCQUFpQixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxPQUFPLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxXQUFXLHlDQUEyQixDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLGlCQUFpQixPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsT0FBTyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsMENBQWMsQ0FBQyxlQUFlLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLDRCQUFjLENBQUMsb0JBQU0sQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLElBQUksb0JBQW9CLENBQUMsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxlQUFlLEtBQUssQ0FBQyxpQkFBaUIsS0FBSyxDQUFDLFVBQVUsT0FBTyxNQUFNLENBQUMsQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxJQUFJLDZCQUE2QixDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsNEJBQWMsQ0FBQyxvQkFBTSxDQUFDLGtCQUFrQix5Q0FBMkIsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLHlDQUEyQixDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDIn0= */");
}

function create_fragment(ctx) {
	let svg;
	let circle;
	let circle_stroke_dashoffset_value;
	let svg_class_value;
	let svg_role_value;
	let svg_aria_valuemin_value;
	let svg_aria_valuemax_value;
	let forwardEvents_action;
	let mounted;
	let dispose;

	let svg_levels = [
		{ tabindex: "-1" },
		{
			class: svg_class_value = "progress-ring " + /*className*/ ctx[4]
		},
		{ width: /*size*/ ctx[3] },
		{ height: /*size*/ ctx[3] },
		{ viewBox: "0 0 16 16" },
		{
			role: svg_role_value = /*value*/ ctx[0] ? "progressbar" : "status"
		},
		{
			"aria-valuemin": svg_aria_valuemin_value = !/*indeterminate*/ ctx[6] ? 0 : undefined
		},
		{
			"aria-valuemax": svg_aria_valuemax_value = !/*indeterminate*/ ctx[6] ? 100 : undefined
		},
		{ "aria-valuenow": /*value*/ ctx[0] },
		/*$$restProps*/ ctx[8]
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			circle = svg_element("circle");
			attr_dev(circle, "cx", "50%");
			attr_dev(circle, "cy", "50%");
			attr_dev(circle, "r", "7");
			attr_dev(circle, "stroke-dasharray", "3");
			attr_dev(circle, "stroke-dashoffset", circle_stroke_dashoffset_value = (100 - /*value*/ ctx[0]) / 100 * /*circumference*/ ctx[5]);
			attr_dev(circle, "class", "svelte-32f9k0");
			add_location(circle, file, 53, 1, 1939);
			set_svg_attributes(svg, svg_data);
			toggle_class(svg, "indeterminate", /*indeterminate*/ ctx[6]);
			toggle_class(svg, "svelte-32f9k0", true);
			add_location(svg, file, 38, 0, 1590);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, circle);
			/*circle_binding*/ ctx[9](circle);
			/*svg_binding*/ ctx[10](svg);

			if (!mounted) {
				dispose = action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[7].call(null, svg));
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*value, circumference*/ 33 && circle_stroke_dashoffset_value !== (circle_stroke_dashoffset_value = (100 - /*value*/ ctx[0]) / 100 * /*circumference*/ ctx[5])) {
				attr_dev(circle, "stroke-dashoffset", circle_stroke_dashoffset_value);
			}

			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				{ tabindex: "-1" },
				dirty & /*className*/ 16 && svg_class_value !== (svg_class_value = "progress-ring " + /*className*/ ctx[4]) && { class: svg_class_value },
				dirty & /*size*/ 8 && { width: /*size*/ ctx[3] },
				dirty & /*size*/ 8 && { height: /*size*/ ctx[3] },
				{ viewBox: "0 0 16 16" },
				dirty & /*value*/ 1 && svg_role_value !== (svg_role_value = /*value*/ ctx[0] ? "progressbar" : "status") && { role: svg_role_value },
				dirty & /*indeterminate*/ 64 && svg_aria_valuemin_value !== (svg_aria_valuemin_value = !/*indeterminate*/ ctx[6] ? 0 : undefined) && { "aria-valuemin": svg_aria_valuemin_value },
				dirty & /*indeterminate*/ 64 && svg_aria_valuemax_value !== (svg_aria_valuemax_value = !/*indeterminate*/ ctx[6] ? 100 : undefined) && { "aria-valuemax": svg_aria_valuemax_value },
				dirty & /*value*/ 1 && { "aria-valuenow": /*value*/ ctx[0] },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
			]));

			toggle_class(svg, "indeterminate", /*indeterminate*/ ctx[6]);
			toggle_class(svg, "svelte-32f9k0", true);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			/*circle_binding*/ ctx[9](null);
			/*svg_binding*/ ctx[10](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let indeterminate;
	const omit_props_names = ["value","size","class","element","circleElement"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ProgressRing', slots, []);
	let { value = undefined } = $$props;
	let { size = 32 } = $$props;
	let { class: className = "" } = $$props;
	let { element = null } = $$props;
	let { circleElement = null } = $$props;
	const forwardEvents = createEventForwarder(get_current_component(), ["change"]);
	const dispatch = createEventDispatcher();
	let circumference;

	function circle_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			circleElement = $$value;
			$$invalidate(1, circleElement);
		});
	}

	function svg_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(2, element);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ('size' in $$new_props) $$invalidate(3, size = $$new_props.size);
		if ('class' in $$new_props) $$invalidate(4, className = $$new_props.class);
		if ('element' in $$new_props) $$invalidate(2, element = $$new_props.element);
		if ('circleElement' in $$new_props) $$invalidate(1, circleElement = $$new_props.circleElement);
	};

	$$self.$capture_state = () => ({
		createEventForwarder,
		createEventDispatcher,
		get_current_component,
		value,
		size,
		className,
		element,
		circleElement,
		forwardEvents,
		dispatch,
		circumference,
		indeterminate
	});

	$$self.$inject_state = $$new_props => {
		if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
		if ('size' in $$props) $$invalidate(3, size = $$new_props.size);
		if ('className' in $$props) $$invalidate(4, className = $$new_props.className);
		if ('element' in $$props) $$invalidate(2, element = $$new_props.element);
		if ('circleElement' in $$props) $$invalidate(1, circleElement = $$new_props.circleElement);
		if ('circumference' in $$props) $$invalidate(5, circumference = $$new_props.circumference);
		if ('indeterminate' in $$props) $$invalidate(6, indeterminate = $$new_props.indeterminate);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			$: if (value < 0) {
				$$invalidate(0, value = 0);
			} else if (value > 100) {
				$$invalidate(0, value = 100);
			}
		}

		if ($$self.$$.dirty & /*value*/ 1) {
			$: $$invalidate(6, indeterminate = typeof value === "undefined" || value === null || Number.isNaN(value));
		}

		if ($$self.$$.dirty & /*value*/ 1) {
			$: dispatch("change", value);
		}

		if ($$self.$$.dirty & /*circleElement*/ 2) {
			$: if (circleElement) $$invalidate(5, circumference = Math.PI * (circleElement.r.baseVal.value * 2));
		}
	};

	return [
		value,
		circleElement,
		element,
		size,
		className,
		circumference,
		indeterminate,
		forwardEvents,
		$$restProps,
		circle_binding,
		svg_binding
	];
}

class ProgressRing extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				value: 0,
				size: 3,
				class: 4,
				element: 2,
				circleElement: 1
			},
			add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ProgressRing",
			options,
			id: create_fragment.name
		});
	}

	get value() {
		throw new Error("<ProgressRing>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<ProgressRing>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get size() {
		throw new Error("<ProgressRing>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set size(value) {
		throw new Error("<ProgressRing>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<ProgressRing>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<ProgressRing>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<ProgressRing>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<ProgressRing>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get circleElement() {
		throw new Error("<ProgressRing>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set circleElement(value) {
		throw new Error("<ProgressRing>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default ProgressRing;