/* RadioButton.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	action_destroyer,
	add_location,
	append_dev,
	append_styles,
	assign,
	attr_dev,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	compute_slots,
	create_slot,
	detach_dev,
	dispatch_dev,
	element,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	group_outros,
	init,
	insert_dev,
	listen_dev,
	run_all,
	safe_not_equal,
	set_attributes,
	space,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import { get_current_component } from "nereid://.svelte/internal/index.mjs";
import { createEventForwarder } from "../internal.js";
const file = "RadioButton.svelte";

function add_css(target) {
	append_styles(target, "svelte-hhkzib", ".radio-button.svelte-hhkzib.svelte-hhkzib{align-items:center;-webkit-appearance:none;-moz-appearance:none;appearance:none;background-clip:padding-box;background-color:var(--fds-control-alt-fill-secondary);block-size:20px;border:1px solid var(--fds-control-strong-stroke-default);border-radius:20px;display:inline-flex;font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;inline-size:20px;justify-content:center;line-height:20px;margin:0;outline:none;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.radio-button.svelte-hhkzib.svelte-hhkzib:before{background-color:var(--fds-text-on-accent-primary);block-size:4px;border-radius:12px;content:\"\";inline-size:4px;position:absolute;visibility:hidden}.radio-button.svelte-hhkzib.svelte-hhkzib:focus-visible{box-shadow:var(--fds-focus-stroke)}.radio-button.svelte-hhkzib.svelte-hhkzib:hover{background-color:var(--fds-control-alt-fill-tertiary)}.radio-button.svelte-hhkzib.svelte-hhkzib:active{background-color:var(--fds-control-alt-fill-quarternary);border-color:var(--fds-control-strong-stroke-disabled)}.radio-button.svelte-hhkzib.svelte-hhkzib:active:before{block-size:10px;inline-size:10px;transition:var(--fds-control-normal-duration) var(--fds-control-fast-out-slow-in-easing);visibility:visible}.radio-button.svelte-hhkzib.svelte-hhkzib:disabled{background-color:var(--fds-control-alt-fill-disabled);border-color:var(--fds-control-strong-stroke-disabled)}.radio-button.svelte-hhkzib.svelte-hhkzib:disabled:before{visibility:hidden}.radio-button.svelte-hhkzib:disabled+span.svelte-hhkzib{color:var(--fds-text-disabled)}.radio-button.svelte-hhkzib.svelte-hhkzib:checked{background-color:var(--fds-accent-default);border:none}.radio-button.svelte-hhkzib.svelte-hhkzib:checked:before{block-size:12px;box-shadow:0 0 0 1px var(--fds-control-stroke-default);inline-size:12px;transition:var(--fds-control-normal-duration) var(--fds-control-fast-out-slow-in-easing);visibility:visible}.radio-button.svelte-hhkzib.svelte-hhkzib:checked:hover{background-color:var(--fds-accent-secondary)}.radio-button.svelte-hhkzib.svelte-hhkzib:checked:hover:before{block-size:14px;inline-size:14px}.radio-button.svelte-hhkzib.svelte-hhkzib:checked:active{background-color:var(--fds-accent-tertiary)}.radio-button.svelte-hhkzib.svelte-hhkzib:checked:active:before{block-size:10px;inline-size:10px}.radio-button.svelte-hhkzib.svelte-hhkzib:checked:disabled{background-color:var(--fds-accent-disabled)}.radio-button.svelte-hhkzib.svelte-hhkzib:checked:disabled:before{block-size:12px;box-shadow:none;inline-size:12px}.radio-button-container.svelte-hhkzib.svelte-hhkzib{align-items:center;color:var(--fds-text-primary);display:inline-flex;font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;line-height:20px;min-block-size:32px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.radio-button-container.svelte-hhkzib>span.svelte-hhkzib{-webkit-padding-start:8px;padding-inline-start:8px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
}

// (49:1) {#if $$slots.default}
function create_if_block(ctx) {
	let span;
	let current;
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	const block = {
		c: function create() {
			span = element("span");
			if (default_slot) default_slot.c();
			attr_dev(span, "class", "svelte-hhkzib");
			add_location(span, file, 49, 2, 2035);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[10],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(49:1) {#if $$slots.default}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let label;
	let input;
	let input_class_value;
	let forwardEvents_action;
	let t;
	let current;
	let mounted;
	let dispose;

	let input_levels = [
		{ type: "radio" },
		{
			class: input_class_value = "radio-button " + /*className*/ ctx[6]
		},
		{ __value: /*value*/ ctx[4] },
		{ checked: /*checked*/ ctx[3] },
		{ disabled: /*disabled*/ ctx[5] },
		/*$$restProps*/ ctx[8]
	];

	let input_data = {};

	for (let i = 0; i < input_levels.length; i += 1) {
		input_data = assign(input_data, input_levels[i]);
	}

	let if_block = /*$$slots*/ ctx[9].default && create_if_block(ctx);

	const block = {
		c: function create() {
			label = element("label");
			input = element("input");
			t = space();
			if (if_block) if_block.c();
			set_attributes(input, input_data);
			/*$$binding_groups*/ ctx[13][0].push(input);
			toggle_class(input, "svelte-hhkzib", true);
			add_location(input, file, 37, 1, 1835);
			attr_dev(label, "class", "radio-button-container svelte-hhkzib");
			add_location(label, file, 36, 0, 1766);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, label, anchor);
			append_dev(label, input);
			if (input.autofocus) input.focus();
			input.checked = input.__value === /*group*/ ctx[0];
			/*input_binding*/ ctx[14](input);
			append_dev(label, t);
			if (if_block) if_block.m(label, null);
			/*label_binding*/ ctx[15](label);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[7].call(null, input)),
					listen_dev(input, "change", /*input_change_handler*/ ctx[12])
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			set_attributes(input, input_data = get_spread_update(input_levels, [
				{ type: "radio" },
				(!current || dirty & /*className*/ 64 && input_class_value !== (input_class_value = "radio-button " + /*className*/ ctx[6])) && { class: input_class_value },
				(!current || dirty & /*value*/ 16) && { __value: /*value*/ ctx[4] },
				(!current || dirty & /*checked*/ 8) && { checked: /*checked*/ ctx[3] },
				(!current || dirty & /*disabled*/ 32) && { disabled: /*disabled*/ ctx[5] },
				dirty & /*$$restProps*/ 256 && /*$$restProps*/ ctx[8]
			]));

			if (dirty & /*group*/ 1) {
				input.checked = input.__value === /*group*/ ctx[0];
			}

			toggle_class(input, "svelte-hhkzib", true);

			if (/*$$slots*/ ctx[9].default) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$$slots*/ 512) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(label, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(label);
			/*$$binding_groups*/ ctx[13][0].splice(/*$$binding_groups*/ ctx[13][0].indexOf(input), 1);
			/*input_binding*/ ctx[14](null);
			if (if_block) if_block.d();
			/*label_binding*/ ctx[15](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["group","checked","value","disabled","class","inputElement","containerElement"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('RadioButton', slots, ['default']);
	const $$slots = compute_slots(slots);
	let { group = undefined } = $$props;
	let { checked = false } = $$props;
	let { value = undefined } = $$props;
	let { disabled = false } = $$props;
	let { class: className = "" } = $$props;
	let { inputElement = null } = $$props;
	let { containerElement = null } = $$props;
	const forwardEvents = createEventForwarder(get_current_component());
	const $$binding_groups = [[]];

	function input_change_handler() {
		group = this.__value;
		$$invalidate(0, group);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			inputElement = $$value;
			$$invalidate(1, inputElement);
		});
	}

	function label_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			containerElement = $$value;
			$$invalidate(2, containerElement);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('group' in $$new_props) $$invalidate(0, group = $$new_props.group);
		if ('checked' in $$new_props) $$invalidate(3, checked = $$new_props.checked);
		if ('value' in $$new_props) $$invalidate(4, value = $$new_props.value);
		if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
		if ('class' in $$new_props) $$invalidate(6, className = $$new_props.class);
		if ('inputElement' in $$new_props) $$invalidate(1, inputElement = $$new_props.inputElement);
		if ('containerElement' in $$new_props) $$invalidate(2, containerElement = $$new_props.containerElement);
		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		get_current_component,
		createEventForwarder,
		group,
		checked,
		value,
		disabled,
		className,
		inputElement,
		containerElement,
		forwardEvents
	});

	$$self.$inject_state = $$new_props => {
		if ('group' in $$props) $$invalidate(0, group = $$new_props.group);
		if ('checked' in $$props) $$invalidate(3, checked = $$new_props.checked);
		if ('value' in $$props) $$invalidate(4, value = $$new_props.value);
		if ('disabled' in $$props) $$invalidate(5, disabled = $$new_props.disabled);
		if ('className' in $$props) $$invalidate(6, className = $$new_props.className);
		if ('inputElement' in $$props) $$invalidate(1, inputElement = $$new_props.inputElement);
		if ('containerElement' in $$props) $$invalidate(2, containerElement = $$new_props.containerElement);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		group,
		inputElement,
		containerElement,
		checked,
		value,
		disabled,
		className,
		forwardEvents,
		$$restProps,
		$$slots,
		$$scope,
		slots,
		input_change_handler,
		$$binding_groups,
		input_binding,
		label_binding
	];
}

class RadioButton extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				group: 0,
				checked: 3,
				value: 4,
				disabled: 5,
				class: 6,
				inputElement: 1,
				containerElement: 2
			},
			add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "RadioButton",
			options,
			id: create_fragment.name
		});
	}

	get group() {
		throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set group(value) {
		throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get checked() {
		throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set checked(value) {
		throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get inputElement() {
		throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set inputElement(value) {
		throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get containerElement() {
		throw new Error("<RadioButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set containerElement(value) {
		throw new Error("<RadioButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default RadioButton;