/* TextBoxButton.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	action_destroyer,
	add_location,
	append_styles,
	assign,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	detach_dev,
	dispatch_dev,
	element as element_1,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	init,
	insert_dev,
	safe_not_equal,
	set_attributes,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import { createEventForwarder } from "../internal.js";
import { get_current_component } from "nereid://.svelte/internal/index.mjs";
const file = "TextBoxButton.svelte";

function add_css(target) {
	append_styles(target, "svelte-159a5xt", ".text-box-button.svelte-159a5xt{align-items:center;background-color:var(--fds-subtle-fill-transparent);border:none;border-radius:var(--fds-control-corner-radius);box-sizing:border-box;color:var(--fds-text-secondary);display:flex;justify-content:center;min-block-size:22px;min-inline-size:26px;outline:none;padding:3px 5px}.text-box-button.svelte-159a5xt:focus-visible{box-shadow:var(--fds-focus-stroke)}.text-box-button.svelte-159a5xt:hover{background-color:var(--fds-subtle-fill-secondary)}.text-box-button.svelte-159a5xt:active{background-color:var(--fds-subtle-fill-tertiary);color:var(--fds-text-tertiary)}.text-box-button.svelte-159a5xt:disabled{background-color:var(--fds-subtle-fill-tertiary);color:var(--fds-text-disabled)}.text-box-button.svelte-159a5xt svg{fill:currentColor;min-block-size:12px;min-inline-size:12px;pointer-events:none}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dEJveEJ1dHRvbi5zdmVsdGUiLCJzb3VyY2VzIjpbIlRleHRCb3hCdXR0b24uc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQgPmltcG9ydCB7IGNyZWF0ZUV2ZW50Rm9yd2FyZGVyIH0gZnJvbSBcIi4uL2ludGVybmFsXCI7XHJcbmltcG9ydCB7IGdldF9jdXJyZW50X2NvbXBvbmVudCB9IGZyb20gXCJzdmVsdGUvaW50ZXJuYWxcIjtcclxuZXhwb3J0IGxldCB0eXBlID0gXCJidXR0b25cIjtcclxubGV0IGNsYXNzTmFtZSA9IFwiXCI7XHJcbmV4cG9ydCB7IGNsYXNzTmFtZSBhcyBjbGFzcyB9O1xyXG5leHBvcnQgbGV0IGVsZW1lbnQgPSBudWxsO1xyXG5jb25zdCBmb3J3YXJkRXZlbnRzID0gY3JlYXRlRXZlbnRGb3J3YXJkZXIoZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkpO1xyXG48L3NjcmlwdD5cblxuPGJ1dHRvblxuXHR1c2U6Zm9yd2FyZEV2ZW50c1xuXHRiaW5kOnRoaXM9e2VsZW1lbnR9XG5cdGNsYXNzPVwidGV4dC1ib3gtYnV0dG9uIHtjbGFzc05hbWV9XCJcblx0e3R5cGV9XG5cdHsuLi4kJHJlc3RQcm9wc31cbj5cblx0PHNsb3QgLz5cbjwvYnV0dG9uPlxuXG48c3R5bGUgPi50ZXh0LWJveC1idXR0b257YWxpZ24taXRlbXM6Y2VudGVyO2JhY2tncm91bmQtY29sb3I6dmFyKC0tZmRzLXN1YnRsZS1maWxsLXRyYW5zcGFyZW50KTtib3JkZXI6bm9uZTtib3JkZXItcmFkaXVzOnZhcigtLWZkcy1jb250cm9sLWNvcm5lci1yYWRpdXMpO2JveC1zaXppbmc6Ym9yZGVyLWJveDtjb2xvcjp2YXIoLS1mZHMtdGV4dC1zZWNvbmRhcnkpO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO21pbi1ibG9jay1zaXplOjIycHg7bWluLWlubGluZS1zaXplOjI2cHg7b3V0bGluZTpub25lO3BhZGRpbmc6M3B4IDVweH0udGV4dC1ib3gtYnV0dG9uOmZvY3VzLXZpc2libGV7Ym94LXNoYWRvdzp2YXIoLS1mZHMtZm9jdXMtc3Ryb2tlKX0udGV4dC1ib3gtYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6dmFyKC0tZmRzLXN1YnRsZS1maWxsLXNlY29uZGFyeSl9LnRleHQtYm94LWJ1dHRvbjphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1mZHMtc3VidGxlLWZpbGwtdGVydGlhcnkpO2NvbG9yOnZhcigtLWZkcy10ZXh0LXRlcnRpYXJ5KX0udGV4dC1ib3gtYnV0dG9uOmRpc2FibGVke2JhY2tncm91bmQtY29sb3I6dmFyKC0tZmRzLXN1YnRsZS1maWxsLXRlcnRpYXJ5KTtjb2xvcjp2YXIoLS1mZHMtdGV4dC1kaXNhYmxlZCl9LnRleHQtYm94LWJ1dHRvbiA6Z2xvYmFsKHN2Zyl7ZmlsbDpjdXJyZW50Q29sb3I7bWluLWJsb2NrLXNpemU6MTJweDttaW4taW5saW5lLXNpemU6MTJweDtwb2ludGVyLWV2ZW50czpub25lfTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUJRLCtCQUFnQixDQUFDLFlBQVksTUFBTSxDQUFDLGlCQUFpQixJQUFJLDZCQUE2QixDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsY0FBYyxJQUFJLDJCQUEyQixDQUFDLENBQUMsV0FBVyxVQUFVLENBQUMsTUFBTSxJQUFJLG9CQUFvQixDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsZ0JBQWdCLE1BQU0sQ0FBQyxlQUFlLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLEdBQUcsQ0FBQywrQkFBZ0IsY0FBYyxDQUFDLFdBQVcsSUFBSSxrQkFBa0IsQ0FBQyxDQUFDLCtCQUFnQixNQUFNLENBQUMsaUJBQWlCLElBQUksMkJBQTJCLENBQUMsQ0FBQywrQkFBZ0IsT0FBTyxDQUFDLGlCQUFpQixJQUFJLDBCQUEwQixDQUFDLENBQUMsTUFBTSxJQUFJLG1CQUFtQixDQUFDLENBQUMsK0JBQWdCLFNBQVMsQ0FBQyxpQkFBaUIsSUFBSSwwQkFBMEIsQ0FBQyxDQUFDLE1BQU0sSUFBSSxtQkFBbUIsQ0FBQyxDQUFDLCtCQUFnQixDQUFDLEFBQVEsR0FBRyxBQUFDLENBQUMsS0FBSyxZQUFZLENBQUMsZUFBZSxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxlQUFlLElBQUksQ0FBQyJ9 */");
}

function create_fragment(ctx) {
	let button;
	let button_class_value;
	let forwardEvents_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	let button_levels = [
		{
			class: button_class_value = "text-box-button " + /*className*/ ctx[2]
		},
		{ type: /*type*/ ctx[1] },
		/*$$restProps*/ ctx[4]
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	const block = {
		c: function create() {
			button = element_1("button");
			if (default_slot) default_slot.c();
			set_attributes(button, button_data);
			toggle_class(button, "svelte-159a5xt", true);
			add_location(button, file, 9, 0, 311);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);

			if (default_slot) {
				default_slot.m(button, null);
			}

			if (button.autofocus) button.focus();
			/*button_binding*/ ctx[7](button);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[3].call(null, button));
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				(!current || dirty & /*className*/ 4 && button_class_value !== (button_class_value = "text-box-button " + /*className*/ ctx[2])) && { class: button_class_value },
				(!current || dirty & /*type*/ 2) && { type: /*type*/ ctx[1] },
				dirty & /*$$restProps*/ 16 && /*$$restProps*/ ctx[4]
			]));

			toggle_class(button, "svelte-159a5xt", true);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (default_slot) default_slot.d(detaching);
			/*button_binding*/ ctx[7](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["type","class","element"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('TextBoxButton', slots, ['default']);
	let { type = "button" } = $$props;
	let { class: className = "" } = $$props;
	let { element = null } = $$props;
	const forwardEvents = createEventForwarder(get_current_component());

	function button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(0, element);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('type' in $$new_props) $$invalidate(1, type = $$new_props.type);
		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
		if ('element' in $$new_props) $$invalidate(0, element = $$new_props.element);
		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventForwarder,
		get_current_component,
		type,
		className,
		element,
		forwardEvents
	});

	$$self.$inject_state = $$new_props => {
		if ('type' in $$props) $$invalidate(1, type = $$new_props.type);
		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
		if ('element' in $$props) $$invalidate(0, element = $$new_props.element);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		element,
		type,
		className,
		forwardEvents,
		$$restProps,
		$$scope,
		slots,
		button_binding
	];
}

class TextBoxButton extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { type: 1, class: 2, element: 0 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TextBoxButton",
			options,
			id: create_fragment.name
		});
	}

	get type() {
		throw new Error("<TextBoxButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<TextBoxButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get class() {
		throw new Error("<TextBoxButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<TextBoxButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<TextBoxButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<TextBoxButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default TextBoxButton;