/* TooltipSurface.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	action_destroyer,
	add_location,
	append_styles,
	assign,
	binding_callbacks,
	compute_rest_props,
	create_slot,
	detach_dev,
	dispatch_dev,
	element as element_1,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_update,
	init,
	insert_dev,
	safe_not_equal,
	set_attributes,
	toggle_class,
	transition_in,
	transition_out,
	update_slot_base,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import { createEventForwarder } from "../internal.js";
import { get_current_component } from "nereid://.svelte/internal/index.mjs";
const file = "TooltipSurface.svelte";

function add_css(target) {
	append_styles(target, "svelte-gc7m6k", ".tooltip.svelte-gc7m6k{align-items:center;background-clip:padding-box;background-color:var(--fds-solid-background-quarternary);border:1px solid var(--fds-surface-stroke-flyout);border-radius:var(--fds-control-corner-radius);box-shadow:var(--fds-tooltip-shadow);box-sizing:border-box;display:inline-flex;font-family:var(--fds-font-family-text);font-size:var(--fds-body-font-size);font-weight:400;inline-size:-webkit-max-content;inline-size:-moz-max-content;inline-size:max-content;justify-content:center;line-height:20px;max-inline-size:320px;padding-block:5px 7px;padding-inline:8px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9vbHRpcFN1cmZhY2Uuc3ZlbHRlIiwic291cmNlcyI6WyJUb29sdGlwU3VyZmFjZS5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCA+aW1wb3J0IHsgY3JlYXRlRXZlbnRGb3J3YXJkZXIgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIjtcclxuaW1wb3J0IHsgZ2V0X2N1cnJlbnRfY29tcG9uZW50IH0gZnJvbSBcInN2ZWx0ZS9pbnRlcm5hbFwiO1xyXG4vKiogU3BlY2lmaWVzIGEgY3VzdG9tIGNsYXNzIG5hbWUgZm9yIHRoZSBzdXJmYWNlLiAqL1xyXG5sZXQgY2xhc3NOYW1lID0gXCJcIjtcclxuZXhwb3J0IHsgY2xhc3NOYW1lIGFzIGNsYXNzIH07XHJcbi8qKiBPYnRhaW5zIGEgYm91bmQgRE9NIHJlZmVyZW5jZSB0byB0aGUgc3VyZmFjZSBlbGVtZW50LiAqL1xyXG5leHBvcnQgbGV0IGVsZW1lbnQgPSBudWxsO1xyXG5jb25zdCBmb3J3YXJkRXZlbnRzID0gY3JlYXRlRXZlbnRGb3J3YXJkZXIoZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkpO1xyXG48L3NjcmlwdD5cblxuPGRpdlxuXHRjbGFzcz1cInRvb2x0aXAge2NsYXNzTmFtZX1cIlxuXHRyb2xlPVwidG9vbHRpcFwiXG5cdHVzZTpmb3J3YXJkRXZlbnRzXG5cdGJpbmQ6dGhpcz17ZWxlbWVudH1cblx0ey4uLiQkcmVzdFByb3BzfVxuPlxuXHQ8c2xvdCAvPlxuPC9kaXY+XG5cbjxzdHlsZSA+LnRvb2x0aXB7YWxpZ24taXRlbXM6Y2VudGVyO2JhY2tncm91bmQtY2xpcDpwYWRkaW5nLWJveDtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWZkcy1zb2xpZC1iYWNrZ3JvdW5kLXF1YXJ0ZXJuYXJ5KTtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWZkcy1zdXJmYWNlLXN0cm9rZS1mbHlvdXQpO2JvcmRlci1yYWRpdXM6dmFyKC0tZmRzLWNvbnRyb2wtY29ybmVyLXJhZGl1cyk7Ym94LXNoYWRvdzp2YXIoLS1mZHMtdG9vbHRpcC1zaGFkb3cpO2JveC1zaXppbmc6Ym9yZGVyLWJveDtkaXNwbGF5OmlubGluZS1mbGV4O2ZvbnQtZmFtaWx5OnZhcigtLWZkcy1mb250LWZhbWlseS10ZXh0KTtmb250LXNpemU6dmFyKC0tZmRzLWJvZHktZm9udC1zaXplKTtmb250LXdlaWdodDo0MDA7aW5saW5lLXNpemU6LXdlYmtpdC1tYXgtY29udGVudDtpbmxpbmUtc2l6ZTotbW96LW1heC1jb250ZW50O2lubGluZS1zaXplOm1heC1jb250ZW50O2p1c3RpZnktY29udGVudDpjZW50ZXI7bGluZS1oZWlnaHQ6MjBweDttYXgtaW5saW5lLXNpemU6MzIwcHg7cGFkZGluZy1ibG9jazo1cHggN3B4O3BhZGRpbmctaW5saW5lOjhweDstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmV9PC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvQlEsc0JBQVEsQ0FBQyxZQUFZLE1BQU0sQ0FBQyxnQkFBZ0IsV0FBVyxDQUFDLGlCQUFpQixJQUFJLGtDQUFrQyxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksMkJBQTJCLENBQUMsQ0FBQyxjQUFjLElBQUksMkJBQTJCLENBQUMsQ0FBQyxXQUFXLElBQUksb0JBQW9CLENBQUMsQ0FBQyxXQUFXLFVBQVUsQ0FBQyxRQUFRLFdBQVcsQ0FBQyxZQUFZLElBQUksc0JBQXNCLENBQUMsQ0FBQyxVQUFVLElBQUksb0JBQW9CLENBQUMsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxZQUFZLG1CQUFtQixDQUFDLFlBQVksZ0JBQWdCLENBQUMsWUFBWSxXQUFXLENBQUMsZ0JBQWdCLE1BQU0sQ0FBQyxZQUFZLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxDQUFDLGNBQWMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsQ0FBQyxvQkFBb0IsSUFBSSxDQUFDLGlCQUFpQixJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyJ9 */");
}

function create_fragment(ctx) {
	let div;
	let div_class_value;
	let forwardEvents_action;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	let div_levels = [
		{
			class: div_class_value = "tooltip " + /*className*/ ctx[1]
		},
		{ role: "tooltip" },
		/*$$restProps*/ ctx[3]
	];

	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = assign(div_data, div_levels[i]);
	}

	const block = {
		c: function create() {
			div = element_1("div");
			if (default_slot) default_slot.c();
			set_attributes(div, div_data);
			toggle_class(div, "svelte-gc7m6k", true);
			add_location(div, file, 10, 0, 399);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[6](div);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(forwardEvents_action = /*forwardEvents*/ ctx[2].call(null, div));
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}

			set_attributes(div, div_data = get_spread_update(div_levels, [
				(!current || dirty & /*className*/ 2 && div_class_value !== (div_class_value = "tooltip " + /*className*/ ctx[1])) && { class: div_class_value },
				{ role: "tooltip" },
				dirty & /*$$restProps*/ 8 && /*$$restProps*/ ctx[3]
			]));

			toggle_class(div, "svelte-gc7m6k", true);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[6](null);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["class","element"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('TooltipSurface', slots, ['default']);
	let { class: className = "" } = $$props;
	let { element = null } = $$props;
	const forwardEvents = createEventForwarder(get_current_component());

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			element = $$value;
			$$invalidate(0, element);
		});
	}

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(3, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('class' in $$new_props) $$invalidate(1, className = $$new_props.class);
		if ('element' in $$new_props) $$invalidate(0, element = $$new_props.element);
		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		createEventForwarder,
		get_current_component,
		className,
		element,
		forwardEvents
	});

	$$self.$inject_state = $$new_props => {
		if ('className' in $$props) $$invalidate(1, className = $$new_props.className);
		if ('element' in $$props) $$invalidate(0, element = $$new_props.element);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [element, className, forwardEvents, $$restProps, $$scope, slots, div_binding];
}

class TooltipSurface extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { class: 1, element: 0 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TooltipSurface",
			options,
			id: create_fragment.name
		});
	}

	get class() {
		throw new Error("<TooltipSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set class(value) {
		throw new Error("<TooltipSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get element() {
		throw new Error("<TooltipSurface>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set element(value) {
		throw new Error("<TooltipSurface>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default TooltipSurface;