/* TooltipWrapper.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_flush_callback,
	add_location,
	add_render_callback,
	append_dev,
	append_styles,
	assign,
	attr_dev,
	bind,
	binding_callbacks,
	check_outros,
	compute_rest_props,
	create_component,
	create_in_transition,
	create_slot,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element,
	exclude_internal_props,
	get_all_dirty_from_scope,
	get_slot_changes,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert_dev,
	listen_dev,
	mount_component,
	run_all,
	safe_not_equal,
	set_data_dev,
	space,
	text as text_1,
	transition_in,
	transition_out,
	update_slot_base,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import { onMount } from "nereid://.svelte/index.mjs";
import { fade } from "nereid://.svelte/transition/index.mjs";
import { getCSSDuration } from "../internal.js";
import TooltipSurface from "./TooltipSurface.svelte.js";
const file = "TooltipWrapper.svelte";

function add_css(target) {
	append_styles(target, "svelte-e2a5n0", ".tooltip-wrapper.svelte-e2a5n0{display:block;position:relative}.tooltip-anchor.svelte-e2a5n0{pointer-events:none;position:absolute;z-index:100}.tooltip-anchor.placement-top.svelte-e2a5n0{bottom:calc(100% + var(--fds-tooltip-offset))}.tooltip-anchor.placement-bottom.svelte-e2a5n0{top:calc(100% + var(--fds-tooltip-offset))}.tooltip-anchor.placement-left.svelte-e2a5n0{right:calc(100% + var(--fds-tooltip-offset))}.tooltip-anchor.placement-right.svelte-e2a5n0{left:calc(100% + var(--fds-tooltip-offset))}.tooltip-anchor.placement-bottom.alignment-start.svelte-e2a5n0,.tooltip-anchor.placement-top.alignment-start.svelte-e2a5n0{inset-inline-start:0}.tooltip-anchor.placement-bottom.alignment-end.svelte-e2a5n0,.tooltip-anchor.placement-top.alignment-end.svelte-e2a5n0{inset-inline-end:0}.tooltip-anchor.placement-bottom.alignment-center.svelte-e2a5n0,.tooltip-anchor.placement-top.alignment-center.svelte-e2a5n0{inset-inline-start:50%;transform:translateX(-50%)}.tooltip-anchor.placement-left.alignment-start.svelte-e2a5n0,.tooltip-anchor.placement-right.alignment-start.svelte-e2a5n0{inset-block-start:0}.tooltip-anchor.placement-left.alignment-end.svelte-e2a5n0,.tooltip-anchor.placement-right.alignment-end.svelte-e2a5n0{inset-block-end:0}.tooltip-anchor.placement-left.alignment-center.svelte-e2a5n0,.tooltip-anchor.placement-right.alignment-center.svelte-e2a5n0{inset-block-start:50%;transform:translateY(-50%)}.tooltip-anchor.placement-auto.svelte-e2a5n0{transform:translateY(-100%)}.tooltip-anchor.placement-auto.alignment-center.svelte-e2a5n0{transform:translate(-50%,-100%)}.tooltip-anchor.placement-auto.alignment-end.svelte-e2a5n0{transform:translate(-100%,-100%)}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9vbHRpcFdyYXBwZXIuc3ZlbHRlIiwic291cmNlcyI6WyJUb29sdGlwV3JhcHBlci5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCA+aW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcclxuaW1wb3J0IHsgZmFkZSB9IGZyb20gXCJzdmVsdGUvdHJhbnNpdGlvblwiO1xyXG5pbXBvcnQgeyBnZXRDU1NEdXJhdGlvbiB9IGZyb20gXCIuLi9pbnRlcm5hbFwiO1xyXG5pbXBvcnQgVG9vbHRpcFN1cmZhY2UgZnJvbSBcIi4vVG9vbHRpcFN1cmZhY2Uuc3ZlbHRlXCI7XHJcbi8qKiBTcGVjaWZpZXMgdGhlIHRvb2x0aXAncyB0ZXh0IGNvbnRlbnQuICovXHJcbmV4cG9ydCBsZXQgdGV4dCA9IFwiXCI7XHJcbi8qKiBEaXN0YW5jZSBvZiB0aGUgdG9vbHRpcCBmcm9tIHRoZSBhbGlnbm1lbnQgYXhpcyBpbiBwaXhlbHMuICovXHJcbmV4cG9ydCBsZXQgb2Zmc2V0ID0gMjQ7XHJcbi8qKiBEaXJlY3Rpb24gdGhhdCB0aGUgdG9vbHRpcCB3aWxsIGFwcGVhciBmcm9tLiAqL1xyXG5leHBvcnQgbGV0IHBsYWNlbWVudCA9IFwiYXV0b1wiO1xyXG4vKiogQWxpZ25tZW50IG9mIHRoZSB0b29sdGlwIGFsb25nIHRoZSBwbGFjZW1lbnQgdGFyZ2V0J3MgZ2l2ZW4gYXhpcy4gKi9cclxuZXhwb3J0IGxldCBhbGlnbm1lbnQgPSBcImNlbnRlclwiO1xyXG4vKiogQWxsb3dzIHRoZSB0b29sdGlwIHRvIGZvbGxvdyB0aGUgdXNlcidzIGN1cnNvciBpZiBgcGxhY2VtZW50YCBpcyBzZXQgdG8gYGF1dG9gLiAqL1xyXG5leHBvcnQgbGV0IGZvbGxvd0N1cnNvciA9IGZhbHNlO1xyXG4vKiogUHJldmVudHMgdGhlIHRvb2x0aXAgZnJvbSBkaXNhcHBlYXJpbmcgYWZ0ZXIgY3Vyc29yIGxlYXZlcyBib3VuZHMuICovXHJcbmV4cG9ydCBsZXQgcGVyc2lzdGVudCA9IGZhbHNlO1xyXG4vKiogRGV0ZXJtaW5lcyBpZiB0aGUgdG9vbHRpcCBpcyB2aXNpYmxlIG9yIG5vdC4gKi9cclxuZXhwb3J0IGxldCB2aXNpYmxlID0gZmFsc2U7XHJcbi8qKiBJbml0aWFsIGRlbGF5IHRpbWUgZm9yIHRoZSB0b29sdGlwIHRvIGJlY29tZSB2aXNpYmxlIGluIG1pbGxzZWNvbmRzLiAqL1xyXG5leHBvcnQgbGV0IGRlbGF5ID0gMTAwMDtcclxuLyoqIE9idGFpbnMgYSBib3VuZCByZWZlcmVuY2UgdG8gdGhlIHRvb2x0aXAgc3VyZmFjZSBlbGVtZW50LiAqL1xyXG5leHBvcnQgbGV0IHRvb2x0aXBFbGVtZW50ID0gbnVsbDtcclxuLyoqIE9idGFpbnMgYSBib3VuZCByZWZlcmVuY2UgdG8gdGhlIHRvb2x0aXAncyBwb3NpdGlvbmluZyBhbmNob3IgZWxlbWVudC4gKi9cclxuZXhwb3J0IGxldCBhbmNob3JFbGVtZW50ID0gbnVsbDtcclxuLyoqIE9idGFpbnMgYSBib3VuZCByZWZlcmVuY2UgdG8gdGhlIHRvb2x0aXAncyBjb250ZW50IHdyYXBwZXIgZWxlbWVudC4gKi9cclxuZXhwb3J0IGxldCB3cmFwcGVyRWxlbWVudCA9IG51bGw7XHJcbmxldCBtb3VudGVkID0gZmFsc2U7XHJcbmxldCB0b29sdGlwRHVyYXRpb25UaW1lb3V0O1xyXG5sZXQgY3VycmVudFBvc2l0aW9uID0ge1xyXG4gICAgeDogMCxcclxuICAgIHk6IDBcclxufTtcclxubGV0IG1vdXNlUG9zaXRpb24gPSB7XHJcbiAgICB4OiAwLFxyXG4gICAgeTogMFxyXG59O1xyXG5vbk1vdW50KCgpID0+IChtb3VudGVkID0gdHJ1ZSkpO1xyXG5mdW5jdGlvbiB1cGRhdGVNb3VzZVBvc2l0aW9uKHsgY2xpZW50WCwgY2xpZW50WSB9KSB7XHJcbiAgICBtb3VzZVBvc2l0aW9uLnggPSBjbGllbnRYO1xyXG4gICAgbW91c2VQb3NpdGlvbi55ID0gY2xpZW50WTtcclxufVxyXG5mdW5jdGlvbiB1cGRhdGVUb29sdGlwUG9zaXRpb25BdXRvKHdyYXBwZXJQb3NpdGlvbikge1xyXG4gICAgY29uc3QgeyBsZWZ0LCB0b3AgfSA9IHdyYXBwZXJQb3NpdGlvbjtcclxuICAgIGN1cnJlbnRQb3NpdGlvbi54ID0gbW91c2VQb3NpdGlvbi54IC0gbGVmdDtcclxuICAgIGN1cnJlbnRQb3NpdGlvbi55ID0gbW91c2VQb3NpdGlvbi55IC0gdG9wO1xyXG59XHJcbmZ1bmN0aW9uIG1vdW50VG9vbHRpcCgpIHtcclxuICAgIHRvb2x0aXBEdXJhdGlvblRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBpZiAocGxhY2VtZW50ID09PSBcImF1dG9cIiAmJiB3cmFwcGVyRWxlbWVudClcclxuICAgICAgICAgICAgdXBkYXRlVG9vbHRpcFBvc2l0aW9uQXV0byh3cmFwcGVyRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XHJcbiAgICAgICAgdmlzaWJsZSA9IHRydWU7XHJcbiAgICB9LCBkZWxheSk7XHJcbn1cclxuZnVuY3Rpb24gZGVzdHJveVRvb2x0aXAoKSB7XHJcbiAgICBjbGVhclRpbWVvdXQodG9vbHRpcER1cmF0aW9uVGltZW91dCk7XHJcbiAgICBpZiAoIXBlcnNpc3RlbnQpXHJcbiAgICAgICAgdmlzaWJsZSA9IGZhbHNlO1xyXG59XHJcbjwvc2NyaXB0PlxuXG48c3ZlbHRlOndpbmRvdyBvbjpzY3JvbGw9e2Rlc3Ryb3lUb29sdGlwfSAvPlxuXG48ZGl2XG5cdGNsYXNzPVwidG9vbHRpcC13cmFwcGVyXCJcblx0dGl0bGU9e21vdW50ZWQgPyB1bmRlZmluZWQgOiB0ZXh0fVxuXHRiaW5kOnRoaXM9e3dyYXBwZXJFbGVtZW50fVxuXHRvbjptb3VzZWVudGVyPXttb3VudFRvb2x0aXB9XG5cdG9uOm1vdXNlbGVhdmU9e2Rlc3Ryb3lUb29sdGlwfVxuXHRvbjptb3VzZW1vdmU9e3VwZGF0ZU1vdXNlUG9zaXRpb259XG5cdG9uOm1vdXNlbW92ZT17KCkgPT5cblx0XHRwbGFjZW1lbnQgPT09IFwiYXV0b1wiICYmXG5cdFx0Zm9sbG93Q3Vyc29yICYmXG5cdFx0dXBkYXRlVG9vbHRpcFBvc2l0aW9uQXV0byh3cmFwcGVyRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSl9XG4+XG5cdDxzbG90IC8+XG5cblx0eyNpZiB2aXNpYmxlfVxuXHRcdDxkaXZcblx0XHRcdGJpbmQ6dGhpcz17YW5jaG9yRWxlbWVudH1cblx0XHRcdGluOmZhZGV8bG9jYWw9e3sgZHVyYXRpb246IGdldENTU0R1cmF0aW9uKFwiLS1mZHMtY29udHJvbC1mYXN0LWR1cmF0aW9uXCIpIH19XG5cdFx0XHRjbGFzcz1cInRvb2x0aXAtYW5jaG9yIHBsYWNlbWVudC17cGxhY2VtZW50fSBhbGlnbm1lbnQte2FsaWdubWVudH1cIlxuXHRcdFx0c3R5bGU9XCJ7cGxhY2VtZW50ID09PSAnYXV0bydcblx0XHRcdFx0PyBgdG9wOiBjYWxjKCR7Y3VycmVudFBvc2l0aW9uLnl9cHggLSB2YXIoLS1mZHMtdG9vbHRpcC1vZmZzZXQpKTtcblx0XHRcdFx0ICAgbGVmdDogJHtjdXJyZW50UG9zaXRpb24ueH1weDtgXG5cdFx0XHRcdDogJyd9IC0tZmRzLXRvb2x0aXAtb2Zmc2V0OiB7b2Zmc2V0fXB4XCJcblx0XHQ+XG5cdFx0XHQ8VG9vbHRpcFN1cmZhY2UgYmluZDplbGVtZW50PXt0b29sdGlwRWxlbWVudH0gey4uLiQkcmVzdFByb3BzfT5cblx0XHRcdFx0e3RleHR9XG5cdFx0XHRcdDxzbG90IG5hbWU9XCJ0b29sdGlwXCIgLz5cblx0XHRcdDwvVG9vbHRpcFN1cmZhY2U+XG5cdFx0PC9kaXY+XG5cdHsvaWZ9XG48L2Rpdj5cblxuPHN0eWxlID4udG9vbHRpcC13cmFwcGVye2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246cmVsYXRpdmV9LnRvb2x0aXAtYW5jaG9ye3BvaW50ZXItZXZlbnRzOm5vbmU7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxMDB9LnRvb2x0aXAtYW5jaG9yLnBsYWNlbWVudC10b3B7Ym90dG9tOmNhbGMoMTAwJSArIHZhcigtLWZkcy10b29sdGlwLW9mZnNldCkpfS50b29sdGlwLWFuY2hvci5wbGFjZW1lbnQtYm90dG9te3RvcDpjYWxjKDEwMCUgKyB2YXIoLS1mZHMtdG9vbHRpcC1vZmZzZXQpKX0udG9vbHRpcC1hbmNob3IucGxhY2VtZW50LWxlZnR7cmlnaHQ6Y2FsYygxMDAlICsgdmFyKC0tZmRzLXRvb2x0aXAtb2Zmc2V0KSl9LnRvb2x0aXAtYW5jaG9yLnBsYWNlbWVudC1yaWdodHtsZWZ0OmNhbGMoMTAwJSArIHZhcigtLWZkcy10b29sdGlwLW9mZnNldCkpfS50b29sdGlwLWFuY2hvci5wbGFjZW1lbnQtYm90dG9tLmFsaWdubWVudC1zdGFydCwudG9vbHRpcC1hbmNob3IucGxhY2VtZW50LXRvcC5hbGlnbm1lbnQtc3RhcnR7aW5zZXQtaW5saW5lLXN0YXJ0OjB9LnRvb2x0aXAtYW5jaG9yLnBsYWNlbWVudC1ib3R0b20uYWxpZ25tZW50LWVuZCwudG9vbHRpcC1hbmNob3IucGxhY2VtZW50LXRvcC5hbGlnbm1lbnQtZW5ke2luc2V0LWlubGluZS1lbmQ6MH0udG9vbHRpcC1hbmNob3IucGxhY2VtZW50LWJvdHRvbS5hbGlnbm1lbnQtY2VudGVyLC50b29sdGlwLWFuY2hvci5wbGFjZW1lbnQtdG9wLmFsaWdubWVudC1jZW50ZXJ7aW5zZXQtaW5saW5lLXN0YXJ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKX0udG9vbHRpcC1hbmNob3IucGxhY2VtZW50LWxlZnQuYWxpZ25tZW50LXN0YXJ0LC50b29sdGlwLWFuY2hvci5wbGFjZW1lbnQtcmlnaHQuYWxpZ25tZW50LXN0YXJ0e2luc2V0LWJsb2NrLXN0YXJ0OjB9LnRvb2x0aXAtYW5jaG9yLnBsYWNlbWVudC1sZWZ0LmFsaWdubWVudC1lbmQsLnRvb2x0aXAtYW5jaG9yLnBsYWNlbWVudC1yaWdodC5hbGlnbm1lbnQtZW5ke2luc2V0LWJsb2NrLWVuZDowfS50b29sdGlwLWFuY2hvci5wbGFjZW1lbnQtbGVmdC5hbGlnbm1lbnQtY2VudGVyLC50b29sdGlwLWFuY2hvci5wbGFjZW1lbnQtcmlnaHQuYWxpZ25tZW50LWNlbnRlcntpbnNldC1ibG9jay1zdGFydDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSl9LnRvb2x0aXAtYW5jaG9yLnBsYWNlbWVudC1hdXRve3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMDAlKX0udG9vbHRpcC1hbmNob3IucGxhY2VtZW50LWF1dG8uYWxpZ25tZW50LWNlbnRlcnt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsLTEwMCUpfS50b29sdGlwLWFuY2hvci5wbGFjZW1lbnQtYXV0by5hbGlnbm1lbnQtZW5ke3RyYW5zZm9ybTp0cmFuc2xhdGUoLTEwMCUsLTEwMCUpfTwvc3R5bGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEZRLDhCQUFnQixDQUFDLFFBQVEsS0FBSyxDQUFDLFNBQVMsUUFBUSxDQUFDLDZCQUFlLENBQUMsZUFBZSxJQUFJLENBQUMsU0FBUyxRQUFRLENBQUMsUUFBUSxHQUFHLENBQUMsZUFBZSw0QkFBYyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksb0JBQW9CLENBQUMsQ0FBQyxDQUFDLGVBQWUsK0JBQWlCLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsZUFBZSw2QkFBZSxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksb0JBQW9CLENBQUMsQ0FBQyxDQUFDLGVBQWUsOEJBQWdCLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsZUFBZSxpQkFBaUIsOEJBQWdCLENBQUMsZUFBZSxjQUFjLDhCQUFnQixDQUFDLG1CQUFtQixDQUFDLENBQUMsZUFBZSxpQkFBaUIsNEJBQWMsQ0FBQyxlQUFlLGNBQWMsNEJBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLGVBQWUsaUJBQWlCLCtCQUFpQixDQUFDLGVBQWUsY0FBYywrQkFBaUIsQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLFVBQVUsV0FBVyxJQUFJLENBQUMsQ0FBQyxlQUFlLGVBQWUsOEJBQWdCLENBQUMsZUFBZSxnQkFBZ0IsOEJBQWdCLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxlQUFlLGVBQWUsNEJBQWMsQ0FBQyxlQUFlLGdCQUFnQiw0QkFBYyxDQUFDLGdCQUFnQixDQUFDLENBQUMsZUFBZSxlQUFlLCtCQUFpQixDQUFDLGVBQWUsZ0JBQWdCLCtCQUFpQixDQUFDLGtCQUFrQixHQUFHLENBQUMsVUFBVSxXQUFXLElBQUksQ0FBQyxDQUFDLGVBQWUsNkJBQWUsQ0FBQyxVQUFVLFdBQVcsS0FBSyxDQUFDLENBQUMsZUFBZSxlQUFlLCtCQUFpQixDQUFDLFVBQVUsVUFBVSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsZUFBZSxlQUFlLDRCQUFjLENBQUMsVUFBVSxVQUFVLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyJ9 */");
}

const get_tooltip_slot_changes = dirty => ({});
const get_tooltip_slot_context = ctx => ({});

// (77:1) {#if visible}
function create_if_block(ctx) {
	let div;
	let tooltipsurface;
	let updating_element;
	let div_class_value;
	let div_style_value;
	let div_intro;
	let current;
	const tooltipsurface_spread_levels = [/*$$restProps*/ ctx[15]];

	function tooltipsurface_element_binding(value) {
		/*tooltipsurface_element_binding*/ ctx[19](value);
	}

	let tooltipsurface_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < tooltipsurface_spread_levels.length; i += 1) {
		tooltipsurface_props = assign(tooltipsurface_props, tooltipsurface_spread_levels[i]);
	}

	if (/*tooltipElement*/ ctx[1] !== void 0) {
		tooltipsurface_props.element = /*tooltipElement*/ ctx[1];
	}

	tooltipsurface = new TooltipSurface({
			props: tooltipsurface_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(tooltipsurface, 'element', tooltipsurface_element_binding));

	const block = {
		c: function create() {
			div = element("div");
			create_component(tooltipsurface.$$.fragment);
			attr_dev(div, "class", div_class_value = "tooltip-anchor placement-" + /*placement*/ ctx[6] + " alignment-" + /*alignment*/ ctx[7] + " svelte-e2a5n0");

			attr_dev(div, "style", div_style_value = "" + ((/*placement*/ ctx[6] === 'auto'
			? `top: calc(${/*currentPosition*/ ctx[10].y}px - var(--fds-tooltip-offset));
				   left: ${/*currentPosition*/ ctx[10].x}px;`
			: '') + " --fds-tooltip-offset: " + /*offset*/ ctx[5] + "px"));

			add_location(div, file, 77, 2, 2574);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(tooltipsurface, div, null);
			/*div_binding*/ ctx[20](div);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			const tooltipsurface_changes = (dirty & /*$$restProps*/ 32768)
			? get_spread_update(tooltipsurface_spread_levels, [get_spread_object(/*$$restProps*/ ctx[15])])
			: {};

			if (dirty & /*$$scope, text*/ 8388624) {
				tooltipsurface_changes.$$scope = { dirty, ctx };
			}

			if (!updating_element && dirty & /*tooltipElement*/ 2) {
				updating_element = true;
				tooltipsurface_changes.element = /*tooltipElement*/ ctx[1];
				add_flush_callback(() => updating_element = false);
			}

			tooltipsurface.$set(tooltipsurface_changes);

			if (!current || dirty & /*placement, alignment*/ 192 && div_class_value !== (div_class_value = "tooltip-anchor placement-" + /*placement*/ ctx[6] + " alignment-" + /*alignment*/ ctx[7] + " svelte-e2a5n0")) {
				attr_dev(div, "class", div_class_value);
			}

			if (!current || dirty & /*placement, currentPosition, offset*/ 1120 && div_style_value !== (div_style_value = "" + ((/*placement*/ ctx[6] === 'auto'
			? `top: calc(${/*currentPosition*/ ctx[10].y}px - var(--fds-tooltip-offset));
				   left: ${/*currentPosition*/ ctx[10].x}px;`
			: '') + " --fds-tooltip-offset: " + /*offset*/ ctx[5] + "px"))) {
				attr_dev(div, "style", div_style_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tooltipsurface.$$.fragment, local);

			if (local) {
				if (!div_intro) {
					add_render_callback(() => {
						div_intro = create_in_transition(div, fade, {
							duration: getCSSDuration("--fds-control-fast-duration")
						});

						div_intro.start();
					});
				}
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(tooltipsurface.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(tooltipsurface);
			/*div_binding*/ ctx[20](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(77:1) {#if visible}",
		ctx
	});

	return block;
}

// (87:3) <TooltipSurface bind:element={tooltipElement} {...$$restProps}>
function create_default_slot(ctx) {
	let t0;
	let t1;
	let current;
	const tooltip_slot_template = /*#slots*/ ctx[18].tooltip;
	const tooltip_slot = create_slot(tooltip_slot_template, ctx, /*$$scope*/ ctx[23], get_tooltip_slot_context);

	const block = {
		c: function create() {
			t0 = text_1(/*text*/ ctx[4]);
			t1 = space();
			if (tooltip_slot) tooltip_slot.c();
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);

			if (tooltip_slot) {
				tooltip_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*text*/ 16) set_data_dev(t0, /*text*/ ctx[4]);

			if (tooltip_slot) {
				if (tooltip_slot.p && (!current || dirty & /*$$scope*/ 8388608)) {
					update_slot_base(
						tooltip_slot,
						tooltip_slot_template,
						ctx,
						/*$$scope*/ ctx[23],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[23])
						: get_slot_changes(tooltip_slot_template, /*$$scope*/ ctx[23], dirty, get_tooltip_slot_changes),
						get_tooltip_slot_context
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tooltip_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tooltip_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
			if (tooltip_slot) tooltip_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(87:3) <TooltipSurface bind:element={tooltipElement} {...$$restProps}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let t;
	let div_title_value;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[18].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[23], null);
	let if_block = /*visible*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (default_slot) default_slot.c();
			t = space();
			if (if_block) if_block.c();
			attr_dev(div, "class", "tooltip-wrapper svelte-e2a5n0");
			attr_dev(div, "title", div_title_value = /*mounted*/ ctx[9] ? undefined : /*text*/ ctx[4]);
			add_location(div, file, 62, 0, 2218);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append_dev(div, t);
			if (if_block) if_block.m(div, null);
			/*div_binding_1*/ ctx[21](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(window, "scroll", /*destroyTooltip*/ ctx[14], false, false, false),
					listen_dev(div, "mouseenter", /*mountTooltip*/ ctx[13], false, false, false),
					listen_dev(div, "mouseleave", /*destroyTooltip*/ ctx[14], false, false, false),
					listen_dev(div, "mousemove", /*updateMousePosition*/ ctx[11], false, false, false),
					listen_dev(div, "mousemove", /*mousemove_handler*/ ctx[22], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8388608)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[23],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[23])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[23], dirty, null),
						null
					);
				}
			}

			if (/*visible*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*visible*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*mounted, text*/ 528 && div_title_value !== (div_title_value = /*mounted*/ ctx[9] ? undefined : /*text*/ ctx[4])) {
				attr_dev(div, "title", div_title_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (default_slot) default_slot.d(detaching);
			if (if_block) if_block.d();
			/*div_binding_1*/ ctx[21](null);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"text","offset","placement","alignment","followCursor","persistent","visible","delay","tooltipElement","anchorElement","wrapperElement"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('TooltipWrapper', slots, ['default','tooltip']);
	let { text = "" } = $$props;
	let { offset = 24 } = $$props;
	let { placement = "auto" } = $$props;
	let { alignment = "center" } = $$props;
	let { followCursor = false } = $$props;
	let { persistent = false } = $$props;
	let { visible = false } = $$props;
	let { delay = 1000 } = $$props;
	let { tooltipElement = null } = $$props;
	let { anchorElement = null } = $$props;
	let { wrapperElement = null } = $$props;
	let mounted = false;
	let tooltipDurationTimeout;
	let currentPosition = { x: 0, y: 0 };
	let mousePosition = { x: 0, y: 0 };
	onMount(() => $$invalidate(9, mounted = true));

	function updateMousePosition({ clientX, clientY }) {
		mousePosition.x = clientX;
		mousePosition.y = clientY;
	}

	function updateTooltipPositionAuto(wrapperPosition) {
		const { left, top } = wrapperPosition;
		$$invalidate(10, currentPosition.x = mousePosition.x - left, currentPosition);
		$$invalidate(10, currentPosition.y = mousePosition.y - top, currentPosition);
	}

	function mountTooltip() {
		tooltipDurationTimeout = setTimeout(
			() => {
				if (placement === "auto" && wrapperElement) updateTooltipPositionAuto(wrapperElement.getBoundingClientRect());
				$$invalidate(0, visible = true);
			},
			delay
		);
	}

	function destroyTooltip() {
		clearTimeout(tooltipDurationTimeout);
		if (!persistent) $$invalidate(0, visible = false);
	}

	function tooltipsurface_element_binding(value) {
		tooltipElement = value;
		$$invalidate(1, tooltipElement);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			anchorElement = $$value;
			$$invalidate(2, anchorElement);
		});
	}

	function div_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			wrapperElement = $$value;
			$$invalidate(3, wrapperElement);
		});
	}

	const mousemove_handler = () => placement === "auto" && followCursor && updateTooltipPositionAuto(wrapperElement.getBoundingClientRect());

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(15, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('text' in $$new_props) $$invalidate(4, text = $$new_props.text);
		if ('offset' in $$new_props) $$invalidate(5, offset = $$new_props.offset);
		if ('placement' in $$new_props) $$invalidate(6, placement = $$new_props.placement);
		if ('alignment' in $$new_props) $$invalidate(7, alignment = $$new_props.alignment);
		if ('followCursor' in $$new_props) $$invalidate(8, followCursor = $$new_props.followCursor);
		if ('persistent' in $$new_props) $$invalidate(16, persistent = $$new_props.persistent);
		if ('visible' in $$new_props) $$invalidate(0, visible = $$new_props.visible);
		if ('delay' in $$new_props) $$invalidate(17, delay = $$new_props.delay);
		if ('tooltipElement' in $$new_props) $$invalidate(1, tooltipElement = $$new_props.tooltipElement);
		if ('anchorElement' in $$new_props) $$invalidate(2, anchorElement = $$new_props.anchorElement);
		if ('wrapperElement' in $$new_props) $$invalidate(3, wrapperElement = $$new_props.wrapperElement);
		if ('$$scope' in $$new_props) $$invalidate(23, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		onMount,
		fade,
		getCSSDuration,
		TooltipSurface,
		text,
		offset,
		placement,
		alignment,
		followCursor,
		persistent,
		visible,
		delay,
		tooltipElement,
		anchorElement,
		wrapperElement,
		mounted,
		tooltipDurationTimeout,
		currentPosition,
		mousePosition,
		updateMousePosition,
		updateTooltipPositionAuto,
		mountTooltip,
		destroyTooltip
	});

	$$self.$inject_state = $$new_props => {
		if ('text' in $$props) $$invalidate(4, text = $$new_props.text);
		if ('offset' in $$props) $$invalidate(5, offset = $$new_props.offset);
		if ('placement' in $$props) $$invalidate(6, placement = $$new_props.placement);
		if ('alignment' in $$props) $$invalidate(7, alignment = $$new_props.alignment);
		if ('followCursor' in $$props) $$invalidate(8, followCursor = $$new_props.followCursor);
		if ('persistent' in $$props) $$invalidate(16, persistent = $$new_props.persistent);
		if ('visible' in $$props) $$invalidate(0, visible = $$new_props.visible);
		if ('delay' in $$props) $$invalidate(17, delay = $$new_props.delay);
		if ('tooltipElement' in $$props) $$invalidate(1, tooltipElement = $$new_props.tooltipElement);
		if ('anchorElement' in $$props) $$invalidate(2, anchorElement = $$new_props.anchorElement);
		if ('wrapperElement' in $$props) $$invalidate(3, wrapperElement = $$new_props.wrapperElement);
		if ('mounted' in $$props) $$invalidate(9, mounted = $$new_props.mounted);
		if ('tooltipDurationTimeout' in $$props) tooltipDurationTimeout = $$new_props.tooltipDurationTimeout;
		if ('currentPosition' in $$props) $$invalidate(10, currentPosition = $$new_props.currentPosition);
		if ('mousePosition' in $$props) mousePosition = $$new_props.mousePosition;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		visible,
		tooltipElement,
		anchorElement,
		wrapperElement,
		text,
		offset,
		placement,
		alignment,
		followCursor,
		mounted,
		currentPosition,
		updateMousePosition,
		updateTooltipPositionAuto,
		mountTooltip,
		destroyTooltip,
		$$restProps,
		persistent,
		delay,
		slots,
		tooltipsurface_element_binding,
		div_binding,
		div_binding_1,
		mousemove_handler,
		$$scope
	];
}

class TooltipWrapper extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				text: 4,
				offset: 5,
				placement: 6,
				alignment: 7,
				followCursor: 8,
				persistent: 16,
				visible: 0,
				delay: 17,
				tooltipElement: 1,
				anchorElement: 2,
				wrapperElement: 3
			},
			add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TooltipWrapper",
			options,
			id: create_fragment.name
		});
	}

	get text() {
		throw new Error("<TooltipWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set text(value) {
		throw new Error("<TooltipWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get offset() {
		throw new Error("<TooltipWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set offset(value) {
		throw new Error("<TooltipWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get placement() {
		throw new Error("<TooltipWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set placement(value) {
		throw new Error("<TooltipWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alignment() {
		throw new Error("<TooltipWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alignment(value) {
		throw new Error("<TooltipWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get followCursor() {
		throw new Error("<TooltipWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set followCursor(value) {
		throw new Error("<TooltipWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get persistent() {
		throw new Error("<TooltipWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set persistent(value) {
		throw new Error("<TooltipWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get visible() {
		throw new Error("<TooltipWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set visible(value) {
		throw new Error("<TooltipWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get delay() {
		throw new Error("<TooltipWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set delay(value) {
		throw new Error("<TooltipWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get tooltipElement() {
		throw new Error("<TooltipWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tooltipElement(value) {
		throw new Error("<TooltipWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get anchorElement() {
		throw new Error("<TooltipWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set anchorElement(value) {
		throw new Error("<TooltipWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get wrapperElement() {
		throw new Error("<TooltipWrapper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set wrapperElement(value) {
		throw new Error("<TooltipWrapper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default TooltipWrapper;