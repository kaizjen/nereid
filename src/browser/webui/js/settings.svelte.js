/* settings.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	append_styles,
	attr_dev,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	empty,
	globals,
	group_outros,
	handle_promise,
	init,
	insert_dev,
	is_function,
	mount_component,
	noop,
	safe_not_equal,
	set_data_dev,
	set_store_value,
	set_style,
	space,
	text,
	transition_in,
	transition_out,
	update_await_block_branch,
	validate_each_argument,
	validate_slots,
	validate_store
} from "nereid://.svelte/internal/index.mjs";

const { console: console_1 } = globals;
import { ListItem, TextBlock, ProgressRing } from "./modules/fluent-svelte/index.js";
import { onMount, setContext } from "nereid://.svelte/internal/index.mjs";
import { writable } from "nereid://.svelte/store/index.mjs";
import Header from "./common/Header.svelte.js";
import * as Icons from "./icons.js";
import Appearance from "./Settings/Appearance.svelte.js";
import Privacy from "./Settings/Privacy.svelte.js";
import SearchEngines from "./Settings/SearchEngines.svelte.js";
import OnStart from "./Settings/OnStart.svelte.js";
import Downloads from "./Settings/Downloads.svelte.js";
import Languages from "./Settings/Languages.svelte.js";
const file = "settings.svelte";

function add_css(target) {
	append_styles(target, "svelte-l6y10o", ":root{--menu-width-value:7cm}aside.svelte-l6y10o{padding-top:20px;border-right:1px solid var(--default-gray);width:var(--menu-width-value);flex-grow:4;position:absolute;height:100%;display:flex;flex-direction:column;align-items:center}main.svelte-l6y10o{overflow-y:auto;overflow-x:auto;position:absolute;left:var(--menu-width-value);height:100%;width:calc(100% - var(--menu-width-value));display:flex;justify-content:center;align-items:baseline}.content.svelte-l6y10o{width:18cm;padding-top:30px}section.svelte-l6y10o{display:block;border:1px solid var(--default-gray);border-radius:8px;padding:6px;margin-bottom:40px}.absolute-center.svelte-l6y10o{position:fixed;display:flex;width:100%;height:100%;justify-content:center;align-items:center;top:0;left:0;z-index:999}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	child_ctx[14] = list;
	child_ctx[15] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	child_ctx[17] = i;
	return child_ctx;
}

// (149:4) <Header name="settings">
function create_default_slot_2(ctx) {
	let icons_settings;
	let current;
	icons_settings = new Icons.Settings({ $$inline: true });

	const block = {
		c: function create() {
			create_component(icons_settings.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(icons_settings, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icons_settings.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icons_settings.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icons_settings, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(149:4) <Header name=\\\"settings\\\">",
		ctx
	});

	return block;
}

// (155:4) <ListItem        selected={checkIfInCenter(section.element, i == settingsSections.length-1 ? 'last' : (i == 0 ? 'first' : null), scrollTag)}        on:click={scrollToElementF(section.element)}      >
function create_default_slot_1(ctx) {
	let t_1_value = /*section*/ ctx[13].name + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*settingsSections*/ 4 && t_1_value !== (t_1_value = /*section*/ ctx[13].name + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(155:4) <ListItem        selected={checkIfInCenter(section.element, i == settingsSections.length-1 ? 'last' : (i == 0 ? 'first' : null), scrollTag)}        on:click={scrollToElementF(section.element)}      >",
		ctx
	});

	return block;
}

// (154:2) {#each settingsSections as section, i}
function create_each_block_1(ctx) {
	let listitem;
	let current;

	listitem = new ListItem({
			props: {
				selected: /*checkIfInCenter*/ ctx[6](
					/*section*/ ctx[13].element,
					/*i*/ ctx[17] == /*settingsSections*/ ctx[2].length - 1
					? 'last'
					: /*i*/ ctx[17] == 0 ? 'first' : null,
					/*scrollTag*/ ctx[0]
				),
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	listitem.$on("click", function () {
		if (is_function(/*scrollToElementF*/ ctx[7](/*section*/ ctx[13].element))) /*scrollToElementF*/ ctx[7](/*section*/ ctx[13].element).apply(this, arguments);
	});

	const block = {
		c: function create() {
			create_component(listitem.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(listitem, target, anchor);
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const listitem_changes = {};

			if (dirty & /*settingsSections, scrollTag*/ 5) listitem_changes.selected = /*checkIfInCenter*/ ctx[6](
				/*section*/ ctx[13].element,
				/*i*/ ctx[17] == /*settingsSections*/ ctx[2].length - 1
				? 'last'
				: /*i*/ ctx[17] == 0 ? 'first' : null,
				/*scrollTag*/ ctx[0]
			);

			if (dirty & /*$$scope, settingsSections*/ 262148) {
				listitem_changes.$$scope = { dirty, ctx };
			}

			listitem.$set(listitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(listitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(listitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(listitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(154:2) {#each settingsSections as section, i}",
		ctx
	});

	return block;
}

// (1:0) <style>    :root {      --menu-width-value: 7cm;    }
function create_catch_block(ctx) {
	const block = {
		c: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(1:0) <style>    :root {      --menu-width-value: 7cm;    }",
		ctx
	});

	return block;
}

// (167:4) {:then _}
function create_then_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*settingsSections*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*settingsSections, update*/ 260) {
				each_value = /*settingsSections*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(167:4) {:then _}",
		ctx
	});

	return block;
}

// (169:8) <TextBlock variant="titleLarge" style="margin-bottom: 15px;">
function create_default_slot(ctx) {
	let t_1_value = /*section*/ ctx[13].name + "";
	let t_1;

	const block = {
		c: function create() {
			t_1 = text(t_1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t_1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*settingsSections*/ 4 && t_1_value !== (t_1_value = /*section*/ ctx[13].name + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(169:8) <TextBlock variant=\\\"titleLarge\\\" style=\\\"margin-bottom: 15px;\\\">",
		ctx
	});

	return block;
}

// (168:6) {#each settingsSections as section}
function create_each_block(ctx) {
	let textblock;
	let t0;
	let section;
	let switch_instance;
	let t1;
	let each_value = /*each_value*/ ctx[14];
	let section_index = /*section_index*/ ctx[15];
	let current;

	textblock = new TextBlock({
			props: {
				variant: "titleLarge",
				style: "margin-bottom: 15px;",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	var switch_value = /*section*/ ctx[13].component;

	function switch_props(ctx) {
		return {
			props: { update: /*update*/ ctx[8] },
			$$inline: true
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	const assign_section = () => /*section_binding*/ ctx[9](section, each_value, section_index);
	const unassign_section = () => /*section_binding*/ ctx[9](null, each_value, section_index);

	const block = {
		c: function create() {
			create_component(textblock.$$.fragment);
			t0 = space();
			section = element("section");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			t1 = space();
			attr_dev(section, "class", "svelte-l6y10o");
			add_location(section, file, 170, 8, 4953);
		},
		m: function mount(target, anchor) {
			mount_component(textblock, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);

			if (switch_instance) {
				mount_component(switch_instance, section, null);
			}

			append_dev(section, t1);
			assign_section();
			current = true;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			const textblock_changes = {};

			if (dirty & /*$$scope, settingsSections*/ 262148) {
				textblock_changes.$$scope = { dirty, ctx };
			}

			textblock.$set(textblock_changes);

			if (switch_value !== (switch_value = /*section*/ ctx[13].component)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, section, t1);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				
			}

			if (each_value !== /*each_value*/ ctx[14] || section_index !== /*section_index*/ ctx[15]) {
				unassign_section();
				each_value = /*each_value*/ ctx[14];
				section_index = /*section_index*/ ctx[15];
				assign_section();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(textblock.$$.fragment, local);
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(textblock.$$.fragment, local);
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(textblock, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			if (switch_instance) destroy_component(switch_instance);
			unassign_section();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(168:6) {#each settingsSections as section}",
		ctx
	});

	return block;
}

// (163:23)         <div class="absolute-center">          <ProgressRing />        </div>      {:then _}
function create_pending_block(ctx) {
	let div;
	let progressring;
	let current;
	progressring = new ProgressRing({ $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			create_component(progressring.$$.fragment);
			attr_dev(div, "class", "absolute-center svelte-l6y10o");
			add_location(div, file, 163, 6, 4715);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(progressring, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(progressring.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progressring.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(progressring);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(163:23)         <div class=\\\"absolute-center\\\">          <ProgressRing />        </div>      {:then _}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let title_value;
	let t0;
	let aside;
	let div0;
	let header;
	let t1;
	let t2;
	let main_1;
	let div1;
	let promise;
	let current;
	document.title = title_value = /*t*/ ctx[5]('common.settings');

	header = new Header({
			props: {
				name: "settings",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	let each_value_1 = /*settingsSections*/ ctx[2];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: false,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 12,
		blocks: [,,,]
	};

	handle_promise(promise = /*configProm*/ ctx[3], info);

	const block = {
		c: function create() {
			t0 = space();
			aside = element("aside");
			div0 = element("div");
			create_component(header.$$.fragment);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			main_1 = element("main");
			div1 = element("div");
			info.block.c();
			set_style(div0, "margin-bottom", "12px");
			set_style(div0, "width", "100%");
			add_location(div0, file, 147, 2, 4210);
			attr_dev(aside, "class", "svelte-l6y10o");
			add_location(aside, file, 146, 0, 4199);
			attr_dev(div1, "class", "content svelte-l6y10o");
			add_location(div1, file, 161, 2, 4661);
			attr_dev(main_1, "class", "svelte-l6y10o");
			add_location(main_1, file, 160, 0, 4634);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, aside, anchor);
			append_dev(aside, div0);
			mount_component(header, div0, null);
			append_dev(aside, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(aside, null);
			}

			insert_dev(target, t2, anchor);
			insert_dev(target, main_1, anchor);
			append_dev(main_1, div1);
			info.block.m(div1, info.anchor = null);
			info.mount = () => div1;
			info.anchor = null;
			/*main_1_binding*/ ctx[10](main_1);
			current = true;
		},
		p: function update(new_ctx, [dirty]) {
			ctx = new_ctx;

			if ((!current || dirty & /*t*/ 32) && title_value !== (title_value = /*t*/ ctx[5]('common.settings'))) {
				document.title = title_value;
			}

			const header_changes = {};

			if (dirty & /*$$scope*/ 262144) {
				header_changes.$$scope = { dirty, ctx };
			}

			header.$set(header_changes);

			if (dirty & /*checkIfInCenter, settingsSections, scrollTag, scrollToElementF*/ 197) {
				each_value_1 = /*settingsSections*/ ctx[2];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(aside, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			update_await_block_branch(info, ctx, dirty);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(info.block);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(aside);
			destroy_component(header);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(main_1);
			info.block.d();
			info.token = null;
			info = null;
			/*main_1_binding*/ ctx[10](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $config;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Settings', slots, []);
	const configProm = window.nereid.userdata.config.get();
	let config = writable(null);
	validate_store(config, 'config');
	component_subscribe($$self, config, value => $$invalidate(11, $config = value));
	setContext('config', config);
	const { t } = window.nereid.i18n;

	configProm.then(c => {
		set_store_value(config, $config = c, $config);
	});

	let scrollTag = {};
	let main;

	const settingsSections = [
		{
			name: t('pages.settings.appearance.title'),
			element: null,
			component: Appearance
		},
		{
			name: t('pages.settings.privacy.title'),
			element: null,
			component: Privacy
		},
		{
			name: t('pages.settings.search.title'),
			element: null,
			component: SearchEngines
		},
		{
			name: t('pages.settings.on-start.title'),
			element: null,
			component: OnStart
		},
		{
			name: t('pages.settings.downloads.title'),
			element: null,
			component: Downloads
		},
		{
			name: t('pages.settings.languages.title'),
			element: null,
			component: Languages
		}
	];

	console.log(settingsSections);

	onMount(() => {
		main.addEventListener(
			'scroll',
			() => {
				requestAnimationFrame(() => {
					$$invalidate(0, scrollTag = {}); // update scrolltag
				});
			},
			{ passive: true }
		);
	});

	function checkIfInCenter(element, pos) {
		if (!element) return false;

		if (main.scrollTop <= 0) {
			// the highest element if scrolled to the top
			if (pos == 'first') return true; else return false;
		}

		if (main.scrollHeight - main.scrollTop == main.clientHeight) {
			// the lowest element if scrolled to the bottom
			if (pos == 'last') return true; else return false;
		}

		const { bottom, top } = element.getBoundingClientRect();
		const windowCenter = window.innerHeight / 2;
		return top - 50 < windowCenter && bottom + 50 > windowCenter; // 50 px added to minimize the possibility that no item is selected
	}

	function scrollToElementF(element) {
		return function () {
			if (!element) return false;
			const elemCenter = element.clientHeight / 2;
			const halfWindowSize = window.innerHeight / 2;
			const absoluteElementCenter = element.offsetTop + elemCenter;

			// Need to get the position in which halfWindowSize (windowCenter) and absoluteElementCenter are the same.
			// This is the same as ( absElemCenter - (windowSize - windowCenter) )
			main.scrollTo(0, absoluteElementCenter - halfWindowSize);
		};
	}

	async function update() {
		window.nereid.userdata.config.set($config);
	}

	window.nereid.userdata.config.subscribe(c => {
		console.log('sub', c);
		set_store_value(config, $config = c, $config);
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Settings> was created with unknown prop '${key}'`);
	});

	function section_binding($$value, each_value, section_index) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			each_value[section_index].element = $$value;
			$$invalidate(2, settingsSections);
		});
	}

	function main_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			main = $$value;
			$$invalidate(1, main);
		});
	}

	$$self.$capture_state = () => ({
		ListItem,
		TextBlock,
		ProgressRing,
		onMount,
		setContext,
		writable,
		Header,
		Icons,
		Appearance,
		Privacy,
		SearchEngines,
		OnStart,
		Downloads,
		Languages,
		configProm,
		config,
		t,
		scrollTag,
		main,
		settingsSections,
		checkIfInCenter,
		scrollToElementF,
		update,
		$config
	});

	$$self.$inject_state = $$props => {
		if ('config' in $$props) $$invalidate(4, config = $$props.config);
		if ('scrollTag' in $$props) $$invalidate(0, scrollTag = $$props.scrollTag);
		if ('main' in $$props) $$invalidate(1, main = $$props.main);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		scrollTag,
		main,
		settingsSections,
		configProm,
		config,
		t,
		checkIfInCenter,
		scrollToElementF,
		update,
		section_binding,
		main_1_binding
	];
}

class Settings extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {}, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Settings",
			options,
			id: create_fragment.name
		});
	}
}

export default Settings;