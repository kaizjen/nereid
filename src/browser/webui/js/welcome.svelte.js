/* welcome.svelte generated by Svelte v3.48.0 */
import {
	SvelteComponentDev,
	check_outros,
	create_component,
	destroy_component,
	detach_dev,
	dispatch_dev,
	empty,
	group_outros,
	init,
	insert_dev,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out,
	validate_slots
} from "nereid://.svelte/internal/index.mjs";

import CoolAnimation from "./Welcome/CoolAnimation.svelte.js";
import Eula from "./Welcome/EULA.svelte.js";
import LanguageChooser from "./Welcome/LanguageChooser.svelte.js";
import ThemeChooser from "./Welcome/ThemeChooser.svelte.js";
import YoureGoodToGo from "./Welcome/YoureGoodToGo.svelte.js";
const file = "welcome.svelte";

// (33:0) {#if slide == 0}
function create_if_block_4(ctx) {
	let coolanimation;
	let current;

	coolanimation = new CoolAnimation({
			props: { next: /*next*/ ctx[2] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(coolanimation.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(coolanimation, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(coolanimation.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(coolanimation.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(coolanimation, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(33:0) {#if slide == 0}",
		ctx
	});

	return block;
}

// (37:0) {#if slide == 1}
function create_if_block_3(ctx) {
	let languagechooser;
	let current;

	languagechooser = new LanguageChooser({
			props: {
				next: /*next*/ ctx[2],
				config: /*config*/ ctx[0]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(languagechooser.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(languagechooser, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const languagechooser_changes = {};
			if (dirty & /*config*/ 1) languagechooser_changes.config = /*config*/ ctx[0];
			languagechooser.$set(languagechooser_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(languagechooser.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(languagechooser.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(languagechooser, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(37:0) {#if slide == 1}",
		ctx
	});

	return block;
}

// (41:0) {#if slide == 2}
function create_if_block_2(ctx) {
	let themechooser;
	let current;

	themechooser = new ThemeChooser({
			props: {
				next: /*next*/ ctx[2],
				config: /*config*/ ctx[0]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(themechooser.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(themechooser, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const themechooser_changes = {};
			if (dirty & /*config*/ 1) themechooser_changes.config = /*config*/ ctx[0];
			themechooser.$set(themechooser_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(themechooser.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(themechooser.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(themechooser, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(41:0) {#if slide == 2}",
		ctx
	});

	return block;
}

// (45:0) {#if slide == 3}
function create_if_block_1(ctx) {
	let eula;
	let current;

	eula = new Eula({
			props: { next: /*next*/ ctx[2] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(eula.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(eula, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(eula.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(eula.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(eula, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(45:0) {#if slide == 3}",
		ctx
	});

	return block;
}

// (49:0) {#if slide >= 4}
function create_if_block(ctx) {
	let youregoodtogo;
	let current;

	youregoodtogo = new YoureGoodToGo({
			props: { next: /*next*/ ctx[2] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(youregoodtogo.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(youregoodtogo, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(youregoodtogo.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(youregoodtogo.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(youregoodtogo, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(49:0) {#if slide >= 4}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let if_block4_anchor;
	let current;
	let if_block0 = /*slide*/ ctx[1] == 0 && create_if_block_4(ctx);
	let if_block1 = /*slide*/ ctx[1] == 1 && create_if_block_3(ctx);
	let if_block2 = /*slide*/ ctx[1] == 2 && create_if_block_2(ctx);
	let if_block3 = /*slide*/ ctx[1] == 3 && create_if_block_1(ctx);
	let if_block4 = /*slide*/ ctx[1] >= 4 && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			if (if_block4) if_block4.c();
			if_block4_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, t2, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_dev(target, t3, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_dev(target, if_block4_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*slide*/ ctx[1] == 0) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*slide*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*slide*/ ctx[1] == 1) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*slide*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*slide*/ ctx[1] == 2) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*slide*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_2(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (/*slide*/ ctx[1] == 3) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty & /*slide*/ 2) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block_1(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(t3.parentNode, t3);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			if (/*slide*/ ctx[1] >= 4) {
				if (if_block4) {
					if_block4.p(ctx, dirty);

					if (dirty & /*slide*/ 2) {
						transition_in(if_block4, 1);
					}
				} else {
					if_block4 = create_if_block(ctx);
					if_block4.c();
					transition_in(if_block4, 1);
					if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
				}
			} else if (if_block4) {
				group_outros();

				transition_out(if_block4, 1, 1, () => {
					if_block4 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			transition_in(if_block3);
			transition_in(if_block4);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			transition_out(if_block3);
			transition_out(if_block4);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(t2);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach_dev(t3);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach_dev(if_block4_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Welcome', slots, []);
	let config;

	try {
		nereid.view.requestFullWindowView();
	} catch(_) {
		
	}

	let slide = -1;

	void (async function () {
		$$invalidate(0, config = await window.nereid.userdata.config.get());

		if (config.welcomePhase > 4) {
			await nereid.view.leaveFullWindowView();
			window.location = 'nereid://newtab';
		}

		$$invalidate(1, slide = config.welcomePhase);
	})();

	async function next() {
		$$invalidate(1, slide++, slide);
		$$invalidate(0, config.welcomePhase = slide, config);
		await window.nereid.userdata.config.set(config);
	}

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Welcome> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		CoolAnimation,
		Eula,
		LanguageChooser,
		ThemeChooser,
		YoureGoodToGo,
		config,
		slide,
		next
	});

	$$self.$inject_state = $$props => {
		if ('config' in $$props) $$invalidate(0, config = $$props.config);
		if ('slide' in $$props) $$invalidate(1, slide = $$props.slide);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [config, slide, next];
}

class Welcome extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Welcome",
			options,
			id: create_fragment.name
		});
	}
}

export default Welcome;